// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: configurationdata.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_configurationdata_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_configurationdata_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "nvramcontents.pb.h"
#include "softwareversions.pb.h"
#include "radarmodel.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_configurationdata_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_configurationdata_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_configurationdata_2eproto;
namespace Colossus {
namespace Protobuf {
class ConfigurationData;
class ConfigurationDataDefaultTypeInternal;
extern ConfigurationDataDefaultTypeInternal _ConfigurationData_default_instance_;
}  // namespace Protobuf
}  // namespace Colossus
PROTOBUF_NAMESPACE_OPEN
template<> ::Colossus::Protobuf::ConfigurationData* Arena::CreateMaybeMessage<::Colossus::Protobuf::ConfigurationData>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Colossus {
namespace Protobuf {

// ===================================================================

class ConfigurationData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Colossus.Protobuf.ConfigurationData) */ {
 public:
  inline ConfigurationData() : ConfigurationData(nullptr) {};
  virtual ~ConfigurationData();

  ConfigurationData(const ConfigurationData& from);
  ConfigurationData(ConfigurationData&& from) noexcept
    : ConfigurationData() {
    *this = ::std::move(from);
  }

  inline ConfigurationData& operator=(const ConfigurationData& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConfigurationData& operator=(ConfigurationData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ConfigurationData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConfigurationData* internal_default_instance() {
    return reinterpret_cast<const ConfigurationData*>(
               &_ConfigurationData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ConfigurationData& a, ConfigurationData& b) {
    a.Swap(&b);
  }
  inline void Swap(ConfigurationData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConfigurationData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ConfigurationData* New() const final {
    return CreateMaybeMessage<ConfigurationData>(nullptr);
  }

  ConfigurationData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ConfigurationData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ConfigurationData& from);
  void MergeFrom(const ConfigurationData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConfigurationData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Colossus.Protobuf.ConfigurationData";
  }
  protected:
  explicit ConfigurationData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_configurationdata_2eproto);
    return ::descriptor_table_configurationdata_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMacaddressFieldNumber = 2,
    kModuleserialnumberFieldNumber = 6,
    kRadaruniqueidFieldNumber = 8,
    kOnboardmacaddressFieldNumber = 13,
    kModelFieldNumber = 1,
    kSoftwareversionsFieldNumber = 3,
    kNvramcontentsFieldNumber = 4,
    kRangeresolutionhzFieldNumber = 5,
    kAutotunevalueFieldNumber = 7,
    kDatawidthFieldNumber = 9,
    kRangeresolutionmetresFieldNumber = 10,
    kRadarfeaturesFieldNumber = 11,
    kStaringmodeFieldNumber = 12,
  };
  // optional string macaddress = 2;
  bool has_macaddress() const;
  private:
  bool _internal_has_macaddress() const;
  public:
  void clear_macaddress();
  const std::string& macaddress() const;
  void set_macaddress(const std::string& value);
  void set_macaddress(std::string&& value);
  void set_macaddress(const char* value);
  void set_macaddress(const char* value, size_t size);
  std::string* mutable_macaddress();
  std::string* release_macaddress();
  void set_allocated_macaddress(std::string* macaddress);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_macaddress();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_macaddress(
      std::string* macaddress);
  private:
  const std::string& _internal_macaddress() const;
  void _internal_set_macaddress(const std::string& value);
  std::string* _internal_mutable_macaddress();
  public:

  // optional string moduleserialnumber = 6;
  bool has_moduleserialnumber() const;
  private:
  bool _internal_has_moduleserialnumber() const;
  public:
  void clear_moduleserialnumber();
  const std::string& moduleserialnumber() const;
  void set_moduleserialnumber(const std::string& value);
  void set_moduleserialnumber(std::string&& value);
  void set_moduleserialnumber(const char* value);
  void set_moduleserialnumber(const char* value, size_t size);
  std::string* mutable_moduleserialnumber();
  std::string* release_moduleserialnumber();
  void set_allocated_moduleserialnumber(std::string* moduleserialnumber);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_moduleserialnumber();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_moduleserialnumber(
      std::string* moduleserialnumber);
  private:
  const std::string& _internal_moduleserialnumber() const;
  void _internal_set_moduleserialnumber(const std::string& value);
  std::string* _internal_mutable_moduleserialnumber();
  public:

  // optional string radaruniqueid = 8;
  bool has_radaruniqueid() const;
  private:
  bool _internal_has_radaruniqueid() const;
  public:
  void clear_radaruniqueid();
  const std::string& radaruniqueid() const;
  void set_radaruniqueid(const std::string& value);
  void set_radaruniqueid(std::string&& value);
  void set_radaruniqueid(const char* value);
  void set_radaruniqueid(const char* value, size_t size);
  std::string* mutable_radaruniqueid();
  std::string* release_radaruniqueid();
  void set_allocated_radaruniqueid(std::string* radaruniqueid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_radaruniqueid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_radaruniqueid(
      std::string* radaruniqueid);
  private:
  const std::string& _internal_radaruniqueid() const;
  void _internal_set_radaruniqueid(const std::string& value);
  std::string* _internal_mutable_radaruniqueid();
  public:

  // optional string onboardmacaddress = 13;
  bool has_onboardmacaddress() const;
  private:
  bool _internal_has_onboardmacaddress() const;
  public:
  void clear_onboardmacaddress();
  const std::string& onboardmacaddress() const;
  void set_onboardmacaddress(const std::string& value);
  void set_onboardmacaddress(std::string&& value);
  void set_onboardmacaddress(const char* value);
  void set_onboardmacaddress(const char* value, size_t size);
  std::string* mutable_onboardmacaddress();
  std::string* release_onboardmacaddress();
  void set_allocated_onboardmacaddress(std::string* onboardmacaddress);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_onboardmacaddress();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_onboardmacaddress(
      std::string* onboardmacaddress);
  private:
  const std::string& _internal_onboardmacaddress() const;
  void _internal_set_onboardmacaddress(const std::string& value);
  std::string* _internal_mutable_onboardmacaddress();
  public:

  // optional .Colossus.Protobuf.RadarModel model = 1;
  bool has_model() const;
  private:
  bool _internal_has_model() const;
  public:
  void clear_model();
  const ::Colossus::Protobuf::RadarModel& model() const;
  ::Colossus::Protobuf::RadarModel* release_model();
  ::Colossus::Protobuf::RadarModel* mutable_model();
  void set_allocated_model(::Colossus::Protobuf::RadarModel* model);
  private:
  const ::Colossus::Protobuf::RadarModel& _internal_model() const;
  ::Colossus::Protobuf::RadarModel* _internal_mutable_model();
  public:
  void unsafe_arena_set_allocated_model(
      ::Colossus::Protobuf::RadarModel* model);
  ::Colossus::Protobuf::RadarModel* unsafe_arena_release_model();

  // optional .Colossus.Protobuf.SoftwareVersions softwareversions = 3;
  bool has_softwareversions() const;
  private:
  bool _internal_has_softwareversions() const;
  public:
  void clear_softwareversions();
  const ::Colossus::Protobuf::SoftwareVersions& softwareversions() const;
  ::Colossus::Protobuf::SoftwareVersions* release_softwareversions();
  ::Colossus::Protobuf::SoftwareVersions* mutable_softwareversions();
  void set_allocated_softwareversions(::Colossus::Protobuf::SoftwareVersions* softwareversions);
  private:
  const ::Colossus::Protobuf::SoftwareVersions& _internal_softwareversions() const;
  ::Colossus::Protobuf::SoftwareVersions* _internal_mutable_softwareversions();
  public:
  void unsafe_arena_set_allocated_softwareversions(
      ::Colossus::Protobuf::SoftwareVersions* softwareversions);
  ::Colossus::Protobuf::SoftwareVersions* unsafe_arena_release_softwareversions();

  // optional .Colossus.Protobuf.NVRamContents nvramcontents = 4;
  bool has_nvramcontents() const;
  private:
  bool _internal_has_nvramcontents() const;
  public:
  void clear_nvramcontents();
  const ::Colossus::Protobuf::NVRamContents& nvramcontents() const;
  ::Colossus::Protobuf::NVRamContents* release_nvramcontents();
  ::Colossus::Protobuf::NVRamContents* mutable_nvramcontents();
  void set_allocated_nvramcontents(::Colossus::Protobuf::NVRamContents* nvramcontents);
  private:
  const ::Colossus::Protobuf::NVRamContents& _internal_nvramcontents() const;
  ::Colossus::Protobuf::NVRamContents* _internal_mutable_nvramcontents();
  public:
  void unsafe_arena_set_allocated_nvramcontents(
      ::Colossus::Protobuf::NVRamContents* nvramcontents);
  ::Colossus::Protobuf::NVRamContents* unsafe_arena_release_nvramcontents();

  // optional float rangeresolutionhz = 5;
  bool has_rangeresolutionhz() const;
  private:
  bool _internal_has_rangeresolutionhz() const;
  public:
  void clear_rangeresolutionhz();
  float rangeresolutionhz() const;
  void set_rangeresolutionhz(float value);
  private:
  float _internal_rangeresolutionhz() const;
  void _internal_set_rangeresolutionhz(float value);
  public:

  // optional int32 autotunevalue = 7;
  bool has_autotunevalue() const;
  private:
  bool _internal_has_autotunevalue() const;
  public:
  void clear_autotunevalue();
  ::PROTOBUF_NAMESPACE_ID::int32 autotunevalue() const;
  void set_autotunevalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_autotunevalue() const;
  void _internal_set_autotunevalue(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 datawidth = 9;
  bool has_datawidth() const;
  private:
  bool _internal_has_datawidth() const;
  public:
  void clear_datawidth();
  ::PROTOBUF_NAMESPACE_ID::int32 datawidth() const;
  void set_datawidth(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_datawidth() const;
  void _internal_set_datawidth(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional float rangeresolutionmetres = 10;
  bool has_rangeresolutionmetres() const;
  private:
  bool _internal_has_rangeresolutionmetres() const;
  public:
  void clear_rangeresolutionmetres();
  float rangeresolutionmetres() const;
  void set_rangeresolutionmetres(float value);
  private:
  float _internal_rangeresolutionmetres() const;
  void _internal_set_rangeresolutionmetres(float value);
  public:

  // optional .Colossus.Protobuf.RadarFeatureFlag radarfeatures = 11;
  bool has_radarfeatures() const;
  private:
  bool _internal_has_radarfeatures() const;
  public:
  void clear_radarfeatures();
  ::Colossus::Protobuf::RadarFeatureFlag radarfeatures() const;
  void set_radarfeatures(::Colossus::Protobuf::RadarFeatureFlag value);
  private:
  ::Colossus::Protobuf::RadarFeatureFlag _internal_radarfeatures() const;
  void _internal_set_radarfeatures(::Colossus::Protobuf::RadarFeatureFlag value);
  public:

  // optional int32 staringmode = 12;
  bool has_staringmode() const;
  private:
  bool _internal_has_staringmode() const;
  public:
  void clear_staringmode();
  ::PROTOBUF_NAMESPACE_ID::int32 staringmode() const;
  void set_staringmode(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_staringmode() const;
  void _internal_set_staringmode(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Colossus.Protobuf.ConfigurationData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr macaddress_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr moduleserialnumber_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr radaruniqueid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr onboardmacaddress_;
  ::Colossus::Protobuf::RadarModel* model_;
  ::Colossus::Protobuf::SoftwareVersions* softwareversions_;
  ::Colossus::Protobuf::NVRamContents* nvramcontents_;
  float rangeresolutionhz_;
  ::PROTOBUF_NAMESPACE_ID::int32 autotunevalue_;
  ::PROTOBUF_NAMESPACE_ID::int32 datawidth_;
  float rangeresolutionmetres_;
  int radarfeatures_;
  ::PROTOBUF_NAMESPACE_ID::int32 staringmode_;
  friend struct ::TableStruct_configurationdata_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ConfigurationData

// optional .Colossus.Protobuf.RadarModel model = 1;
inline bool ConfigurationData::_internal_has_model() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || model_ != nullptr);
  return value;
}
inline bool ConfigurationData::has_model() const {
  return _internal_has_model();
}
inline const ::Colossus::Protobuf::RadarModel& ConfigurationData::_internal_model() const {
  const ::Colossus::Protobuf::RadarModel* p = model_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Colossus::Protobuf::RadarModel*>(
      &::Colossus::Protobuf::_RadarModel_default_instance_);
}
inline const ::Colossus::Protobuf::RadarModel& ConfigurationData::model() const {
  // @@protoc_insertion_point(field_get:Colossus.Protobuf.ConfigurationData.model)
  return _internal_model();
}
inline void ConfigurationData::unsafe_arena_set_allocated_model(
    ::Colossus::Protobuf::RadarModel* model) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(model_);
  }
  model_ = model;
  if (model) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Colossus.Protobuf.ConfigurationData.model)
}
inline ::Colossus::Protobuf::RadarModel* ConfigurationData::release_model() {
  auto temp = unsafe_arena_release_model();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Colossus::Protobuf::RadarModel* ConfigurationData::unsafe_arena_release_model() {
  // @@protoc_insertion_point(field_release:Colossus.Protobuf.ConfigurationData.model)
  _has_bits_[0] &= ~0x00000010u;
  ::Colossus::Protobuf::RadarModel* temp = model_;
  model_ = nullptr;
  return temp;
}
inline ::Colossus::Protobuf::RadarModel* ConfigurationData::_internal_mutable_model() {
  _has_bits_[0] |= 0x00000010u;
  if (model_ == nullptr) {
    auto* p = CreateMaybeMessage<::Colossus::Protobuf::RadarModel>(GetArena());
    model_ = p;
  }
  return model_;
}
inline ::Colossus::Protobuf::RadarModel* ConfigurationData::mutable_model() {
  // @@protoc_insertion_point(field_mutable:Colossus.Protobuf.ConfigurationData.model)
  return _internal_mutable_model();
}
inline void ConfigurationData::set_allocated_model(::Colossus::Protobuf::RadarModel* model) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(model_);
  }
  if (model) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(model)->GetArena();
    if (message_arena != submessage_arena) {
      model = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, model, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  model_ = model;
  // @@protoc_insertion_point(field_set_allocated:Colossus.Protobuf.ConfigurationData.model)
}

// optional string macaddress = 2;
inline bool ConfigurationData::_internal_has_macaddress() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ConfigurationData::has_macaddress() const {
  return _internal_has_macaddress();
}
inline void ConfigurationData::clear_macaddress() {
  macaddress_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ConfigurationData::macaddress() const {
  // @@protoc_insertion_point(field_get:Colossus.Protobuf.ConfigurationData.macaddress)
  return _internal_macaddress();
}
inline void ConfigurationData::set_macaddress(const std::string& value) {
  _internal_set_macaddress(value);
  // @@protoc_insertion_point(field_set:Colossus.Protobuf.ConfigurationData.macaddress)
}
inline std::string* ConfigurationData::mutable_macaddress() {
  // @@protoc_insertion_point(field_mutable:Colossus.Protobuf.ConfigurationData.macaddress)
  return _internal_mutable_macaddress();
}
inline const std::string& ConfigurationData::_internal_macaddress() const {
  return macaddress_.Get();
}
inline void ConfigurationData::_internal_set_macaddress(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  macaddress_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ConfigurationData::set_macaddress(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  macaddress_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Colossus.Protobuf.ConfigurationData.macaddress)
}
inline void ConfigurationData::set_macaddress(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  macaddress_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Colossus.Protobuf.ConfigurationData.macaddress)
}
inline void ConfigurationData::set_macaddress(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  macaddress_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Colossus.Protobuf.ConfigurationData.macaddress)
}
inline std::string* ConfigurationData::_internal_mutable_macaddress() {
  _has_bits_[0] |= 0x00000001u;
  return macaddress_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ConfigurationData::release_macaddress() {
  // @@protoc_insertion_point(field_release:Colossus.Protobuf.ConfigurationData.macaddress)
  if (!_internal_has_macaddress()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return macaddress_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ConfigurationData::set_allocated_macaddress(std::string* macaddress) {
  if (macaddress != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  macaddress_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), macaddress,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Colossus.Protobuf.ConfigurationData.macaddress)
}
inline std::string* ConfigurationData::unsafe_arena_release_macaddress() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Colossus.Protobuf.ConfigurationData.macaddress)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return macaddress_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ConfigurationData::unsafe_arena_set_allocated_macaddress(
    std::string* macaddress) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (macaddress != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  macaddress_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      macaddress, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Colossus.Protobuf.ConfigurationData.macaddress)
}

// optional .Colossus.Protobuf.SoftwareVersions softwareversions = 3;
inline bool ConfigurationData::_internal_has_softwareversions() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || softwareversions_ != nullptr);
  return value;
}
inline bool ConfigurationData::has_softwareversions() const {
  return _internal_has_softwareversions();
}
inline const ::Colossus::Protobuf::SoftwareVersions& ConfigurationData::_internal_softwareversions() const {
  const ::Colossus::Protobuf::SoftwareVersions* p = softwareversions_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Colossus::Protobuf::SoftwareVersions*>(
      &::Colossus::Protobuf::_SoftwareVersions_default_instance_);
}
inline const ::Colossus::Protobuf::SoftwareVersions& ConfigurationData::softwareversions() const {
  // @@protoc_insertion_point(field_get:Colossus.Protobuf.ConfigurationData.softwareversions)
  return _internal_softwareversions();
}
inline void ConfigurationData::unsafe_arena_set_allocated_softwareversions(
    ::Colossus::Protobuf::SoftwareVersions* softwareversions) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(softwareversions_);
  }
  softwareversions_ = softwareversions;
  if (softwareversions) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Colossus.Protobuf.ConfigurationData.softwareversions)
}
inline ::Colossus::Protobuf::SoftwareVersions* ConfigurationData::release_softwareversions() {
  auto temp = unsafe_arena_release_softwareversions();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Colossus::Protobuf::SoftwareVersions* ConfigurationData::unsafe_arena_release_softwareversions() {
  // @@protoc_insertion_point(field_release:Colossus.Protobuf.ConfigurationData.softwareversions)
  _has_bits_[0] &= ~0x00000020u;
  ::Colossus::Protobuf::SoftwareVersions* temp = softwareversions_;
  softwareversions_ = nullptr;
  return temp;
}
inline ::Colossus::Protobuf::SoftwareVersions* ConfigurationData::_internal_mutable_softwareversions() {
  _has_bits_[0] |= 0x00000020u;
  if (softwareversions_ == nullptr) {
    auto* p = CreateMaybeMessage<::Colossus::Protobuf::SoftwareVersions>(GetArena());
    softwareversions_ = p;
  }
  return softwareversions_;
}
inline ::Colossus::Protobuf::SoftwareVersions* ConfigurationData::mutable_softwareversions() {
  // @@protoc_insertion_point(field_mutable:Colossus.Protobuf.ConfigurationData.softwareversions)
  return _internal_mutable_softwareversions();
}
inline void ConfigurationData::set_allocated_softwareversions(::Colossus::Protobuf::SoftwareVersions* softwareversions) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(softwareversions_);
  }
  if (softwareversions) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(softwareversions)->GetArena();
    if (message_arena != submessage_arena) {
      softwareversions = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, softwareversions, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  softwareversions_ = softwareversions;
  // @@protoc_insertion_point(field_set_allocated:Colossus.Protobuf.ConfigurationData.softwareversions)
}

// optional .Colossus.Protobuf.NVRamContents nvramcontents = 4;
inline bool ConfigurationData::_internal_has_nvramcontents() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || nvramcontents_ != nullptr);
  return value;
}
inline bool ConfigurationData::has_nvramcontents() const {
  return _internal_has_nvramcontents();
}
inline const ::Colossus::Protobuf::NVRamContents& ConfigurationData::_internal_nvramcontents() const {
  const ::Colossus::Protobuf::NVRamContents* p = nvramcontents_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Colossus::Protobuf::NVRamContents*>(
      &::Colossus::Protobuf::_NVRamContents_default_instance_);
}
inline const ::Colossus::Protobuf::NVRamContents& ConfigurationData::nvramcontents() const {
  // @@protoc_insertion_point(field_get:Colossus.Protobuf.ConfigurationData.nvramcontents)
  return _internal_nvramcontents();
}
inline void ConfigurationData::unsafe_arena_set_allocated_nvramcontents(
    ::Colossus::Protobuf::NVRamContents* nvramcontents) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(nvramcontents_);
  }
  nvramcontents_ = nvramcontents;
  if (nvramcontents) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Colossus.Protobuf.ConfigurationData.nvramcontents)
}
inline ::Colossus::Protobuf::NVRamContents* ConfigurationData::release_nvramcontents() {
  auto temp = unsafe_arena_release_nvramcontents();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Colossus::Protobuf::NVRamContents* ConfigurationData::unsafe_arena_release_nvramcontents() {
  // @@protoc_insertion_point(field_release:Colossus.Protobuf.ConfigurationData.nvramcontents)
  _has_bits_[0] &= ~0x00000040u;
  ::Colossus::Protobuf::NVRamContents* temp = nvramcontents_;
  nvramcontents_ = nullptr;
  return temp;
}
inline ::Colossus::Protobuf::NVRamContents* ConfigurationData::_internal_mutable_nvramcontents() {
  _has_bits_[0] |= 0x00000040u;
  if (nvramcontents_ == nullptr) {
    auto* p = CreateMaybeMessage<::Colossus::Protobuf::NVRamContents>(GetArena());
    nvramcontents_ = p;
  }
  return nvramcontents_;
}
inline ::Colossus::Protobuf::NVRamContents* ConfigurationData::mutable_nvramcontents() {
  // @@protoc_insertion_point(field_mutable:Colossus.Protobuf.ConfigurationData.nvramcontents)
  return _internal_mutable_nvramcontents();
}
inline void ConfigurationData::set_allocated_nvramcontents(::Colossus::Protobuf::NVRamContents* nvramcontents) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(nvramcontents_);
  }
  if (nvramcontents) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(nvramcontents)->GetArena();
    if (message_arena != submessage_arena) {
      nvramcontents = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, nvramcontents, submessage_arena);
    }
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  nvramcontents_ = nvramcontents;
  // @@protoc_insertion_point(field_set_allocated:Colossus.Protobuf.ConfigurationData.nvramcontents)
}

// optional float rangeresolutionhz = 5;
inline bool ConfigurationData::_internal_has_rangeresolutionhz() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool ConfigurationData::has_rangeresolutionhz() const {
  return _internal_has_rangeresolutionhz();
}
inline void ConfigurationData::clear_rangeresolutionhz() {
  rangeresolutionhz_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline float ConfigurationData::_internal_rangeresolutionhz() const {
  return rangeresolutionhz_;
}
inline float ConfigurationData::rangeresolutionhz() const {
  // @@protoc_insertion_point(field_get:Colossus.Protobuf.ConfigurationData.rangeresolutionhz)
  return _internal_rangeresolutionhz();
}
inline void ConfigurationData::_internal_set_rangeresolutionhz(float value) {
  _has_bits_[0] |= 0x00000080u;
  rangeresolutionhz_ = value;
}
inline void ConfigurationData::set_rangeresolutionhz(float value) {
  _internal_set_rangeresolutionhz(value);
  // @@protoc_insertion_point(field_set:Colossus.Protobuf.ConfigurationData.rangeresolutionhz)
}

// optional string moduleserialnumber = 6;
inline bool ConfigurationData::_internal_has_moduleserialnumber() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ConfigurationData::has_moduleserialnumber() const {
  return _internal_has_moduleserialnumber();
}
inline void ConfigurationData::clear_moduleserialnumber() {
  moduleserialnumber_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ConfigurationData::moduleserialnumber() const {
  // @@protoc_insertion_point(field_get:Colossus.Protobuf.ConfigurationData.moduleserialnumber)
  return _internal_moduleserialnumber();
}
inline void ConfigurationData::set_moduleserialnumber(const std::string& value) {
  _internal_set_moduleserialnumber(value);
  // @@protoc_insertion_point(field_set:Colossus.Protobuf.ConfigurationData.moduleserialnumber)
}
inline std::string* ConfigurationData::mutable_moduleserialnumber() {
  // @@protoc_insertion_point(field_mutable:Colossus.Protobuf.ConfigurationData.moduleserialnumber)
  return _internal_mutable_moduleserialnumber();
}
inline const std::string& ConfigurationData::_internal_moduleserialnumber() const {
  return moduleserialnumber_.Get();
}
inline void ConfigurationData::_internal_set_moduleserialnumber(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  moduleserialnumber_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ConfigurationData::set_moduleserialnumber(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  moduleserialnumber_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Colossus.Protobuf.ConfigurationData.moduleserialnumber)
}
inline void ConfigurationData::set_moduleserialnumber(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  moduleserialnumber_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Colossus.Protobuf.ConfigurationData.moduleserialnumber)
}
inline void ConfigurationData::set_moduleserialnumber(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  moduleserialnumber_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Colossus.Protobuf.ConfigurationData.moduleserialnumber)
}
inline std::string* ConfigurationData::_internal_mutable_moduleserialnumber() {
  _has_bits_[0] |= 0x00000002u;
  return moduleserialnumber_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ConfigurationData::release_moduleserialnumber() {
  // @@protoc_insertion_point(field_release:Colossus.Protobuf.ConfigurationData.moduleserialnumber)
  if (!_internal_has_moduleserialnumber()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return moduleserialnumber_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ConfigurationData::set_allocated_moduleserialnumber(std::string* moduleserialnumber) {
  if (moduleserialnumber != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  moduleserialnumber_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), moduleserialnumber,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Colossus.Protobuf.ConfigurationData.moduleserialnumber)
}
inline std::string* ConfigurationData::unsafe_arena_release_moduleserialnumber() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Colossus.Protobuf.ConfigurationData.moduleserialnumber)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000002u;
  return moduleserialnumber_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ConfigurationData::unsafe_arena_set_allocated_moduleserialnumber(
    std::string* moduleserialnumber) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (moduleserialnumber != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  moduleserialnumber_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      moduleserialnumber, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Colossus.Protobuf.ConfigurationData.moduleserialnumber)
}

// optional int32 autotunevalue = 7;
inline bool ConfigurationData::_internal_has_autotunevalue() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool ConfigurationData::has_autotunevalue() const {
  return _internal_has_autotunevalue();
}
inline void ConfigurationData::clear_autotunevalue() {
  autotunevalue_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ConfigurationData::_internal_autotunevalue() const {
  return autotunevalue_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ConfigurationData::autotunevalue() const {
  // @@protoc_insertion_point(field_get:Colossus.Protobuf.ConfigurationData.autotunevalue)
  return _internal_autotunevalue();
}
inline void ConfigurationData::_internal_set_autotunevalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000100u;
  autotunevalue_ = value;
}
inline void ConfigurationData::set_autotunevalue(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_autotunevalue(value);
  // @@protoc_insertion_point(field_set:Colossus.Protobuf.ConfigurationData.autotunevalue)
}

// optional string radaruniqueid = 8;
inline bool ConfigurationData::_internal_has_radaruniqueid() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ConfigurationData::has_radaruniqueid() const {
  return _internal_has_radaruniqueid();
}
inline void ConfigurationData::clear_radaruniqueid() {
  radaruniqueid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& ConfigurationData::radaruniqueid() const {
  // @@protoc_insertion_point(field_get:Colossus.Protobuf.ConfigurationData.radaruniqueid)
  return _internal_radaruniqueid();
}
inline void ConfigurationData::set_radaruniqueid(const std::string& value) {
  _internal_set_radaruniqueid(value);
  // @@protoc_insertion_point(field_set:Colossus.Protobuf.ConfigurationData.radaruniqueid)
}
inline std::string* ConfigurationData::mutable_radaruniqueid() {
  // @@protoc_insertion_point(field_mutable:Colossus.Protobuf.ConfigurationData.radaruniqueid)
  return _internal_mutable_radaruniqueid();
}
inline const std::string& ConfigurationData::_internal_radaruniqueid() const {
  return radaruniqueid_.Get();
}
inline void ConfigurationData::_internal_set_radaruniqueid(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  radaruniqueid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ConfigurationData::set_radaruniqueid(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  radaruniqueid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Colossus.Protobuf.ConfigurationData.radaruniqueid)
}
inline void ConfigurationData::set_radaruniqueid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  radaruniqueid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Colossus.Protobuf.ConfigurationData.radaruniqueid)
}
inline void ConfigurationData::set_radaruniqueid(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  radaruniqueid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Colossus.Protobuf.ConfigurationData.radaruniqueid)
}
inline std::string* ConfigurationData::_internal_mutable_radaruniqueid() {
  _has_bits_[0] |= 0x00000004u;
  return radaruniqueid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ConfigurationData::release_radaruniqueid() {
  // @@protoc_insertion_point(field_release:Colossus.Protobuf.ConfigurationData.radaruniqueid)
  if (!_internal_has_radaruniqueid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return radaruniqueid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ConfigurationData::set_allocated_radaruniqueid(std::string* radaruniqueid) {
  if (radaruniqueid != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  radaruniqueid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), radaruniqueid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Colossus.Protobuf.ConfigurationData.radaruniqueid)
}
inline std::string* ConfigurationData::unsafe_arena_release_radaruniqueid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Colossus.Protobuf.ConfigurationData.radaruniqueid)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000004u;
  return radaruniqueid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ConfigurationData::unsafe_arena_set_allocated_radaruniqueid(
    std::string* radaruniqueid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (radaruniqueid != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  radaruniqueid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      radaruniqueid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Colossus.Protobuf.ConfigurationData.radaruniqueid)
}

// optional int32 datawidth = 9;
inline bool ConfigurationData::_internal_has_datawidth() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool ConfigurationData::has_datawidth() const {
  return _internal_has_datawidth();
}
inline void ConfigurationData::clear_datawidth() {
  datawidth_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ConfigurationData::_internal_datawidth() const {
  return datawidth_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ConfigurationData::datawidth() const {
  // @@protoc_insertion_point(field_get:Colossus.Protobuf.ConfigurationData.datawidth)
  return _internal_datawidth();
}
inline void ConfigurationData::_internal_set_datawidth(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000200u;
  datawidth_ = value;
}
inline void ConfigurationData::set_datawidth(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_datawidth(value);
  // @@protoc_insertion_point(field_set:Colossus.Protobuf.ConfigurationData.datawidth)
}

// optional float rangeresolutionmetres = 10;
inline bool ConfigurationData::_internal_has_rangeresolutionmetres() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool ConfigurationData::has_rangeresolutionmetres() const {
  return _internal_has_rangeresolutionmetres();
}
inline void ConfigurationData::clear_rangeresolutionmetres() {
  rangeresolutionmetres_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline float ConfigurationData::_internal_rangeresolutionmetres() const {
  return rangeresolutionmetres_;
}
inline float ConfigurationData::rangeresolutionmetres() const {
  // @@protoc_insertion_point(field_get:Colossus.Protobuf.ConfigurationData.rangeresolutionmetres)
  return _internal_rangeresolutionmetres();
}
inline void ConfigurationData::_internal_set_rangeresolutionmetres(float value) {
  _has_bits_[0] |= 0x00000400u;
  rangeresolutionmetres_ = value;
}
inline void ConfigurationData::set_rangeresolutionmetres(float value) {
  _internal_set_rangeresolutionmetres(value);
  // @@protoc_insertion_point(field_set:Colossus.Protobuf.ConfigurationData.rangeresolutionmetres)
}

// optional .Colossus.Protobuf.RadarFeatureFlag radarfeatures = 11;
inline bool ConfigurationData::_internal_has_radarfeatures() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool ConfigurationData::has_radarfeatures() const {
  return _internal_has_radarfeatures();
}
inline void ConfigurationData::clear_radarfeatures() {
  radarfeatures_ = 0;
  _has_bits_[0] &= ~0x00000800u;
}
inline ::Colossus::Protobuf::RadarFeatureFlag ConfigurationData::_internal_radarfeatures() const {
  return static_cast< ::Colossus::Protobuf::RadarFeatureFlag >(radarfeatures_);
}
inline ::Colossus::Protobuf::RadarFeatureFlag ConfigurationData::radarfeatures() const {
  // @@protoc_insertion_point(field_get:Colossus.Protobuf.ConfigurationData.radarfeatures)
  return _internal_radarfeatures();
}
inline void ConfigurationData::_internal_set_radarfeatures(::Colossus::Protobuf::RadarFeatureFlag value) {
  assert(::Colossus::Protobuf::RadarFeatureFlag_IsValid(value));
  _has_bits_[0] |= 0x00000800u;
  radarfeatures_ = value;
}
inline void ConfigurationData::set_radarfeatures(::Colossus::Protobuf::RadarFeatureFlag value) {
  _internal_set_radarfeatures(value);
  // @@protoc_insertion_point(field_set:Colossus.Protobuf.ConfigurationData.radarfeatures)
}

// optional int32 staringmode = 12;
inline bool ConfigurationData::_internal_has_staringmode() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool ConfigurationData::has_staringmode() const {
  return _internal_has_staringmode();
}
inline void ConfigurationData::clear_staringmode() {
  staringmode_ = 0;
  _has_bits_[0] &= ~0x00001000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ConfigurationData::_internal_staringmode() const {
  return staringmode_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ConfigurationData::staringmode() const {
  // @@protoc_insertion_point(field_get:Colossus.Protobuf.ConfigurationData.staringmode)
  return _internal_staringmode();
}
inline void ConfigurationData::_internal_set_staringmode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00001000u;
  staringmode_ = value;
}
inline void ConfigurationData::set_staringmode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_staringmode(value);
  // @@protoc_insertion_point(field_set:Colossus.Protobuf.ConfigurationData.staringmode)
}

// optional string onboardmacaddress = 13;
inline bool ConfigurationData::_internal_has_onboardmacaddress() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ConfigurationData::has_onboardmacaddress() const {
  return _internal_has_onboardmacaddress();
}
inline void ConfigurationData::clear_onboardmacaddress() {
  onboardmacaddress_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& ConfigurationData::onboardmacaddress() const {
  // @@protoc_insertion_point(field_get:Colossus.Protobuf.ConfigurationData.onboardmacaddress)
  return _internal_onboardmacaddress();
}
inline void ConfigurationData::set_onboardmacaddress(const std::string& value) {
  _internal_set_onboardmacaddress(value);
  // @@protoc_insertion_point(field_set:Colossus.Protobuf.ConfigurationData.onboardmacaddress)
}
inline std::string* ConfigurationData::mutable_onboardmacaddress() {
  // @@protoc_insertion_point(field_mutable:Colossus.Protobuf.ConfigurationData.onboardmacaddress)
  return _internal_mutable_onboardmacaddress();
}
inline const std::string& ConfigurationData::_internal_onboardmacaddress() const {
  return onboardmacaddress_.Get();
}
inline void ConfigurationData::_internal_set_onboardmacaddress(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  onboardmacaddress_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ConfigurationData::set_onboardmacaddress(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  onboardmacaddress_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Colossus.Protobuf.ConfigurationData.onboardmacaddress)
}
inline void ConfigurationData::set_onboardmacaddress(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  onboardmacaddress_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Colossus.Protobuf.ConfigurationData.onboardmacaddress)
}
inline void ConfigurationData::set_onboardmacaddress(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000008u;
  onboardmacaddress_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Colossus.Protobuf.ConfigurationData.onboardmacaddress)
}
inline std::string* ConfigurationData::_internal_mutable_onboardmacaddress() {
  _has_bits_[0] |= 0x00000008u;
  return onboardmacaddress_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ConfigurationData::release_onboardmacaddress() {
  // @@protoc_insertion_point(field_release:Colossus.Protobuf.ConfigurationData.onboardmacaddress)
  if (!_internal_has_onboardmacaddress()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return onboardmacaddress_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ConfigurationData::set_allocated_onboardmacaddress(std::string* onboardmacaddress) {
  if (onboardmacaddress != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  onboardmacaddress_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), onboardmacaddress,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Colossus.Protobuf.ConfigurationData.onboardmacaddress)
}
inline std::string* ConfigurationData::unsafe_arena_release_onboardmacaddress() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Colossus.Protobuf.ConfigurationData.onboardmacaddress)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000008u;
  return onboardmacaddress_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ConfigurationData::unsafe_arena_set_allocated_onboardmacaddress(
    std::string* onboardmacaddress) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (onboardmacaddress != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  onboardmacaddress_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      onboardmacaddress, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Colossus.Protobuf.ConfigurationData.onboardmacaddress)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace Protobuf
}  // namespace Colossus

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_configurationdata_2eproto
