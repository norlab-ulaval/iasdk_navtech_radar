// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: discovery.proto

#include "discovery.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_radarmodel_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RadarModel_radarmodel_2eproto;
namespace Colossus {
namespace Protobuf {
class DiscoveryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Discovery> _instance;
} _Discovery_default_instance_;
}  // namespace Protobuf
}  // namespace Colossus
static void InitDefaultsscc_info_Discovery_discovery_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Colossus::Protobuf::_Discovery_default_instance_;
    new (ptr) ::Colossus::Protobuf::Discovery();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Colossus::Protobuf::Discovery::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Discovery_discovery_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Discovery_discovery_2eproto}, {
      &scc_info_RadarModel_radarmodel_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_discovery_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_discovery_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_discovery_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_discovery_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::Colossus::Protobuf::Discovery, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Colossus::Protobuf::Discovery, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Colossus::Protobuf::Discovery, model_),
  PROTOBUF_FIELD_OFFSET(::Colossus::Protobuf::Discovery, maxclientsallowed_),
  PROTOBUF_FIELD_OFFSET(::Colossus::Protobuf::Discovery, ipclients_),
  PROTOBUF_FIELD_OFFSET(::Colossus::Protobuf::Discovery, radarfeatures_),
  PROTOBUF_FIELD_OFFSET(::Colossus::Protobuf::Discovery, staringmode_),
  PROTOBUF_FIELD_OFFSET(::Colossus::Protobuf::Discovery, transmitterenabled_),
  PROTOBUF_FIELD_OFFSET(::Colossus::Protobuf::Discovery, rangeresolutionmetres_),
  PROTOBUF_FIELD_OFFSET(::Colossus::Protobuf::Discovery, onboardmacaddress_),
  1,
  2,
  ~0u,
  3,
  4,
  5,
  6,
  0,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 13, sizeof(::Colossus::Protobuf::Discovery)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Colossus::Protobuf::_Discovery_default_instance_),
};

const char descriptor_table_protodef_discovery_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\017discovery.proto\022\021Colossus.Protobuf\032\020ra"
  "darmodel.proto\"\216\002\n\tDiscovery\022,\n\005model\030\001 "
  "\001(\0132\035.Colossus.Protobuf.RadarModel\022\031\n\021ma"
  "xclientsallowed\030\002 \001(\005\022\021\n\tipclients\030\003 \003(\t"
  "\022:\n\rradarfeatures\030\004 \001(\0162#.Colossus.Proto"
  "buf.RadarFeatureFlag\022\023\n\013StaringMode\030\005 \001("
  "\005\022\032\n\022TransmitterEnabled\030\006 \001(\005\022\035\n\025RangeRe"
  "solutionMetres\030\007 \001(\002\022\031\n\021onboardmacaddres"
  "s\030\010 \001(\t"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_discovery_2eproto_deps[1] = {
  &::descriptor_table_radarmodel_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_discovery_2eproto_sccs[1] = {
  &scc_info_Discovery_discovery_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_discovery_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_discovery_2eproto = {
  false, false, descriptor_table_protodef_discovery_2eproto, "discovery.proto", 327,
  &descriptor_table_discovery_2eproto_once, descriptor_table_discovery_2eproto_sccs, descriptor_table_discovery_2eproto_deps, 1, 1,
  schemas, file_default_instances, TableStruct_discovery_2eproto::offsets,
  file_level_metadata_discovery_2eproto, 1, file_level_enum_descriptors_discovery_2eproto, file_level_service_descriptors_discovery_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_discovery_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_discovery_2eproto)), true);
namespace Colossus {
namespace Protobuf {

// ===================================================================

void Discovery::InitAsDefaultInstance() {
  ::Colossus::Protobuf::_Discovery_default_instance_._instance.get_mutable()->model_ = const_cast< ::Colossus::Protobuf::RadarModel*>(
      ::Colossus::Protobuf::RadarModel::internal_default_instance());
}
class Discovery::_Internal {
 public:
  using HasBits = decltype(std::declval<Discovery>()._has_bits_);
  static const ::Colossus::Protobuf::RadarModel& model(const Discovery* msg);
  static void set_has_model(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_maxclientsallowed(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_radarfeatures(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_staringmode(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_transmitterenabled(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_rangeresolutionmetres(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_onboardmacaddress(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::Colossus::Protobuf::RadarModel&
Discovery::_Internal::model(const Discovery* msg) {
  return *msg->model_;
}
void Discovery::clear_model() {
  if (model_ != nullptr) model_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
Discovery::Discovery(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  ipclients_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Colossus.Protobuf.Discovery)
}
Discovery::Discovery(const Discovery& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      ipclients_(from.ipclients_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  onboardmacaddress_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_onboardmacaddress()) {
    onboardmacaddress_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_onboardmacaddress(),
      GetArena());
  }
  if (from._internal_has_model()) {
    model_ = new ::Colossus::Protobuf::RadarModel(*from.model_);
  } else {
    model_ = nullptr;
  }
  ::memcpy(&maxclientsallowed_, &from.maxclientsallowed_,
    static_cast<size_t>(reinterpret_cast<char*>(&rangeresolutionmetres_) -
    reinterpret_cast<char*>(&maxclientsallowed_)) + sizeof(rangeresolutionmetres_));
  // @@protoc_insertion_point(copy_constructor:Colossus.Protobuf.Discovery)
}

void Discovery::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Discovery_discovery_2eproto.base);
  onboardmacaddress_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&model_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rangeresolutionmetres_) -
      reinterpret_cast<char*>(&model_)) + sizeof(rangeresolutionmetres_));
}

Discovery::~Discovery() {
  // @@protoc_insertion_point(destructor:Colossus.Protobuf.Discovery)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Discovery::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  onboardmacaddress_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete model_;
}

void Discovery::ArenaDtor(void* object) {
  Discovery* _this = reinterpret_cast< Discovery* >(object);
  (void)_this;
}
void Discovery::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Discovery::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Discovery& Discovery::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Discovery_discovery_2eproto.base);
  return *internal_default_instance();
}


void Discovery::Clear() {
// @@protoc_insertion_point(message_clear_start:Colossus.Protobuf.Discovery)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ipclients_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      onboardmacaddress_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(model_ != nullptr);
      model_->Clear();
    }
  }
  if (cached_has_bits & 0x0000007cu) {
    ::memset(&maxclientsallowed_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&rangeresolutionmetres_) -
        reinterpret_cast<char*>(&maxclientsallowed_)) + sizeof(rangeresolutionmetres_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Discovery::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .Colossus.Protobuf.RadarModel model = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_model(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 maxclientsallowed = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_maxclientsallowed(&has_bits);
          maxclientsallowed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string ipclients = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_ipclients();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Colossus.Protobuf.Discovery.ipclients");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // optional .Colossus.Protobuf.RadarFeatureFlag radarfeatures = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::Colossus::Protobuf::RadarFeatureFlag_IsValid(val))) {
            _internal_set_radarfeatures(static_cast<::Colossus::Protobuf::RadarFeatureFlag>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional int32 StaringMode = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_staringmode(&has_bits);
          staringmode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 TransmitterEnabled = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_transmitterenabled(&has_bits);
          transmitterenabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float RangeResolutionMetres = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          _Internal::set_has_rangeresolutionmetres(&has_bits);
          rangeresolutionmetres_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional string onboardmacaddress = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_onboardmacaddress();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Colossus.Protobuf.Discovery.onboardmacaddress");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Discovery::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Colossus.Protobuf.Discovery)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .Colossus.Protobuf.RadarModel model = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::model(this), target, stream);
  }

  // optional int32 maxclientsallowed = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_maxclientsallowed(), target);
  }

  // repeated string ipclients = 3;
  for (int i = 0, n = this->_internal_ipclients_size(); i < n; i++) {
    const auto& s = this->_internal_ipclients(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Colossus.Protobuf.Discovery.ipclients");
    target = stream->WriteString(3, s, target);
  }

  // optional .Colossus.Protobuf.RadarFeatureFlag radarfeatures = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_radarfeatures(), target);
  }

  // optional int32 StaringMode = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_staringmode(), target);
  }

  // optional int32 TransmitterEnabled = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_transmitterenabled(), target);
  }

  // optional float RangeResolutionMetres = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_rangeresolutionmetres(), target);
  }

  // optional string onboardmacaddress = 8;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_onboardmacaddress().data(), static_cast<int>(this->_internal_onboardmacaddress().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Colossus.Protobuf.Discovery.onboardmacaddress");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_onboardmacaddress(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Colossus.Protobuf.Discovery)
  return target;
}

size_t Discovery::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Colossus.Protobuf.Discovery)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string ipclients = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(ipclients_.size());
  for (int i = 0, n = ipclients_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      ipclients_.Get(i));
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional string onboardmacaddress = 8;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_onboardmacaddress());
    }

    // optional .Colossus.Protobuf.RadarModel model = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *model_);
    }

    // optional int32 maxclientsallowed = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_maxclientsallowed());
    }

    // optional .Colossus.Protobuf.RadarFeatureFlag radarfeatures = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_radarfeatures());
    }

    // optional int32 StaringMode = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_staringmode());
    }

    // optional int32 TransmitterEnabled = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_transmitterenabled());
    }

    // optional float RangeResolutionMetres = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Discovery::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Colossus.Protobuf.Discovery)
  GOOGLE_DCHECK_NE(&from, this);
  const Discovery* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Discovery>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Colossus.Protobuf.Discovery)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Colossus.Protobuf.Discovery)
    MergeFrom(*source);
  }
}

void Discovery::MergeFrom(const Discovery& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Colossus.Protobuf.Discovery)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ipclients_.MergeFrom(from.ipclients_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_onboardmacaddress(from._internal_onboardmacaddress());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_model()->::Colossus::Protobuf::RadarModel::MergeFrom(from._internal_model());
    }
    if (cached_has_bits & 0x00000004u) {
      maxclientsallowed_ = from.maxclientsallowed_;
    }
    if (cached_has_bits & 0x00000008u) {
      radarfeatures_ = from.radarfeatures_;
    }
    if (cached_has_bits & 0x00000010u) {
      staringmode_ = from.staringmode_;
    }
    if (cached_has_bits & 0x00000020u) {
      transmitterenabled_ = from.transmitterenabled_;
    }
    if (cached_has_bits & 0x00000040u) {
      rangeresolutionmetres_ = from.rangeresolutionmetres_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Discovery::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Colossus.Protobuf.Discovery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Discovery::CopyFrom(const Discovery& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Colossus.Protobuf.Discovery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Discovery::IsInitialized() const {
  return true;
}

void Discovery::InternalSwap(Discovery* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ipclients_.InternalSwap(&other->ipclients_);
  onboardmacaddress_.Swap(&other->onboardmacaddress_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Discovery, rangeresolutionmetres_)
      + sizeof(Discovery::rangeresolutionmetres_)
      - PROTOBUF_FIELD_OFFSET(Discovery, model_)>(
          reinterpret_cast<char*>(&model_),
          reinterpret_cast<char*>(&other->model_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Discovery::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace Protobuf
}  // namespace Colossus
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::Colossus::Protobuf::Discovery* Arena::CreateMaybeMessage< ::Colossus::Protobuf::Discovery >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Colossus::Protobuf::Discovery >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
