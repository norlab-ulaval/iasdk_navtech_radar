// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: configurationdata.proto

#include "configurationdata.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_nvramcontents_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NVRamContents_nvramcontents_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_radarmodel_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RadarModel_radarmodel_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_softwareversions_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SoftwareVersions_softwareversions_2eproto;
namespace Colossus {
namespace Protobuf {
class ConfigurationDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ConfigurationData> _instance;
} _ConfigurationData_default_instance_;
}  // namespace Protobuf
}  // namespace Colossus
static void InitDefaultsscc_info_ConfigurationData_configurationdata_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Colossus::Protobuf::_ConfigurationData_default_instance_;
    new (ptr) ::Colossus::Protobuf::ConfigurationData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Colossus::Protobuf::ConfigurationData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_ConfigurationData_configurationdata_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_ConfigurationData_configurationdata_2eproto}, {
      &scc_info_RadarModel_radarmodel_2eproto.base,
      &scc_info_SoftwareVersions_softwareversions_2eproto.base,
      &scc_info_NVRamContents_nvramcontents_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_configurationdata_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_configurationdata_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_configurationdata_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_configurationdata_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::Colossus::Protobuf::ConfigurationData, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Colossus::Protobuf::ConfigurationData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Colossus::Protobuf::ConfigurationData, model_),
  PROTOBUF_FIELD_OFFSET(::Colossus::Protobuf::ConfigurationData, macaddress_),
  PROTOBUF_FIELD_OFFSET(::Colossus::Protobuf::ConfigurationData, softwareversions_),
  PROTOBUF_FIELD_OFFSET(::Colossus::Protobuf::ConfigurationData, nvramcontents_),
  PROTOBUF_FIELD_OFFSET(::Colossus::Protobuf::ConfigurationData, rangeresolutionhz_),
  PROTOBUF_FIELD_OFFSET(::Colossus::Protobuf::ConfigurationData, moduleserialnumber_),
  PROTOBUF_FIELD_OFFSET(::Colossus::Protobuf::ConfigurationData, autotunevalue_),
  PROTOBUF_FIELD_OFFSET(::Colossus::Protobuf::ConfigurationData, radaruniqueid_),
  PROTOBUF_FIELD_OFFSET(::Colossus::Protobuf::ConfigurationData, datawidth_),
  PROTOBUF_FIELD_OFFSET(::Colossus::Protobuf::ConfigurationData, rangeresolutionmetres_),
  PROTOBUF_FIELD_OFFSET(::Colossus::Protobuf::ConfigurationData, radarfeatures_),
  PROTOBUF_FIELD_OFFSET(::Colossus::Protobuf::ConfigurationData, staringmode_),
  PROTOBUF_FIELD_OFFSET(::Colossus::Protobuf::ConfigurationData, onboardmacaddress_),
  4,
  0,
  5,
  6,
  7,
  1,
  8,
  2,
  9,
  10,
  11,
  12,
  3,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 18, sizeof(::Colossus::Protobuf::ConfigurationData)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Colossus::Protobuf::_ConfigurationData_default_instance_),
};

const char descriptor_table_protodef_configurationdata_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\027configurationdata.proto\022\021Colossus.Prot"
  "obuf\032\023nvramcontents.proto\032\026softwareversi"
  "ons.proto\032\020radarmodel.proto\"\320\003\n\021Configur"
  "ationData\022,\n\005model\030\001 \001(\0132\035.Colossus.Prot"
  "obuf.RadarModel\022\022\n\nmacaddress\030\002 \001(\t\022=\n\020s"
  "oftwareversions\030\003 \001(\0132#.Colossus.Protobu"
  "f.SoftwareVersions\0227\n\rnvramcontents\030\004 \001("
  "\0132 .Colossus.Protobuf.NVRamContents\022\031\n\021r"
  "angeresolutionhz\030\005 \001(\002\022\032\n\022moduleserialnu"
  "mber\030\006 \001(\t\022\025\n\rautotunevalue\030\007 \001(\005\022\025\n\rrad"
  "aruniqueid\030\010 \001(\t\022\021\n\tdatawidth\030\t \001(\005\022\035\n\025r"
  "angeresolutionmetres\030\n \001(\002\022:\n\rradarfeatu"
  "res\030\013 \001(\0162#.Colossus.Protobuf.RadarFeatu"
  "reFlag\022\023\n\013staringmode\030\014 \001(\005\022\031\n\021onboardma"
  "caddress\030\r \001(\t"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_configurationdata_2eproto_deps[3] = {
  &::descriptor_table_nvramcontents_2eproto,
  &::descriptor_table_radarmodel_2eproto,
  &::descriptor_table_softwareversions_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_configurationdata_2eproto_sccs[1] = {
  &scc_info_ConfigurationData_configurationdata_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_configurationdata_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_configurationdata_2eproto = {
  false, false, descriptor_table_protodef_configurationdata_2eproto, "configurationdata.proto", 574,
  &descriptor_table_configurationdata_2eproto_once, descriptor_table_configurationdata_2eproto_sccs, descriptor_table_configurationdata_2eproto_deps, 1, 3,
  schemas, file_default_instances, TableStruct_configurationdata_2eproto::offsets,
  file_level_metadata_configurationdata_2eproto, 1, file_level_enum_descriptors_configurationdata_2eproto, file_level_service_descriptors_configurationdata_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_configurationdata_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_configurationdata_2eproto)), true);
namespace Colossus {
namespace Protobuf {

// ===================================================================

void ConfigurationData::InitAsDefaultInstance() {
  ::Colossus::Protobuf::_ConfigurationData_default_instance_._instance.get_mutable()->model_ = const_cast< ::Colossus::Protobuf::RadarModel*>(
      ::Colossus::Protobuf::RadarModel::internal_default_instance());
  ::Colossus::Protobuf::_ConfigurationData_default_instance_._instance.get_mutable()->softwareversions_ = const_cast< ::Colossus::Protobuf::SoftwareVersions*>(
      ::Colossus::Protobuf::SoftwareVersions::internal_default_instance());
  ::Colossus::Protobuf::_ConfigurationData_default_instance_._instance.get_mutable()->nvramcontents_ = const_cast< ::Colossus::Protobuf::NVRamContents*>(
      ::Colossus::Protobuf::NVRamContents::internal_default_instance());
}
class ConfigurationData::_Internal {
 public:
  using HasBits = decltype(std::declval<ConfigurationData>()._has_bits_);
  static const ::Colossus::Protobuf::RadarModel& model(const ConfigurationData* msg);
  static void set_has_model(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_macaddress(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::Colossus::Protobuf::SoftwareVersions& softwareversions(const ConfigurationData* msg);
  static void set_has_softwareversions(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::Colossus::Protobuf::NVRamContents& nvramcontents(const ConfigurationData* msg);
  static void set_has_nvramcontents(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_rangeresolutionhz(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_moduleserialnumber(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_autotunevalue(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_radaruniqueid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_datawidth(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_rangeresolutionmetres(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_radarfeatures(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_staringmode(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_onboardmacaddress(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::Colossus::Protobuf::RadarModel&
ConfigurationData::_Internal::model(const ConfigurationData* msg) {
  return *msg->model_;
}
const ::Colossus::Protobuf::SoftwareVersions&
ConfigurationData::_Internal::softwareversions(const ConfigurationData* msg) {
  return *msg->softwareversions_;
}
const ::Colossus::Protobuf::NVRamContents&
ConfigurationData::_Internal::nvramcontents(const ConfigurationData* msg) {
  return *msg->nvramcontents_;
}
void ConfigurationData::clear_model() {
  if (model_ != nullptr) model_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
void ConfigurationData::clear_softwareversions() {
  if (softwareversions_ != nullptr) softwareversions_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
void ConfigurationData::clear_nvramcontents() {
  if (nvramcontents_ != nullptr) nvramcontents_->Clear();
  _has_bits_[0] &= ~0x00000040u;
}
ConfigurationData::ConfigurationData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Colossus.Protobuf.ConfigurationData)
}
ConfigurationData::ConfigurationData(const ConfigurationData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  macaddress_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_macaddress()) {
    macaddress_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_macaddress(),
      GetArena());
  }
  moduleserialnumber_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_moduleserialnumber()) {
    moduleserialnumber_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_moduleserialnumber(),
      GetArena());
  }
  radaruniqueid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_radaruniqueid()) {
    radaruniqueid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_radaruniqueid(),
      GetArena());
  }
  onboardmacaddress_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_onboardmacaddress()) {
    onboardmacaddress_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_onboardmacaddress(),
      GetArena());
  }
  if (from._internal_has_model()) {
    model_ = new ::Colossus::Protobuf::RadarModel(*from.model_);
  } else {
    model_ = nullptr;
  }
  if (from._internal_has_softwareversions()) {
    softwareversions_ = new ::Colossus::Protobuf::SoftwareVersions(*from.softwareversions_);
  } else {
    softwareversions_ = nullptr;
  }
  if (from._internal_has_nvramcontents()) {
    nvramcontents_ = new ::Colossus::Protobuf::NVRamContents(*from.nvramcontents_);
  } else {
    nvramcontents_ = nullptr;
  }
  ::memcpy(&rangeresolutionhz_, &from.rangeresolutionhz_,
    static_cast<size_t>(reinterpret_cast<char*>(&staringmode_) -
    reinterpret_cast<char*>(&rangeresolutionhz_)) + sizeof(staringmode_));
  // @@protoc_insertion_point(copy_constructor:Colossus.Protobuf.ConfigurationData)
}

void ConfigurationData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ConfigurationData_configurationdata_2eproto.base);
  macaddress_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  moduleserialnumber_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  radaruniqueid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  onboardmacaddress_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&model_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&staringmode_) -
      reinterpret_cast<char*>(&model_)) + sizeof(staringmode_));
}

ConfigurationData::~ConfigurationData() {
  // @@protoc_insertion_point(destructor:Colossus.Protobuf.ConfigurationData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ConfigurationData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  macaddress_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  moduleserialnumber_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  radaruniqueid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  onboardmacaddress_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete model_;
  if (this != internal_default_instance()) delete softwareversions_;
  if (this != internal_default_instance()) delete nvramcontents_;
}

void ConfigurationData::ArenaDtor(void* object) {
  ConfigurationData* _this = reinterpret_cast< ConfigurationData* >(object);
  (void)_this;
}
void ConfigurationData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ConfigurationData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ConfigurationData& ConfigurationData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ConfigurationData_configurationdata_2eproto.base);
  return *internal_default_instance();
}


void ConfigurationData::Clear() {
// @@protoc_insertion_point(message_clear_start:Colossus.Protobuf.ConfigurationData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      macaddress_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      moduleserialnumber_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      radaruniqueid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      onboardmacaddress_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(model_ != nullptr);
      model_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(softwareversions_ != nullptr);
      softwareversions_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(nvramcontents_ != nullptr);
      nvramcontents_->Clear();
    }
  }
  rangeresolutionhz_ = 0;
  if (cached_has_bits & 0x00001f00u) {
    ::memset(&autotunevalue_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&staringmode_) -
        reinterpret_cast<char*>(&autotunevalue_)) + sizeof(staringmode_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ConfigurationData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .Colossus.Protobuf.RadarModel model = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_model(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string macaddress = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_macaddress();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Colossus.Protobuf.ConfigurationData.macaddress");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .Colossus.Protobuf.SoftwareVersions softwareversions = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_softwareversions(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .Colossus.Protobuf.NVRamContents nvramcontents = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_nvramcontents(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float rangeresolutionhz = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          _Internal::set_has_rangeresolutionhz(&has_bits);
          rangeresolutionhz_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional string moduleserialnumber = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_moduleserialnumber();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Colossus.Protobuf.ConfigurationData.moduleserialnumber");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 autotunevalue = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_autotunevalue(&has_bits);
          autotunevalue_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string radaruniqueid = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_radaruniqueid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Colossus.Protobuf.ConfigurationData.radaruniqueid");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 datawidth = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_datawidth(&has_bits);
          datawidth_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float rangeresolutionmetres = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 85)) {
          _Internal::set_has_rangeresolutionmetres(&has_bits);
          rangeresolutionmetres_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional .Colossus.Protobuf.RadarFeatureFlag radarfeatures = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::Colossus::Protobuf::RadarFeatureFlag_IsValid(val))) {
            _internal_set_radarfeatures(static_cast<::Colossus::Protobuf::RadarFeatureFlag>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(11, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional int32 staringmode = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_staringmode(&has_bits);
          staringmode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string onboardmacaddress = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          auto str = _internal_mutable_onboardmacaddress();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Colossus.Protobuf.ConfigurationData.onboardmacaddress");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ConfigurationData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Colossus.Protobuf.ConfigurationData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .Colossus.Protobuf.RadarModel model = 1;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::model(this), target, stream);
  }

  // optional string macaddress = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_macaddress().data(), static_cast<int>(this->_internal_macaddress().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Colossus.Protobuf.ConfigurationData.macaddress");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_macaddress(), target);
  }

  // optional .Colossus.Protobuf.SoftwareVersions softwareversions = 3;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::softwareversions(this), target, stream);
  }

  // optional .Colossus.Protobuf.NVRamContents nvramcontents = 4;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::nvramcontents(this), target, stream);
  }

  // optional float rangeresolutionhz = 5;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_rangeresolutionhz(), target);
  }

  // optional string moduleserialnumber = 6;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_moduleserialnumber().data(), static_cast<int>(this->_internal_moduleserialnumber().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Colossus.Protobuf.ConfigurationData.moduleserialnumber");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_moduleserialnumber(), target);
  }

  // optional int32 autotunevalue = 7;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_autotunevalue(), target);
  }

  // optional string radaruniqueid = 8;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_radaruniqueid().data(), static_cast<int>(this->_internal_radaruniqueid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Colossus.Protobuf.ConfigurationData.radaruniqueid");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_radaruniqueid(), target);
  }

  // optional int32 datawidth = 9;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_datawidth(), target);
  }

  // optional float rangeresolutionmetres = 10;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(10, this->_internal_rangeresolutionmetres(), target);
  }

  // optional .Colossus.Protobuf.RadarFeatureFlag radarfeatures = 11;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      11, this->_internal_radarfeatures(), target);
  }

  // optional int32 staringmode = 12;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(12, this->_internal_staringmode(), target);
  }

  // optional string onboardmacaddress = 13;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_onboardmacaddress().data(), static_cast<int>(this->_internal_onboardmacaddress().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Colossus.Protobuf.ConfigurationData.onboardmacaddress");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_onboardmacaddress(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Colossus.Protobuf.ConfigurationData)
  return target;
}

size_t ConfigurationData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Colossus.Protobuf.ConfigurationData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string macaddress = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_macaddress());
    }

    // optional string moduleserialnumber = 6;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_moduleserialnumber());
    }

    // optional string radaruniqueid = 8;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_radaruniqueid());
    }

    // optional string onboardmacaddress = 13;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_onboardmacaddress());
    }

    // optional .Colossus.Protobuf.RadarModel model = 1;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *model_);
    }

    // optional .Colossus.Protobuf.SoftwareVersions softwareversions = 3;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *softwareversions_);
    }

    // optional .Colossus.Protobuf.NVRamContents nvramcontents = 4;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *nvramcontents_);
    }

    // optional float rangeresolutionhz = 5;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 4;
    }

  }
  if (cached_has_bits & 0x00001f00u) {
    // optional int32 autotunevalue = 7;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_autotunevalue());
    }

    // optional int32 datawidth = 9;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_datawidth());
    }

    // optional float rangeresolutionmetres = 10;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 4;
    }

    // optional .Colossus.Protobuf.RadarFeatureFlag radarfeatures = 11;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_radarfeatures());
    }

    // optional int32 staringmode = 12;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_staringmode());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConfigurationData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Colossus.Protobuf.ConfigurationData)
  GOOGLE_DCHECK_NE(&from, this);
  const ConfigurationData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ConfigurationData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Colossus.Protobuf.ConfigurationData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Colossus.Protobuf.ConfigurationData)
    MergeFrom(*source);
  }
}

void ConfigurationData::MergeFrom(const ConfigurationData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Colossus.Protobuf.ConfigurationData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_macaddress(from._internal_macaddress());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_moduleserialnumber(from._internal_moduleserialnumber());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_radaruniqueid(from._internal_radaruniqueid());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_onboardmacaddress(from._internal_onboardmacaddress());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_model()->::Colossus::Protobuf::RadarModel::MergeFrom(from._internal_model());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_softwareversions()->::Colossus::Protobuf::SoftwareVersions::MergeFrom(from._internal_softwareversions());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_nvramcontents()->::Colossus::Protobuf::NVRamContents::MergeFrom(from._internal_nvramcontents());
    }
    if (cached_has_bits & 0x00000080u) {
      rangeresolutionhz_ = from.rangeresolutionhz_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00001f00u) {
    if (cached_has_bits & 0x00000100u) {
      autotunevalue_ = from.autotunevalue_;
    }
    if (cached_has_bits & 0x00000200u) {
      datawidth_ = from.datawidth_;
    }
    if (cached_has_bits & 0x00000400u) {
      rangeresolutionmetres_ = from.rangeresolutionmetres_;
    }
    if (cached_has_bits & 0x00000800u) {
      radarfeatures_ = from.radarfeatures_;
    }
    if (cached_has_bits & 0x00001000u) {
      staringmode_ = from.staringmode_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ConfigurationData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Colossus.Protobuf.ConfigurationData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConfigurationData::CopyFrom(const ConfigurationData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Colossus.Protobuf.ConfigurationData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfigurationData::IsInitialized() const {
  return true;
}

void ConfigurationData::InternalSwap(ConfigurationData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  macaddress_.Swap(&other->macaddress_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  moduleserialnumber_.Swap(&other->moduleserialnumber_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  radaruniqueid_.Swap(&other->radaruniqueid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  onboardmacaddress_.Swap(&other->onboardmacaddress_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ConfigurationData, staringmode_)
      + sizeof(ConfigurationData::staringmode_)
      - PROTOBUF_FIELD_OFFSET(ConfigurationData, model_)>(
          reinterpret_cast<char*>(&model_),
          reinterpret_cast<char*>(&other->model_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ConfigurationData::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace Protobuf
}  // namespace Colossus
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::Colossus::Protobuf::ConfigurationData* Arena::CreateMaybeMessage< ::Colossus::Protobuf::ConfigurationData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Colossus::Protobuf::ConfigurationData >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
