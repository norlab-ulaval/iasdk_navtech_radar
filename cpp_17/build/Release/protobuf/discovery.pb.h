// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: discovery.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_discovery_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_discovery_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "radarmodel.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_discovery_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_discovery_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_discovery_2eproto;
namespace Colossus {
namespace Protobuf {
class Discovery;
class DiscoveryDefaultTypeInternal;
extern DiscoveryDefaultTypeInternal _Discovery_default_instance_;
}  // namespace Protobuf
}  // namespace Colossus
PROTOBUF_NAMESPACE_OPEN
template<> ::Colossus::Protobuf::Discovery* Arena::CreateMaybeMessage<::Colossus::Protobuf::Discovery>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Colossus {
namespace Protobuf {

// ===================================================================

class Discovery PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Colossus.Protobuf.Discovery) */ {
 public:
  inline Discovery() : Discovery(nullptr) {};
  virtual ~Discovery();

  Discovery(const Discovery& from);
  Discovery(Discovery&& from) noexcept
    : Discovery() {
    *this = ::std::move(from);
  }

  inline Discovery& operator=(const Discovery& from) {
    CopyFrom(from);
    return *this;
  }
  inline Discovery& operator=(Discovery&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Discovery& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Discovery* internal_default_instance() {
    return reinterpret_cast<const Discovery*>(
               &_Discovery_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Discovery& a, Discovery& b) {
    a.Swap(&b);
  }
  inline void Swap(Discovery* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Discovery* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Discovery* New() const final {
    return CreateMaybeMessage<Discovery>(nullptr);
  }

  Discovery* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Discovery>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Discovery& from);
  void MergeFrom(const Discovery& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Discovery* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Colossus.Protobuf.Discovery";
  }
  protected:
  explicit Discovery(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_discovery_2eproto);
    return ::descriptor_table_discovery_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIpclientsFieldNumber = 3,
    kOnboardmacaddressFieldNumber = 8,
    kModelFieldNumber = 1,
    kMaxclientsallowedFieldNumber = 2,
    kRadarfeaturesFieldNumber = 4,
    kStaringModeFieldNumber = 5,
    kTransmitterEnabledFieldNumber = 6,
    kRangeResolutionMetresFieldNumber = 7,
  };
  // repeated string ipclients = 3;
  int ipclients_size() const;
  private:
  int _internal_ipclients_size() const;
  public:
  void clear_ipclients();
  const std::string& ipclients(int index) const;
  std::string* mutable_ipclients(int index);
  void set_ipclients(int index, const std::string& value);
  void set_ipclients(int index, std::string&& value);
  void set_ipclients(int index, const char* value);
  void set_ipclients(int index, const char* value, size_t size);
  std::string* add_ipclients();
  void add_ipclients(const std::string& value);
  void add_ipclients(std::string&& value);
  void add_ipclients(const char* value);
  void add_ipclients(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& ipclients() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_ipclients();
  private:
  const std::string& _internal_ipclients(int index) const;
  std::string* _internal_add_ipclients();
  public:

  // optional string onboardmacaddress = 8;
  bool has_onboardmacaddress() const;
  private:
  bool _internal_has_onboardmacaddress() const;
  public:
  void clear_onboardmacaddress();
  const std::string& onboardmacaddress() const;
  void set_onboardmacaddress(const std::string& value);
  void set_onboardmacaddress(std::string&& value);
  void set_onboardmacaddress(const char* value);
  void set_onboardmacaddress(const char* value, size_t size);
  std::string* mutable_onboardmacaddress();
  std::string* release_onboardmacaddress();
  void set_allocated_onboardmacaddress(std::string* onboardmacaddress);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_onboardmacaddress();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_onboardmacaddress(
      std::string* onboardmacaddress);
  private:
  const std::string& _internal_onboardmacaddress() const;
  void _internal_set_onboardmacaddress(const std::string& value);
  std::string* _internal_mutable_onboardmacaddress();
  public:

  // optional .Colossus.Protobuf.RadarModel model = 1;
  bool has_model() const;
  private:
  bool _internal_has_model() const;
  public:
  void clear_model();
  const ::Colossus::Protobuf::RadarModel& model() const;
  ::Colossus::Protobuf::RadarModel* release_model();
  ::Colossus::Protobuf::RadarModel* mutable_model();
  void set_allocated_model(::Colossus::Protobuf::RadarModel* model);
  private:
  const ::Colossus::Protobuf::RadarModel& _internal_model() const;
  ::Colossus::Protobuf::RadarModel* _internal_mutable_model();
  public:
  void unsafe_arena_set_allocated_model(
      ::Colossus::Protobuf::RadarModel* model);
  ::Colossus::Protobuf::RadarModel* unsafe_arena_release_model();

  // optional int32 maxclientsallowed = 2;
  bool has_maxclientsallowed() const;
  private:
  bool _internal_has_maxclientsallowed() const;
  public:
  void clear_maxclientsallowed();
  ::PROTOBUF_NAMESPACE_ID::int32 maxclientsallowed() const;
  void set_maxclientsallowed(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_maxclientsallowed() const;
  void _internal_set_maxclientsallowed(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional .Colossus.Protobuf.RadarFeatureFlag radarfeatures = 4;
  bool has_radarfeatures() const;
  private:
  bool _internal_has_radarfeatures() const;
  public:
  void clear_radarfeatures();
  ::Colossus::Protobuf::RadarFeatureFlag radarfeatures() const;
  void set_radarfeatures(::Colossus::Protobuf::RadarFeatureFlag value);
  private:
  ::Colossus::Protobuf::RadarFeatureFlag _internal_radarfeatures() const;
  void _internal_set_radarfeatures(::Colossus::Protobuf::RadarFeatureFlag value);
  public:

  // optional int32 StaringMode = 5;
  bool has_staringmode() const;
  private:
  bool _internal_has_staringmode() const;
  public:
  void clear_staringmode();
  ::PROTOBUF_NAMESPACE_ID::int32 staringmode() const;
  void set_staringmode(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_staringmode() const;
  void _internal_set_staringmode(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 TransmitterEnabled = 6;
  bool has_transmitterenabled() const;
  private:
  bool _internal_has_transmitterenabled() const;
  public:
  void clear_transmitterenabled();
  ::PROTOBUF_NAMESPACE_ID::int32 transmitterenabled() const;
  void set_transmitterenabled(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_transmitterenabled() const;
  void _internal_set_transmitterenabled(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional float RangeResolutionMetres = 7;
  bool has_rangeresolutionmetres() const;
  private:
  bool _internal_has_rangeresolutionmetres() const;
  public:
  void clear_rangeresolutionmetres();
  float rangeresolutionmetres() const;
  void set_rangeresolutionmetres(float value);
  private:
  float _internal_rangeresolutionmetres() const;
  void _internal_set_rangeresolutionmetres(float value);
  public:

  // @@protoc_insertion_point(class_scope:Colossus.Protobuf.Discovery)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> ipclients_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr onboardmacaddress_;
  ::Colossus::Protobuf::RadarModel* model_;
  ::PROTOBUF_NAMESPACE_ID::int32 maxclientsallowed_;
  int radarfeatures_;
  ::PROTOBUF_NAMESPACE_ID::int32 staringmode_;
  ::PROTOBUF_NAMESPACE_ID::int32 transmitterenabled_;
  float rangeresolutionmetres_;
  friend struct ::TableStruct_discovery_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Discovery

// optional .Colossus.Protobuf.RadarModel model = 1;
inline bool Discovery::_internal_has_model() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || model_ != nullptr);
  return value;
}
inline bool Discovery::has_model() const {
  return _internal_has_model();
}
inline const ::Colossus::Protobuf::RadarModel& Discovery::_internal_model() const {
  const ::Colossus::Protobuf::RadarModel* p = model_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Colossus::Protobuf::RadarModel*>(
      &::Colossus::Protobuf::_RadarModel_default_instance_);
}
inline const ::Colossus::Protobuf::RadarModel& Discovery::model() const {
  // @@protoc_insertion_point(field_get:Colossus.Protobuf.Discovery.model)
  return _internal_model();
}
inline void Discovery::unsafe_arena_set_allocated_model(
    ::Colossus::Protobuf::RadarModel* model) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(model_);
  }
  model_ = model;
  if (model) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Colossus.Protobuf.Discovery.model)
}
inline ::Colossus::Protobuf::RadarModel* Discovery::release_model() {
  auto temp = unsafe_arena_release_model();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Colossus::Protobuf::RadarModel* Discovery::unsafe_arena_release_model() {
  // @@protoc_insertion_point(field_release:Colossus.Protobuf.Discovery.model)
  _has_bits_[0] &= ~0x00000002u;
  ::Colossus::Protobuf::RadarModel* temp = model_;
  model_ = nullptr;
  return temp;
}
inline ::Colossus::Protobuf::RadarModel* Discovery::_internal_mutable_model() {
  _has_bits_[0] |= 0x00000002u;
  if (model_ == nullptr) {
    auto* p = CreateMaybeMessage<::Colossus::Protobuf::RadarModel>(GetArena());
    model_ = p;
  }
  return model_;
}
inline ::Colossus::Protobuf::RadarModel* Discovery::mutable_model() {
  // @@protoc_insertion_point(field_mutable:Colossus.Protobuf.Discovery.model)
  return _internal_mutable_model();
}
inline void Discovery::set_allocated_model(::Colossus::Protobuf::RadarModel* model) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(model_);
  }
  if (model) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(model)->GetArena();
    if (message_arena != submessage_arena) {
      model = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, model, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  model_ = model;
  // @@protoc_insertion_point(field_set_allocated:Colossus.Protobuf.Discovery.model)
}

// optional int32 maxclientsallowed = 2;
inline bool Discovery::_internal_has_maxclientsallowed() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Discovery::has_maxclientsallowed() const {
  return _internal_has_maxclientsallowed();
}
inline void Discovery::clear_maxclientsallowed() {
  maxclientsallowed_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Discovery::_internal_maxclientsallowed() const {
  return maxclientsallowed_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Discovery::maxclientsallowed() const {
  // @@protoc_insertion_point(field_get:Colossus.Protobuf.Discovery.maxclientsallowed)
  return _internal_maxclientsallowed();
}
inline void Discovery::_internal_set_maxclientsallowed(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  maxclientsallowed_ = value;
}
inline void Discovery::set_maxclientsallowed(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_maxclientsallowed(value);
  // @@protoc_insertion_point(field_set:Colossus.Protobuf.Discovery.maxclientsallowed)
}

// repeated string ipclients = 3;
inline int Discovery::_internal_ipclients_size() const {
  return ipclients_.size();
}
inline int Discovery::ipclients_size() const {
  return _internal_ipclients_size();
}
inline void Discovery::clear_ipclients() {
  ipclients_.Clear();
}
inline std::string* Discovery::add_ipclients() {
  // @@protoc_insertion_point(field_add_mutable:Colossus.Protobuf.Discovery.ipclients)
  return _internal_add_ipclients();
}
inline const std::string& Discovery::_internal_ipclients(int index) const {
  return ipclients_.Get(index);
}
inline const std::string& Discovery::ipclients(int index) const {
  // @@protoc_insertion_point(field_get:Colossus.Protobuf.Discovery.ipclients)
  return _internal_ipclients(index);
}
inline std::string* Discovery::mutable_ipclients(int index) {
  // @@protoc_insertion_point(field_mutable:Colossus.Protobuf.Discovery.ipclients)
  return ipclients_.Mutable(index);
}
inline void Discovery::set_ipclients(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:Colossus.Protobuf.Discovery.ipclients)
  ipclients_.Mutable(index)->assign(value);
}
inline void Discovery::set_ipclients(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:Colossus.Protobuf.Discovery.ipclients)
  ipclients_.Mutable(index)->assign(std::move(value));
}
inline void Discovery::set_ipclients(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  ipclients_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Colossus.Protobuf.Discovery.ipclients)
}
inline void Discovery::set_ipclients(int index, const char* value, size_t size) {
  ipclients_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Colossus.Protobuf.Discovery.ipclients)
}
inline std::string* Discovery::_internal_add_ipclients() {
  return ipclients_.Add();
}
inline void Discovery::add_ipclients(const std::string& value) {
  ipclients_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Colossus.Protobuf.Discovery.ipclients)
}
inline void Discovery::add_ipclients(std::string&& value) {
  ipclients_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:Colossus.Protobuf.Discovery.ipclients)
}
inline void Discovery::add_ipclients(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  ipclients_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Colossus.Protobuf.Discovery.ipclients)
}
inline void Discovery::add_ipclients(const char* value, size_t size) {
  ipclients_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Colossus.Protobuf.Discovery.ipclients)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Discovery::ipclients() const {
  // @@protoc_insertion_point(field_list:Colossus.Protobuf.Discovery.ipclients)
  return ipclients_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Discovery::mutable_ipclients() {
  // @@protoc_insertion_point(field_mutable_list:Colossus.Protobuf.Discovery.ipclients)
  return &ipclients_;
}

// optional .Colossus.Protobuf.RadarFeatureFlag radarfeatures = 4;
inline bool Discovery::_internal_has_radarfeatures() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Discovery::has_radarfeatures() const {
  return _internal_has_radarfeatures();
}
inline void Discovery::clear_radarfeatures() {
  radarfeatures_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::Colossus::Protobuf::RadarFeatureFlag Discovery::_internal_radarfeatures() const {
  return static_cast< ::Colossus::Protobuf::RadarFeatureFlag >(radarfeatures_);
}
inline ::Colossus::Protobuf::RadarFeatureFlag Discovery::radarfeatures() const {
  // @@protoc_insertion_point(field_get:Colossus.Protobuf.Discovery.radarfeatures)
  return _internal_radarfeatures();
}
inline void Discovery::_internal_set_radarfeatures(::Colossus::Protobuf::RadarFeatureFlag value) {
  assert(::Colossus::Protobuf::RadarFeatureFlag_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  radarfeatures_ = value;
}
inline void Discovery::set_radarfeatures(::Colossus::Protobuf::RadarFeatureFlag value) {
  _internal_set_radarfeatures(value);
  // @@protoc_insertion_point(field_set:Colossus.Protobuf.Discovery.radarfeatures)
}

// optional int32 StaringMode = 5;
inline bool Discovery::_internal_has_staringmode() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Discovery::has_staringmode() const {
  return _internal_has_staringmode();
}
inline void Discovery::clear_staringmode() {
  staringmode_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Discovery::_internal_staringmode() const {
  return staringmode_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Discovery::staringmode() const {
  // @@protoc_insertion_point(field_get:Colossus.Protobuf.Discovery.StaringMode)
  return _internal_staringmode();
}
inline void Discovery::_internal_set_staringmode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  staringmode_ = value;
}
inline void Discovery::set_staringmode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_staringmode(value);
  // @@protoc_insertion_point(field_set:Colossus.Protobuf.Discovery.StaringMode)
}

// optional int32 TransmitterEnabled = 6;
inline bool Discovery::_internal_has_transmitterenabled() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool Discovery::has_transmitterenabled() const {
  return _internal_has_transmitterenabled();
}
inline void Discovery::clear_transmitterenabled() {
  transmitterenabled_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Discovery::_internal_transmitterenabled() const {
  return transmitterenabled_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Discovery::transmitterenabled() const {
  // @@protoc_insertion_point(field_get:Colossus.Protobuf.Discovery.TransmitterEnabled)
  return _internal_transmitterenabled();
}
inline void Discovery::_internal_set_transmitterenabled(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  transmitterenabled_ = value;
}
inline void Discovery::set_transmitterenabled(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_transmitterenabled(value);
  // @@protoc_insertion_point(field_set:Colossus.Protobuf.Discovery.TransmitterEnabled)
}

// optional float RangeResolutionMetres = 7;
inline bool Discovery::_internal_has_rangeresolutionmetres() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool Discovery::has_rangeresolutionmetres() const {
  return _internal_has_rangeresolutionmetres();
}
inline void Discovery::clear_rangeresolutionmetres() {
  rangeresolutionmetres_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline float Discovery::_internal_rangeresolutionmetres() const {
  return rangeresolutionmetres_;
}
inline float Discovery::rangeresolutionmetres() const {
  // @@protoc_insertion_point(field_get:Colossus.Protobuf.Discovery.RangeResolutionMetres)
  return _internal_rangeresolutionmetres();
}
inline void Discovery::_internal_set_rangeresolutionmetres(float value) {
  _has_bits_[0] |= 0x00000040u;
  rangeresolutionmetres_ = value;
}
inline void Discovery::set_rangeresolutionmetres(float value) {
  _internal_set_rangeresolutionmetres(value);
  // @@protoc_insertion_point(field_set:Colossus.Protobuf.Discovery.RangeResolutionMetres)
}

// optional string onboardmacaddress = 8;
inline bool Discovery::_internal_has_onboardmacaddress() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Discovery::has_onboardmacaddress() const {
  return _internal_has_onboardmacaddress();
}
inline void Discovery::clear_onboardmacaddress() {
  onboardmacaddress_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Discovery::onboardmacaddress() const {
  // @@protoc_insertion_point(field_get:Colossus.Protobuf.Discovery.onboardmacaddress)
  return _internal_onboardmacaddress();
}
inline void Discovery::set_onboardmacaddress(const std::string& value) {
  _internal_set_onboardmacaddress(value);
  // @@protoc_insertion_point(field_set:Colossus.Protobuf.Discovery.onboardmacaddress)
}
inline std::string* Discovery::mutable_onboardmacaddress() {
  // @@protoc_insertion_point(field_mutable:Colossus.Protobuf.Discovery.onboardmacaddress)
  return _internal_mutable_onboardmacaddress();
}
inline const std::string& Discovery::_internal_onboardmacaddress() const {
  return onboardmacaddress_.Get();
}
inline void Discovery::_internal_set_onboardmacaddress(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  onboardmacaddress_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Discovery::set_onboardmacaddress(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  onboardmacaddress_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Colossus.Protobuf.Discovery.onboardmacaddress)
}
inline void Discovery::set_onboardmacaddress(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  onboardmacaddress_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Colossus.Protobuf.Discovery.onboardmacaddress)
}
inline void Discovery::set_onboardmacaddress(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  onboardmacaddress_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Colossus.Protobuf.Discovery.onboardmacaddress)
}
inline std::string* Discovery::_internal_mutable_onboardmacaddress() {
  _has_bits_[0] |= 0x00000001u;
  return onboardmacaddress_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Discovery::release_onboardmacaddress() {
  // @@protoc_insertion_point(field_release:Colossus.Protobuf.Discovery.onboardmacaddress)
  if (!_internal_has_onboardmacaddress()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return onboardmacaddress_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Discovery::set_allocated_onboardmacaddress(std::string* onboardmacaddress) {
  if (onboardmacaddress != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  onboardmacaddress_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), onboardmacaddress,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Colossus.Protobuf.Discovery.onboardmacaddress)
}
inline std::string* Discovery::unsafe_arena_release_onboardmacaddress() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Colossus.Protobuf.Discovery.onboardmacaddress)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return onboardmacaddress_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Discovery::unsafe_arena_set_allocated_onboardmacaddress(
    std::string* onboardmacaddress) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (onboardmacaddress != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  onboardmacaddress_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      onboardmacaddress, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Colossus.Protobuf.Discovery.onboardmacaddress)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace Protobuf
}  // namespace Colossus

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_discovery_2eproto
