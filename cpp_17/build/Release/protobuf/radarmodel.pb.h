// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: radarmodel.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_radarmodel_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_radarmodel_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_radarmodel_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_radarmodel_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_radarmodel_2eproto;
namespace Colossus {
namespace Protobuf {
class RadarModel;
class RadarModelDefaultTypeInternal;
extern RadarModelDefaultTypeInternal _RadarModel_default_instance_;
}  // namespace Protobuf
}  // namespace Colossus
PROTOBUF_NAMESPACE_OPEN
template<> ::Colossus::Protobuf::RadarModel* Arena::CreateMaybeMessage<::Colossus::Protobuf::RadarModel>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Colossus {
namespace Protobuf {

enum RadarFeatureFlag : int {
  NONE = 0,
  AUTOTUNE = 1,
  SECONDARYPROCESSUNGMODULEPRESENT = 2,
  NONCONTOUREDDATA = 4
};
bool RadarFeatureFlag_IsValid(int value);
constexpr RadarFeatureFlag RadarFeatureFlag_MIN = NONE;
constexpr RadarFeatureFlag RadarFeatureFlag_MAX = NONCONTOUREDDATA;
constexpr int RadarFeatureFlag_ARRAYSIZE = RadarFeatureFlag_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RadarFeatureFlag_descriptor();
template<typename T>
inline const std::string& RadarFeatureFlag_Name(T enum_t_value) {
  static_assert(::std::is_same<T, RadarFeatureFlag>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function RadarFeatureFlag_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    RadarFeatureFlag_descriptor(), enum_t_value);
}
inline bool RadarFeatureFlag_Parse(
    const std::string& name, RadarFeatureFlag* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<RadarFeatureFlag>(
    RadarFeatureFlag_descriptor(), name, value);
}
// ===================================================================

class RadarModel PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Colossus.Protobuf.RadarModel) */ {
 public:
  inline RadarModel() : RadarModel(nullptr) {};
  virtual ~RadarModel();

  RadarModel(const RadarModel& from);
  RadarModel(RadarModel&& from) noexcept
    : RadarModel() {
    *this = ::std::move(from);
  }

  inline RadarModel& operator=(const RadarModel& from) {
    CopyFrom(from);
    return *this;
  }
  inline RadarModel& operator=(RadarModel&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RadarModel& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RadarModel* internal_default_instance() {
    return reinterpret_cast<const RadarModel*>(
               &_RadarModel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(RadarModel& a, RadarModel& b) {
    a.Swap(&b);
  }
  inline void Swap(RadarModel* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RadarModel* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RadarModel* New() const final {
    return CreateMaybeMessage<RadarModel>(nullptr);
  }

  RadarModel* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RadarModel>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RadarModel& from);
  void MergeFrom(const RadarModel& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RadarModel* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Colossus.Protobuf.RadarModel";
  }
  protected:
  explicit RadarModel(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_radarmodel_2eproto);
    return ::descriptor_table_radarmodel_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kUniqueidFieldNumber = 3,
    kProfileidFieldNumber = 5,
    kIdFieldNumber = 1,
    kRangeinmetresFieldNumber = 4,
  };
  // optional string name = 2;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional string uniqueid = 3;
  bool has_uniqueid() const;
  private:
  bool _internal_has_uniqueid() const;
  public:
  void clear_uniqueid();
  const std::string& uniqueid() const;
  void set_uniqueid(const std::string& value);
  void set_uniqueid(std::string&& value);
  void set_uniqueid(const char* value);
  void set_uniqueid(const char* value, size_t size);
  std::string* mutable_uniqueid();
  std::string* release_uniqueid();
  void set_allocated_uniqueid(std::string* uniqueid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_uniqueid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_uniqueid(
      std::string* uniqueid);
  private:
  const std::string& _internal_uniqueid() const;
  void _internal_set_uniqueid(const std::string& value);
  std::string* _internal_mutable_uniqueid();
  public:

  // optional string profileid = 5;
  bool has_profileid() const;
  private:
  bool _internal_has_profileid() const;
  public:
  void clear_profileid();
  const std::string& profileid() const;
  void set_profileid(const std::string& value);
  void set_profileid(std::string&& value);
  void set_profileid(const char* value);
  void set_profileid(const char* value, size_t size);
  std::string* mutable_profileid();
  std::string* release_profileid();
  void set_allocated_profileid(std::string* profileid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_profileid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_profileid(
      std::string* profileid);
  private:
  const std::string& _internal_profileid() const;
  void _internal_set_profileid(const std::string& value);
  std::string* _internal_mutable_profileid();
  public:

  // optional uint32 id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional float rangeinmetres = 4;
  bool has_rangeinmetres() const;
  private:
  bool _internal_has_rangeinmetres() const;
  public:
  void clear_rangeinmetres();
  float rangeinmetres() const;
  void set_rangeinmetres(float value);
  private:
  float _internal_rangeinmetres() const;
  void _internal_set_rangeinmetres(float value);
  public:

  // @@protoc_insertion_point(class_scope:Colossus.Protobuf.RadarModel)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uniqueid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr profileid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  float rangeinmetres_;
  friend struct ::TableStruct_radarmodel_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RadarModel

// optional uint32 id = 1;
inline bool RadarModel::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool RadarModel::has_id() const {
  return _internal_has_id();
}
inline void RadarModel::clear_id() {
  id_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RadarModel::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RadarModel::id() const {
  // @@protoc_insertion_point(field_get:Colossus.Protobuf.RadarModel.id)
  return _internal_id();
}
inline void RadarModel::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  id_ = value;
}
inline void RadarModel::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:Colossus.Protobuf.RadarModel.id)
}

// optional string name = 2;
inline bool RadarModel::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool RadarModel::has_name() const {
  return _internal_has_name();
}
inline void RadarModel::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& RadarModel::name() const {
  // @@protoc_insertion_point(field_get:Colossus.Protobuf.RadarModel.name)
  return _internal_name();
}
inline void RadarModel::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:Colossus.Protobuf.RadarModel.name)
}
inline std::string* RadarModel::mutable_name() {
  // @@protoc_insertion_point(field_mutable:Colossus.Protobuf.RadarModel.name)
  return _internal_mutable_name();
}
inline const std::string& RadarModel::_internal_name() const {
  return name_.Get();
}
inline void RadarModel::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RadarModel::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Colossus.Protobuf.RadarModel.name)
}
inline void RadarModel::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Colossus.Protobuf.RadarModel.name)
}
inline void RadarModel::set_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Colossus.Protobuf.RadarModel.name)
}
inline std::string* RadarModel::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RadarModel::release_name() {
  // @@protoc_insertion_point(field_release:Colossus.Protobuf.RadarModel.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RadarModel::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Colossus.Protobuf.RadarModel.name)
}
inline std::string* RadarModel::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Colossus.Protobuf.RadarModel.name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void RadarModel::unsafe_arena_set_allocated_name(
    std::string* name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Colossus.Protobuf.RadarModel.name)
}

// optional string uniqueid = 3;
inline bool RadarModel::_internal_has_uniqueid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool RadarModel::has_uniqueid() const {
  return _internal_has_uniqueid();
}
inline void RadarModel::clear_uniqueid() {
  uniqueid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& RadarModel::uniqueid() const {
  // @@protoc_insertion_point(field_get:Colossus.Protobuf.RadarModel.uniqueid)
  return _internal_uniqueid();
}
inline void RadarModel::set_uniqueid(const std::string& value) {
  _internal_set_uniqueid(value);
  // @@protoc_insertion_point(field_set:Colossus.Protobuf.RadarModel.uniqueid)
}
inline std::string* RadarModel::mutable_uniqueid() {
  // @@protoc_insertion_point(field_mutable:Colossus.Protobuf.RadarModel.uniqueid)
  return _internal_mutable_uniqueid();
}
inline const std::string& RadarModel::_internal_uniqueid() const {
  return uniqueid_.Get();
}
inline void RadarModel::_internal_set_uniqueid(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  uniqueid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RadarModel::set_uniqueid(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  uniqueid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Colossus.Protobuf.RadarModel.uniqueid)
}
inline void RadarModel::set_uniqueid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  uniqueid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Colossus.Protobuf.RadarModel.uniqueid)
}
inline void RadarModel::set_uniqueid(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  uniqueid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Colossus.Protobuf.RadarModel.uniqueid)
}
inline std::string* RadarModel::_internal_mutable_uniqueid() {
  _has_bits_[0] |= 0x00000002u;
  return uniqueid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RadarModel::release_uniqueid() {
  // @@protoc_insertion_point(field_release:Colossus.Protobuf.RadarModel.uniqueid)
  if (!_internal_has_uniqueid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return uniqueid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RadarModel::set_allocated_uniqueid(std::string* uniqueid) {
  if (uniqueid != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  uniqueid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), uniqueid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Colossus.Protobuf.RadarModel.uniqueid)
}
inline std::string* RadarModel::unsafe_arena_release_uniqueid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Colossus.Protobuf.RadarModel.uniqueid)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000002u;
  return uniqueid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void RadarModel::unsafe_arena_set_allocated_uniqueid(
    std::string* uniqueid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (uniqueid != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  uniqueid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      uniqueid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Colossus.Protobuf.RadarModel.uniqueid)
}

// optional float rangeinmetres = 4;
inline bool RadarModel::_internal_has_rangeinmetres() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool RadarModel::has_rangeinmetres() const {
  return _internal_has_rangeinmetres();
}
inline void RadarModel::clear_rangeinmetres() {
  rangeinmetres_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline float RadarModel::_internal_rangeinmetres() const {
  return rangeinmetres_;
}
inline float RadarModel::rangeinmetres() const {
  // @@protoc_insertion_point(field_get:Colossus.Protobuf.RadarModel.rangeinmetres)
  return _internal_rangeinmetres();
}
inline void RadarModel::_internal_set_rangeinmetres(float value) {
  _has_bits_[0] |= 0x00000010u;
  rangeinmetres_ = value;
}
inline void RadarModel::set_rangeinmetres(float value) {
  _internal_set_rangeinmetres(value);
  // @@protoc_insertion_point(field_set:Colossus.Protobuf.RadarModel.rangeinmetres)
}

// optional string profileid = 5;
inline bool RadarModel::_internal_has_profileid() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool RadarModel::has_profileid() const {
  return _internal_has_profileid();
}
inline void RadarModel::clear_profileid() {
  profileid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& RadarModel::profileid() const {
  // @@protoc_insertion_point(field_get:Colossus.Protobuf.RadarModel.profileid)
  return _internal_profileid();
}
inline void RadarModel::set_profileid(const std::string& value) {
  _internal_set_profileid(value);
  // @@protoc_insertion_point(field_set:Colossus.Protobuf.RadarModel.profileid)
}
inline std::string* RadarModel::mutable_profileid() {
  // @@protoc_insertion_point(field_mutable:Colossus.Protobuf.RadarModel.profileid)
  return _internal_mutable_profileid();
}
inline const std::string& RadarModel::_internal_profileid() const {
  return profileid_.Get();
}
inline void RadarModel::_internal_set_profileid(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  profileid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RadarModel::set_profileid(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  profileid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Colossus.Protobuf.RadarModel.profileid)
}
inline void RadarModel::set_profileid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  profileid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Colossus.Protobuf.RadarModel.profileid)
}
inline void RadarModel::set_profileid(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  profileid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Colossus.Protobuf.RadarModel.profileid)
}
inline std::string* RadarModel::_internal_mutable_profileid() {
  _has_bits_[0] |= 0x00000004u;
  return profileid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RadarModel::release_profileid() {
  // @@protoc_insertion_point(field_release:Colossus.Protobuf.RadarModel.profileid)
  if (!_internal_has_profileid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return profileid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RadarModel::set_allocated_profileid(std::string* profileid) {
  if (profileid != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  profileid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), profileid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Colossus.Protobuf.RadarModel.profileid)
}
inline std::string* RadarModel::unsafe_arena_release_profileid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Colossus.Protobuf.RadarModel.profileid)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000004u;
  return profileid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void RadarModel::unsafe_arena_set_allocated_profileid(
    std::string* profileid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (profileid != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  profileid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      profileid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Colossus.Protobuf.RadarModel.profileid)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace Protobuf
}  // namespace Colossus

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::Colossus::Protobuf::RadarFeatureFlag> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Colossus::Protobuf::RadarFeatureFlag>() {
  return ::Colossus::Protobuf::RadarFeatureFlag_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_radarmodel_2eproto
