// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: softwareversions.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_softwareversions_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_softwareversions_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_softwareversions_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_softwareversions_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_softwareversions_2eproto;
namespace Colossus {
namespace Protobuf {
class SoftwareVersions;
class SoftwareVersionsDefaultTypeInternal;
extern SoftwareVersionsDefaultTypeInternal _SoftwareVersions_default_instance_;
}  // namespace Protobuf
}  // namespace Colossus
PROTOBUF_NAMESPACE_OPEN
template<> ::Colossus::Protobuf::SoftwareVersions* Arena::CreateMaybeMessage<::Colossus::Protobuf::SoftwareVersions>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Colossus {
namespace Protobuf {

// ===================================================================

class SoftwareVersions PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Colossus.Protobuf.SoftwareVersions) */ {
 public:
  inline SoftwareVersions() : SoftwareVersions(nullptr) {};
  virtual ~SoftwareVersions();

  SoftwareVersions(const SoftwareVersions& from);
  SoftwareVersions(SoftwareVersions&& from) noexcept
    : SoftwareVersions() {
    *this = ::std::move(from);
  }

  inline SoftwareVersions& operator=(const SoftwareVersions& from) {
    CopyFrom(from);
    return *this;
  }
  inline SoftwareVersions& operator=(SoftwareVersions&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SoftwareVersions& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SoftwareVersions* internal_default_instance() {
    return reinterpret_cast<const SoftwareVersions*>(
               &_SoftwareVersions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SoftwareVersions& a, SoftwareVersions& b) {
    a.Swap(&b);
  }
  inline void Swap(SoftwareVersions* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SoftwareVersions* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SoftwareVersions* New() const final {
    return CreateMaybeMessage<SoftwareVersions>(nullptr);
  }

  SoftwareVersions* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SoftwareVersions>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SoftwareVersions& from);
  void MergeFrom(const SoftwareVersions& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SoftwareVersions* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Colossus.Protobuf.SoftwareVersions";
  }
  protected:
  explicit SoftwareVersions(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_softwareversions_2eproto);
    return ::descriptor_table_softwareversions_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOsFieldNumber = 1,
    kFirmwareFieldNumber = 2,
    kUiFieldNumber = 3,
    kOnboardosFieldNumber = 4,
    kOnboardfirmwareFieldNumber = 5,
    kRadarfpgaFieldNumber = 6,
    kAnalogueboardfpgaFieldNumber = 7,
    kDigitalboardfpgaFieldNumber = 8,
  };
  // optional string os = 1;
  bool has_os() const;
  private:
  bool _internal_has_os() const;
  public:
  void clear_os();
  const std::string& os() const;
  void set_os(const std::string& value);
  void set_os(std::string&& value);
  void set_os(const char* value);
  void set_os(const char* value, size_t size);
  std::string* mutable_os();
  std::string* release_os();
  void set_allocated_os(std::string* os);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_os();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_os(
      std::string* os);
  private:
  const std::string& _internal_os() const;
  void _internal_set_os(const std::string& value);
  std::string* _internal_mutable_os();
  public:

  // optional string firmware = 2;
  bool has_firmware() const;
  private:
  bool _internal_has_firmware() const;
  public:
  void clear_firmware();
  const std::string& firmware() const;
  void set_firmware(const std::string& value);
  void set_firmware(std::string&& value);
  void set_firmware(const char* value);
  void set_firmware(const char* value, size_t size);
  std::string* mutable_firmware();
  std::string* release_firmware();
  void set_allocated_firmware(std::string* firmware);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_firmware();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_firmware(
      std::string* firmware);
  private:
  const std::string& _internal_firmware() const;
  void _internal_set_firmware(const std::string& value);
  std::string* _internal_mutable_firmware();
  public:

  // optional string ui = 3;
  bool has_ui() const;
  private:
  bool _internal_has_ui() const;
  public:
  void clear_ui();
  const std::string& ui() const;
  void set_ui(const std::string& value);
  void set_ui(std::string&& value);
  void set_ui(const char* value);
  void set_ui(const char* value, size_t size);
  std::string* mutable_ui();
  std::string* release_ui();
  void set_allocated_ui(std::string* ui);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_ui();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_ui(
      std::string* ui);
  private:
  const std::string& _internal_ui() const;
  void _internal_set_ui(const std::string& value);
  std::string* _internal_mutable_ui();
  public:

  // optional string onboardos = 4;
  bool has_onboardos() const;
  private:
  bool _internal_has_onboardos() const;
  public:
  void clear_onboardos();
  const std::string& onboardos() const;
  void set_onboardos(const std::string& value);
  void set_onboardos(std::string&& value);
  void set_onboardos(const char* value);
  void set_onboardos(const char* value, size_t size);
  std::string* mutable_onboardos();
  std::string* release_onboardos();
  void set_allocated_onboardos(std::string* onboardos);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_onboardos();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_onboardos(
      std::string* onboardos);
  private:
  const std::string& _internal_onboardos() const;
  void _internal_set_onboardos(const std::string& value);
  std::string* _internal_mutable_onboardos();
  public:

  // optional string onboardfirmware = 5;
  bool has_onboardfirmware() const;
  private:
  bool _internal_has_onboardfirmware() const;
  public:
  void clear_onboardfirmware();
  const std::string& onboardfirmware() const;
  void set_onboardfirmware(const std::string& value);
  void set_onboardfirmware(std::string&& value);
  void set_onboardfirmware(const char* value);
  void set_onboardfirmware(const char* value, size_t size);
  std::string* mutable_onboardfirmware();
  std::string* release_onboardfirmware();
  void set_allocated_onboardfirmware(std::string* onboardfirmware);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_onboardfirmware();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_onboardfirmware(
      std::string* onboardfirmware);
  private:
  const std::string& _internal_onboardfirmware() const;
  void _internal_set_onboardfirmware(const std::string& value);
  std::string* _internal_mutable_onboardfirmware();
  public:

  // optional string radarfpga = 6;
  bool has_radarfpga() const;
  private:
  bool _internal_has_radarfpga() const;
  public:
  void clear_radarfpga();
  const std::string& radarfpga() const;
  void set_radarfpga(const std::string& value);
  void set_radarfpga(std::string&& value);
  void set_radarfpga(const char* value);
  void set_radarfpga(const char* value, size_t size);
  std::string* mutable_radarfpga();
  std::string* release_radarfpga();
  void set_allocated_radarfpga(std::string* radarfpga);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_radarfpga();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_radarfpga(
      std::string* radarfpga);
  private:
  const std::string& _internal_radarfpga() const;
  void _internal_set_radarfpga(const std::string& value);
  std::string* _internal_mutable_radarfpga();
  public:

  // optional string analogueboardfpga = 7;
  bool has_analogueboardfpga() const;
  private:
  bool _internal_has_analogueboardfpga() const;
  public:
  void clear_analogueboardfpga();
  const std::string& analogueboardfpga() const;
  void set_analogueboardfpga(const std::string& value);
  void set_analogueboardfpga(std::string&& value);
  void set_analogueboardfpga(const char* value);
  void set_analogueboardfpga(const char* value, size_t size);
  std::string* mutable_analogueboardfpga();
  std::string* release_analogueboardfpga();
  void set_allocated_analogueboardfpga(std::string* analogueboardfpga);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_analogueboardfpga();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_analogueboardfpga(
      std::string* analogueboardfpga);
  private:
  const std::string& _internal_analogueboardfpga() const;
  void _internal_set_analogueboardfpga(const std::string& value);
  std::string* _internal_mutable_analogueboardfpga();
  public:

  // optional string digitalboardfpga = 8;
  bool has_digitalboardfpga() const;
  private:
  bool _internal_has_digitalboardfpga() const;
  public:
  void clear_digitalboardfpga();
  const std::string& digitalboardfpga() const;
  void set_digitalboardfpga(const std::string& value);
  void set_digitalboardfpga(std::string&& value);
  void set_digitalboardfpga(const char* value);
  void set_digitalboardfpga(const char* value, size_t size);
  std::string* mutable_digitalboardfpga();
  std::string* release_digitalboardfpga();
  void set_allocated_digitalboardfpga(std::string* digitalboardfpga);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_digitalboardfpga();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_digitalboardfpga(
      std::string* digitalboardfpga);
  private:
  const std::string& _internal_digitalboardfpga() const;
  void _internal_set_digitalboardfpga(const std::string& value);
  std::string* _internal_mutable_digitalboardfpga();
  public:

  // @@protoc_insertion_point(class_scope:Colossus.Protobuf.SoftwareVersions)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr os_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr firmware_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ui_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr onboardos_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr onboardfirmware_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr radarfpga_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr analogueboardfpga_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr digitalboardfpga_;
  friend struct ::TableStruct_softwareversions_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SoftwareVersions

// optional string os = 1;
inline bool SoftwareVersions::_internal_has_os() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SoftwareVersions::has_os() const {
  return _internal_has_os();
}
inline void SoftwareVersions::clear_os() {
  os_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SoftwareVersions::os() const {
  // @@protoc_insertion_point(field_get:Colossus.Protobuf.SoftwareVersions.os)
  return _internal_os();
}
inline void SoftwareVersions::set_os(const std::string& value) {
  _internal_set_os(value);
  // @@protoc_insertion_point(field_set:Colossus.Protobuf.SoftwareVersions.os)
}
inline std::string* SoftwareVersions::mutable_os() {
  // @@protoc_insertion_point(field_mutable:Colossus.Protobuf.SoftwareVersions.os)
  return _internal_mutable_os();
}
inline const std::string& SoftwareVersions::_internal_os() const {
  return os_.Get();
}
inline void SoftwareVersions::_internal_set_os(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  os_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SoftwareVersions::set_os(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  os_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Colossus.Protobuf.SoftwareVersions.os)
}
inline void SoftwareVersions::set_os(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  os_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Colossus.Protobuf.SoftwareVersions.os)
}
inline void SoftwareVersions::set_os(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  os_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Colossus.Protobuf.SoftwareVersions.os)
}
inline std::string* SoftwareVersions::_internal_mutable_os() {
  _has_bits_[0] |= 0x00000001u;
  return os_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SoftwareVersions::release_os() {
  // @@protoc_insertion_point(field_release:Colossus.Protobuf.SoftwareVersions.os)
  if (!_internal_has_os()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return os_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SoftwareVersions::set_allocated_os(std::string* os) {
  if (os != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  os_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), os,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Colossus.Protobuf.SoftwareVersions.os)
}
inline std::string* SoftwareVersions::unsafe_arena_release_os() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Colossus.Protobuf.SoftwareVersions.os)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return os_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SoftwareVersions::unsafe_arena_set_allocated_os(
    std::string* os) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (os != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  os_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      os, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Colossus.Protobuf.SoftwareVersions.os)
}

// optional string firmware = 2;
inline bool SoftwareVersions::_internal_has_firmware() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SoftwareVersions::has_firmware() const {
  return _internal_has_firmware();
}
inline void SoftwareVersions::clear_firmware() {
  firmware_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& SoftwareVersions::firmware() const {
  // @@protoc_insertion_point(field_get:Colossus.Protobuf.SoftwareVersions.firmware)
  return _internal_firmware();
}
inline void SoftwareVersions::set_firmware(const std::string& value) {
  _internal_set_firmware(value);
  // @@protoc_insertion_point(field_set:Colossus.Protobuf.SoftwareVersions.firmware)
}
inline std::string* SoftwareVersions::mutable_firmware() {
  // @@protoc_insertion_point(field_mutable:Colossus.Protobuf.SoftwareVersions.firmware)
  return _internal_mutable_firmware();
}
inline const std::string& SoftwareVersions::_internal_firmware() const {
  return firmware_.Get();
}
inline void SoftwareVersions::_internal_set_firmware(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  firmware_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SoftwareVersions::set_firmware(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  firmware_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Colossus.Protobuf.SoftwareVersions.firmware)
}
inline void SoftwareVersions::set_firmware(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  firmware_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Colossus.Protobuf.SoftwareVersions.firmware)
}
inline void SoftwareVersions::set_firmware(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  firmware_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Colossus.Protobuf.SoftwareVersions.firmware)
}
inline std::string* SoftwareVersions::_internal_mutable_firmware() {
  _has_bits_[0] |= 0x00000002u;
  return firmware_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SoftwareVersions::release_firmware() {
  // @@protoc_insertion_point(field_release:Colossus.Protobuf.SoftwareVersions.firmware)
  if (!_internal_has_firmware()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return firmware_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SoftwareVersions::set_allocated_firmware(std::string* firmware) {
  if (firmware != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  firmware_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), firmware,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Colossus.Protobuf.SoftwareVersions.firmware)
}
inline std::string* SoftwareVersions::unsafe_arena_release_firmware() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Colossus.Protobuf.SoftwareVersions.firmware)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000002u;
  return firmware_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SoftwareVersions::unsafe_arena_set_allocated_firmware(
    std::string* firmware) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (firmware != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  firmware_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      firmware, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Colossus.Protobuf.SoftwareVersions.firmware)
}

// optional string ui = 3;
inline bool SoftwareVersions::_internal_has_ui() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool SoftwareVersions::has_ui() const {
  return _internal_has_ui();
}
inline void SoftwareVersions::clear_ui() {
  ui_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& SoftwareVersions::ui() const {
  // @@protoc_insertion_point(field_get:Colossus.Protobuf.SoftwareVersions.ui)
  return _internal_ui();
}
inline void SoftwareVersions::set_ui(const std::string& value) {
  _internal_set_ui(value);
  // @@protoc_insertion_point(field_set:Colossus.Protobuf.SoftwareVersions.ui)
}
inline std::string* SoftwareVersions::mutable_ui() {
  // @@protoc_insertion_point(field_mutable:Colossus.Protobuf.SoftwareVersions.ui)
  return _internal_mutable_ui();
}
inline const std::string& SoftwareVersions::_internal_ui() const {
  return ui_.Get();
}
inline void SoftwareVersions::_internal_set_ui(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  ui_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SoftwareVersions::set_ui(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  ui_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Colossus.Protobuf.SoftwareVersions.ui)
}
inline void SoftwareVersions::set_ui(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  ui_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Colossus.Protobuf.SoftwareVersions.ui)
}
inline void SoftwareVersions::set_ui(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  ui_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Colossus.Protobuf.SoftwareVersions.ui)
}
inline std::string* SoftwareVersions::_internal_mutable_ui() {
  _has_bits_[0] |= 0x00000004u;
  return ui_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SoftwareVersions::release_ui() {
  // @@protoc_insertion_point(field_release:Colossus.Protobuf.SoftwareVersions.ui)
  if (!_internal_has_ui()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return ui_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SoftwareVersions::set_allocated_ui(std::string* ui) {
  if (ui != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  ui_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ui,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Colossus.Protobuf.SoftwareVersions.ui)
}
inline std::string* SoftwareVersions::unsafe_arena_release_ui() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Colossus.Protobuf.SoftwareVersions.ui)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000004u;
  return ui_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SoftwareVersions::unsafe_arena_set_allocated_ui(
    std::string* ui) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (ui != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  ui_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ui, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Colossus.Protobuf.SoftwareVersions.ui)
}

// optional string onboardos = 4;
inline bool SoftwareVersions::_internal_has_onboardos() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool SoftwareVersions::has_onboardos() const {
  return _internal_has_onboardos();
}
inline void SoftwareVersions::clear_onboardos() {
  onboardos_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& SoftwareVersions::onboardos() const {
  // @@protoc_insertion_point(field_get:Colossus.Protobuf.SoftwareVersions.onboardos)
  return _internal_onboardos();
}
inline void SoftwareVersions::set_onboardos(const std::string& value) {
  _internal_set_onboardos(value);
  // @@protoc_insertion_point(field_set:Colossus.Protobuf.SoftwareVersions.onboardos)
}
inline std::string* SoftwareVersions::mutable_onboardos() {
  // @@protoc_insertion_point(field_mutable:Colossus.Protobuf.SoftwareVersions.onboardos)
  return _internal_mutable_onboardos();
}
inline const std::string& SoftwareVersions::_internal_onboardos() const {
  return onboardos_.Get();
}
inline void SoftwareVersions::_internal_set_onboardos(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  onboardos_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SoftwareVersions::set_onboardos(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  onboardos_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Colossus.Protobuf.SoftwareVersions.onboardos)
}
inline void SoftwareVersions::set_onboardos(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  onboardos_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Colossus.Protobuf.SoftwareVersions.onboardos)
}
inline void SoftwareVersions::set_onboardos(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000008u;
  onboardos_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Colossus.Protobuf.SoftwareVersions.onboardos)
}
inline std::string* SoftwareVersions::_internal_mutable_onboardos() {
  _has_bits_[0] |= 0x00000008u;
  return onboardos_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SoftwareVersions::release_onboardos() {
  // @@protoc_insertion_point(field_release:Colossus.Protobuf.SoftwareVersions.onboardos)
  if (!_internal_has_onboardos()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return onboardos_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SoftwareVersions::set_allocated_onboardos(std::string* onboardos) {
  if (onboardos != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  onboardos_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), onboardos,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Colossus.Protobuf.SoftwareVersions.onboardos)
}
inline std::string* SoftwareVersions::unsafe_arena_release_onboardos() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Colossus.Protobuf.SoftwareVersions.onboardos)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000008u;
  return onboardos_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SoftwareVersions::unsafe_arena_set_allocated_onboardos(
    std::string* onboardos) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (onboardos != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  onboardos_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      onboardos, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Colossus.Protobuf.SoftwareVersions.onboardos)
}

// optional string onboardfirmware = 5;
inline bool SoftwareVersions::_internal_has_onboardfirmware() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool SoftwareVersions::has_onboardfirmware() const {
  return _internal_has_onboardfirmware();
}
inline void SoftwareVersions::clear_onboardfirmware() {
  onboardfirmware_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& SoftwareVersions::onboardfirmware() const {
  // @@protoc_insertion_point(field_get:Colossus.Protobuf.SoftwareVersions.onboardfirmware)
  return _internal_onboardfirmware();
}
inline void SoftwareVersions::set_onboardfirmware(const std::string& value) {
  _internal_set_onboardfirmware(value);
  // @@protoc_insertion_point(field_set:Colossus.Protobuf.SoftwareVersions.onboardfirmware)
}
inline std::string* SoftwareVersions::mutable_onboardfirmware() {
  // @@protoc_insertion_point(field_mutable:Colossus.Protobuf.SoftwareVersions.onboardfirmware)
  return _internal_mutable_onboardfirmware();
}
inline const std::string& SoftwareVersions::_internal_onboardfirmware() const {
  return onboardfirmware_.Get();
}
inline void SoftwareVersions::_internal_set_onboardfirmware(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  onboardfirmware_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SoftwareVersions::set_onboardfirmware(std::string&& value) {
  _has_bits_[0] |= 0x00000010u;
  onboardfirmware_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Colossus.Protobuf.SoftwareVersions.onboardfirmware)
}
inline void SoftwareVersions::set_onboardfirmware(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000010u;
  onboardfirmware_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Colossus.Protobuf.SoftwareVersions.onboardfirmware)
}
inline void SoftwareVersions::set_onboardfirmware(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000010u;
  onboardfirmware_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Colossus.Protobuf.SoftwareVersions.onboardfirmware)
}
inline std::string* SoftwareVersions::_internal_mutable_onboardfirmware() {
  _has_bits_[0] |= 0x00000010u;
  return onboardfirmware_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SoftwareVersions::release_onboardfirmware() {
  // @@protoc_insertion_point(field_release:Colossus.Protobuf.SoftwareVersions.onboardfirmware)
  if (!_internal_has_onboardfirmware()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  return onboardfirmware_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SoftwareVersions::set_allocated_onboardfirmware(std::string* onboardfirmware) {
  if (onboardfirmware != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  onboardfirmware_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), onboardfirmware,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Colossus.Protobuf.SoftwareVersions.onboardfirmware)
}
inline std::string* SoftwareVersions::unsafe_arena_release_onboardfirmware() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Colossus.Protobuf.SoftwareVersions.onboardfirmware)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000010u;
  return onboardfirmware_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SoftwareVersions::unsafe_arena_set_allocated_onboardfirmware(
    std::string* onboardfirmware) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (onboardfirmware != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  onboardfirmware_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      onboardfirmware, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Colossus.Protobuf.SoftwareVersions.onboardfirmware)
}

// optional string radarfpga = 6;
inline bool SoftwareVersions::_internal_has_radarfpga() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool SoftwareVersions::has_radarfpga() const {
  return _internal_has_radarfpga();
}
inline void SoftwareVersions::clear_radarfpga() {
  radarfpga_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000020u;
}
inline const std::string& SoftwareVersions::radarfpga() const {
  // @@protoc_insertion_point(field_get:Colossus.Protobuf.SoftwareVersions.radarfpga)
  return _internal_radarfpga();
}
inline void SoftwareVersions::set_radarfpga(const std::string& value) {
  _internal_set_radarfpga(value);
  // @@protoc_insertion_point(field_set:Colossus.Protobuf.SoftwareVersions.radarfpga)
}
inline std::string* SoftwareVersions::mutable_radarfpga() {
  // @@protoc_insertion_point(field_mutable:Colossus.Protobuf.SoftwareVersions.radarfpga)
  return _internal_mutable_radarfpga();
}
inline const std::string& SoftwareVersions::_internal_radarfpga() const {
  return radarfpga_.Get();
}
inline void SoftwareVersions::_internal_set_radarfpga(const std::string& value) {
  _has_bits_[0] |= 0x00000020u;
  radarfpga_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SoftwareVersions::set_radarfpga(std::string&& value) {
  _has_bits_[0] |= 0x00000020u;
  radarfpga_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Colossus.Protobuf.SoftwareVersions.radarfpga)
}
inline void SoftwareVersions::set_radarfpga(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000020u;
  radarfpga_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Colossus.Protobuf.SoftwareVersions.radarfpga)
}
inline void SoftwareVersions::set_radarfpga(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000020u;
  radarfpga_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Colossus.Protobuf.SoftwareVersions.radarfpga)
}
inline std::string* SoftwareVersions::_internal_mutable_radarfpga() {
  _has_bits_[0] |= 0x00000020u;
  return radarfpga_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SoftwareVersions::release_radarfpga() {
  // @@protoc_insertion_point(field_release:Colossus.Protobuf.SoftwareVersions.radarfpga)
  if (!_internal_has_radarfpga()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000020u;
  return radarfpga_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SoftwareVersions::set_allocated_radarfpga(std::string* radarfpga) {
  if (radarfpga != nullptr) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  radarfpga_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), radarfpga,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Colossus.Protobuf.SoftwareVersions.radarfpga)
}
inline std::string* SoftwareVersions::unsafe_arena_release_radarfpga() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Colossus.Protobuf.SoftwareVersions.radarfpga)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000020u;
  return radarfpga_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SoftwareVersions::unsafe_arena_set_allocated_radarfpga(
    std::string* radarfpga) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (radarfpga != nullptr) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  radarfpga_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      radarfpga, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Colossus.Protobuf.SoftwareVersions.radarfpga)
}

// optional string analogueboardfpga = 7;
inline bool SoftwareVersions::_internal_has_analogueboardfpga() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool SoftwareVersions::has_analogueboardfpga() const {
  return _internal_has_analogueboardfpga();
}
inline void SoftwareVersions::clear_analogueboardfpga() {
  analogueboardfpga_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000040u;
}
inline const std::string& SoftwareVersions::analogueboardfpga() const {
  // @@protoc_insertion_point(field_get:Colossus.Protobuf.SoftwareVersions.analogueboardfpga)
  return _internal_analogueboardfpga();
}
inline void SoftwareVersions::set_analogueboardfpga(const std::string& value) {
  _internal_set_analogueboardfpga(value);
  // @@protoc_insertion_point(field_set:Colossus.Protobuf.SoftwareVersions.analogueboardfpga)
}
inline std::string* SoftwareVersions::mutable_analogueboardfpga() {
  // @@protoc_insertion_point(field_mutable:Colossus.Protobuf.SoftwareVersions.analogueboardfpga)
  return _internal_mutable_analogueboardfpga();
}
inline const std::string& SoftwareVersions::_internal_analogueboardfpga() const {
  return analogueboardfpga_.Get();
}
inline void SoftwareVersions::_internal_set_analogueboardfpga(const std::string& value) {
  _has_bits_[0] |= 0x00000040u;
  analogueboardfpga_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SoftwareVersions::set_analogueboardfpga(std::string&& value) {
  _has_bits_[0] |= 0x00000040u;
  analogueboardfpga_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Colossus.Protobuf.SoftwareVersions.analogueboardfpga)
}
inline void SoftwareVersions::set_analogueboardfpga(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000040u;
  analogueboardfpga_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Colossus.Protobuf.SoftwareVersions.analogueboardfpga)
}
inline void SoftwareVersions::set_analogueboardfpga(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000040u;
  analogueboardfpga_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Colossus.Protobuf.SoftwareVersions.analogueboardfpga)
}
inline std::string* SoftwareVersions::_internal_mutable_analogueboardfpga() {
  _has_bits_[0] |= 0x00000040u;
  return analogueboardfpga_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SoftwareVersions::release_analogueboardfpga() {
  // @@protoc_insertion_point(field_release:Colossus.Protobuf.SoftwareVersions.analogueboardfpga)
  if (!_internal_has_analogueboardfpga()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000040u;
  return analogueboardfpga_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SoftwareVersions::set_allocated_analogueboardfpga(std::string* analogueboardfpga) {
  if (analogueboardfpga != nullptr) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  analogueboardfpga_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), analogueboardfpga,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Colossus.Protobuf.SoftwareVersions.analogueboardfpga)
}
inline std::string* SoftwareVersions::unsafe_arena_release_analogueboardfpga() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Colossus.Protobuf.SoftwareVersions.analogueboardfpga)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000040u;
  return analogueboardfpga_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SoftwareVersions::unsafe_arena_set_allocated_analogueboardfpga(
    std::string* analogueboardfpga) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (analogueboardfpga != nullptr) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  analogueboardfpga_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      analogueboardfpga, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Colossus.Protobuf.SoftwareVersions.analogueboardfpga)
}

// optional string digitalboardfpga = 8;
inline bool SoftwareVersions::_internal_has_digitalboardfpga() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool SoftwareVersions::has_digitalboardfpga() const {
  return _internal_has_digitalboardfpga();
}
inline void SoftwareVersions::clear_digitalboardfpga() {
  digitalboardfpga_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000080u;
}
inline const std::string& SoftwareVersions::digitalboardfpga() const {
  // @@protoc_insertion_point(field_get:Colossus.Protobuf.SoftwareVersions.digitalboardfpga)
  return _internal_digitalboardfpga();
}
inline void SoftwareVersions::set_digitalboardfpga(const std::string& value) {
  _internal_set_digitalboardfpga(value);
  // @@protoc_insertion_point(field_set:Colossus.Protobuf.SoftwareVersions.digitalboardfpga)
}
inline std::string* SoftwareVersions::mutable_digitalboardfpga() {
  // @@protoc_insertion_point(field_mutable:Colossus.Protobuf.SoftwareVersions.digitalboardfpga)
  return _internal_mutable_digitalboardfpga();
}
inline const std::string& SoftwareVersions::_internal_digitalboardfpga() const {
  return digitalboardfpga_.Get();
}
inline void SoftwareVersions::_internal_set_digitalboardfpga(const std::string& value) {
  _has_bits_[0] |= 0x00000080u;
  digitalboardfpga_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SoftwareVersions::set_digitalboardfpga(std::string&& value) {
  _has_bits_[0] |= 0x00000080u;
  digitalboardfpga_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Colossus.Protobuf.SoftwareVersions.digitalboardfpga)
}
inline void SoftwareVersions::set_digitalboardfpga(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000080u;
  digitalboardfpga_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Colossus.Protobuf.SoftwareVersions.digitalboardfpga)
}
inline void SoftwareVersions::set_digitalboardfpga(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000080u;
  digitalboardfpga_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Colossus.Protobuf.SoftwareVersions.digitalboardfpga)
}
inline std::string* SoftwareVersions::_internal_mutable_digitalboardfpga() {
  _has_bits_[0] |= 0x00000080u;
  return digitalboardfpga_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SoftwareVersions::release_digitalboardfpga() {
  // @@protoc_insertion_point(field_release:Colossus.Protobuf.SoftwareVersions.digitalboardfpga)
  if (!_internal_has_digitalboardfpga()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000080u;
  return digitalboardfpga_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SoftwareVersions::set_allocated_digitalboardfpga(std::string* digitalboardfpga) {
  if (digitalboardfpga != nullptr) {
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  digitalboardfpga_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), digitalboardfpga,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Colossus.Protobuf.SoftwareVersions.digitalboardfpga)
}
inline std::string* SoftwareVersions::unsafe_arena_release_digitalboardfpga() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Colossus.Protobuf.SoftwareVersions.digitalboardfpga)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000080u;
  return digitalboardfpga_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SoftwareVersions::unsafe_arena_set_allocated_digitalboardfpga(
    std::string* digitalboardfpga) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (digitalboardfpga != nullptr) {
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  digitalboardfpga_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      digitalboardfpga, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Colossus.Protobuf.SoftwareVersions.digitalboardfpga)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace Protobuf
}  // namespace Colossus

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_softwareversions_2eproto
