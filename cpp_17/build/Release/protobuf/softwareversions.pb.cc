// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: softwareversions.proto

#include "softwareversions.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace Colossus {
namespace Protobuf {
class SoftwareVersionsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SoftwareVersions> _instance;
} _SoftwareVersions_default_instance_;
}  // namespace Protobuf
}  // namespace Colossus
static void InitDefaultsscc_info_SoftwareVersions_softwareversions_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Colossus::Protobuf::_SoftwareVersions_default_instance_;
    new (ptr) ::Colossus::Protobuf::SoftwareVersions();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Colossus::Protobuf::SoftwareVersions::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SoftwareVersions_softwareversions_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SoftwareVersions_softwareversions_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_softwareversions_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_softwareversions_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_softwareversions_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_softwareversions_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::Colossus::Protobuf::SoftwareVersions, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Colossus::Protobuf::SoftwareVersions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Colossus::Protobuf::SoftwareVersions, os_),
  PROTOBUF_FIELD_OFFSET(::Colossus::Protobuf::SoftwareVersions, firmware_),
  PROTOBUF_FIELD_OFFSET(::Colossus::Protobuf::SoftwareVersions, ui_),
  PROTOBUF_FIELD_OFFSET(::Colossus::Protobuf::SoftwareVersions, onboardos_),
  PROTOBUF_FIELD_OFFSET(::Colossus::Protobuf::SoftwareVersions, onboardfirmware_),
  PROTOBUF_FIELD_OFFSET(::Colossus::Protobuf::SoftwareVersions, radarfpga_),
  PROTOBUF_FIELD_OFFSET(::Colossus::Protobuf::SoftwareVersions, analogueboardfpga_),
  PROTOBUF_FIELD_OFFSET(::Colossus::Protobuf::SoftwareVersions, digitalboardfpga_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 13, sizeof(::Colossus::Protobuf::SoftwareVersions)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Colossus::Protobuf::_SoftwareVersions_default_instance_),
};

const char descriptor_table_protodef_softwareversions_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\026softwareversions.proto\022\021Colossus.Proto"
  "buf\"\260\001\n\020SoftwareVersions\022\n\n\002os\030\001 \001(\t\022\020\n\010"
  "firmware\030\002 \001(\t\022\n\n\002ui\030\003 \001(\t\022\021\n\tonboardos\030"
  "\004 \001(\t\022\027\n\017onboardfirmware\030\005 \001(\t\022\021\n\tradarf"
  "pga\030\006 \001(\t\022\031\n\021analogueboardfpga\030\007 \001(\t\022\030\n\020"
  "digitalboardfpga\030\010 \001(\t"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_softwareversions_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_softwareversions_2eproto_sccs[1] = {
  &scc_info_SoftwareVersions_softwareversions_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_softwareversions_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_softwareversions_2eproto = {
  false, false, descriptor_table_protodef_softwareversions_2eproto, "softwareversions.proto", 222,
  &descriptor_table_softwareversions_2eproto_once, descriptor_table_softwareversions_2eproto_sccs, descriptor_table_softwareversions_2eproto_deps, 1, 0,
  schemas, file_default_instances, TableStruct_softwareversions_2eproto::offsets,
  file_level_metadata_softwareversions_2eproto, 1, file_level_enum_descriptors_softwareversions_2eproto, file_level_service_descriptors_softwareversions_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_softwareversions_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_softwareversions_2eproto)), true);
namespace Colossus {
namespace Protobuf {

// ===================================================================

void SoftwareVersions::InitAsDefaultInstance() {
}
class SoftwareVersions::_Internal {
 public:
  using HasBits = decltype(std::declval<SoftwareVersions>()._has_bits_);
  static void set_has_os(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_firmware(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_ui(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_onboardos(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_onboardfirmware(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_radarfpga(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_analogueboardfpga(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_digitalboardfpga(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

SoftwareVersions::SoftwareVersions(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Colossus.Protobuf.SoftwareVersions)
}
SoftwareVersions::SoftwareVersions(const SoftwareVersions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  os_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_os()) {
    os_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_os(),
      GetArena());
  }
  firmware_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_firmware()) {
    firmware_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_firmware(),
      GetArena());
  }
  ui_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_ui()) {
    ui_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_ui(),
      GetArena());
  }
  onboardos_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_onboardos()) {
    onboardos_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_onboardos(),
      GetArena());
  }
  onboardfirmware_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_onboardfirmware()) {
    onboardfirmware_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_onboardfirmware(),
      GetArena());
  }
  radarfpga_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_radarfpga()) {
    radarfpga_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_radarfpga(),
      GetArena());
  }
  analogueboardfpga_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_analogueboardfpga()) {
    analogueboardfpga_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_analogueboardfpga(),
      GetArena());
  }
  digitalboardfpga_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_digitalboardfpga()) {
    digitalboardfpga_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_digitalboardfpga(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:Colossus.Protobuf.SoftwareVersions)
}

void SoftwareVersions::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SoftwareVersions_softwareversions_2eproto.base);
  os_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  firmware_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ui_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  onboardos_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  onboardfirmware_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  radarfpga_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  analogueboardfpga_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  digitalboardfpga_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

SoftwareVersions::~SoftwareVersions() {
  // @@protoc_insertion_point(destructor:Colossus.Protobuf.SoftwareVersions)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SoftwareVersions::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  os_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  firmware_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ui_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  onboardos_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  onboardfirmware_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  radarfpga_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  analogueboardfpga_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  digitalboardfpga_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SoftwareVersions::ArenaDtor(void* object) {
  SoftwareVersions* _this = reinterpret_cast< SoftwareVersions* >(object);
  (void)_this;
}
void SoftwareVersions::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SoftwareVersions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SoftwareVersions& SoftwareVersions::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SoftwareVersions_softwareversions_2eproto.base);
  return *internal_default_instance();
}


void SoftwareVersions::Clear() {
// @@protoc_insertion_point(message_clear_start:Colossus.Protobuf.SoftwareVersions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      os_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      firmware_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      ui_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      onboardos_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      onboardfirmware_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      radarfpga_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000040u) {
      analogueboardfpga_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000080u) {
      digitalboardfpga_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SoftwareVersions::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string os = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_os();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Colossus.Protobuf.SoftwareVersions.os");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string firmware = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_firmware();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Colossus.Protobuf.SoftwareVersions.firmware");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string ui = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_ui();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Colossus.Protobuf.SoftwareVersions.ui");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string onboardos = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_onboardos();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Colossus.Protobuf.SoftwareVersions.onboardos");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string onboardfirmware = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_onboardfirmware();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Colossus.Protobuf.SoftwareVersions.onboardfirmware");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string radarfpga = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_radarfpga();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Colossus.Protobuf.SoftwareVersions.radarfpga");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string analogueboardfpga = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_analogueboardfpga();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Colossus.Protobuf.SoftwareVersions.analogueboardfpga");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string digitalboardfpga = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_digitalboardfpga();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Colossus.Protobuf.SoftwareVersions.digitalboardfpga");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SoftwareVersions::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Colossus.Protobuf.SoftwareVersions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string os = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_os().data(), static_cast<int>(this->_internal_os().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Colossus.Protobuf.SoftwareVersions.os");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_os(), target);
  }

  // optional string firmware = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_firmware().data(), static_cast<int>(this->_internal_firmware().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Colossus.Protobuf.SoftwareVersions.firmware");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_firmware(), target);
  }

  // optional string ui = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_ui().data(), static_cast<int>(this->_internal_ui().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Colossus.Protobuf.SoftwareVersions.ui");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_ui(), target);
  }

  // optional string onboardos = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_onboardos().data(), static_cast<int>(this->_internal_onboardos().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Colossus.Protobuf.SoftwareVersions.onboardos");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_onboardos(), target);
  }

  // optional string onboardfirmware = 5;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_onboardfirmware().data(), static_cast<int>(this->_internal_onboardfirmware().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Colossus.Protobuf.SoftwareVersions.onboardfirmware");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_onboardfirmware(), target);
  }

  // optional string radarfpga = 6;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_radarfpga().data(), static_cast<int>(this->_internal_radarfpga().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Colossus.Protobuf.SoftwareVersions.radarfpga");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_radarfpga(), target);
  }

  // optional string analogueboardfpga = 7;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_analogueboardfpga().data(), static_cast<int>(this->_internal_analogueboardfpga().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Colossus.Protobuf.SoftwareVersions.analogueboardfpga");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_analogueboardfpga(), target);
  }

  // optional string digitalboardfpga = 8;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_digitalboardfpga().data(), static_cast<int>(this->_internal_digitalboardfpga().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Colossus.Protobuf.SoftwareVersions.digitalboardfpga");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_digitalboardfpga(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Colossus.Protobuf.SoftwareVersions)
  return target;
}

size_t SoftwareVersions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Colossus.Protobuf.SoftwareVersions)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string os = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_os());
    }

    // optional string firmware = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_firmware());
    }

    // optional string ui = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_ui());
    }

    // optional string onboardos = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_onboardos());
    }

    // optional string onboardfirmware = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_onboardfirmware());
    }

    // optional string radarfpga = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_radarfpga());
    }

    // optional string analogueboardfpga = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_analogueboardfpga());
    }

    // optional string digitalboardfpga = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_digitalboardfpga());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SoftwareVersions::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Colossus.Protobuf.SoftwareVersions)
  GOOGLE_DCHECK_NE(&from, this);
  const SoftwareVersions* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SoftwareVersions>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Colossus.Protobuf.SoftwareVersions)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Colossus.Protobuf.SoftwareVersions)
    MergeFrom(*source);
  }
}

void SoftwareVersions::MergeFrom(const SoftwareVersions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Colossus.Protobuf.SoftwareVersions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_os(from._internal_os());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_firmware(from._internal_firmware());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_ui(from._internal_ui());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_onboardos(from._internal_onboardos());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_onboardfirmware(from._internal_onboardfirmware());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_set_radarfpga(from._internal_radarfpga());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_set_analogueboardfpga(from._internal_analogueboardfpga());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_set_digitalboardfpga(from._internal_digitalboardfpga());
    }
  }
}

void SoftwareVersions::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Colossus.Protobuf.SoftwareVersions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SoftwareVersions::CopyFrom(const SoftwareVersions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Colossus.Protobuf.SoftwareVersions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SoftwareVersions::IsInitialized() const {
  return true;
}

void SoftwareVersions::InternalSwap(SoftwareVersions* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  os_.Swap(&other->os_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  firmware_.Swap(&other->firmware_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ui_.Swap(&other->ui_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  onboardos_.Swap(&other->onboardos_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  onboardfirmware_.Swap(&other->onboardfirmware_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  radarfpga_.Swap(&other->radarfpga_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  analogueboardfpga_.Swap(&other->analogueboardfpga_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  digitalboardfpga_.Swap(&other->digitalboardfpga_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata SoftwareVersions::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace Protobuf
}  // namespace Colossus
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::Colossus::Protobuf::SoftwareVersions* Arena::CreateMaybeMessage< ::Colossus::Protobuf::SoftwareVersions >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Colossus::Protobuf::SoftwareVersions >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
