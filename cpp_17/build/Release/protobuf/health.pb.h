// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: health.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_health_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_health_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "healthinfo.pb.h"
#include "networkinfo.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_health_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_health_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_health_2eproto;
namespace Colossus {
namespace Protobuf {
class Health;
class HealthDefaultTypeInternal;
extern HealthDefaultTypeInternal _Health_default_instance_;
}  // namespace Protobuf
}  // namespace Colossus
PROTOBUF_NAMESPACE_OPEN
template<> ::Colossus::Protobuf::Health* Arena::CreateMaybeMessage<::Colossus::Protobuf::Health>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Colossus {
namespace Protobuf {

// ===================================================================

class Health PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Colossus.Protobuf.Health) */ {
 public:
  inline Health() : Health(nullptr) {};
  virtual ~Health();

  Health(const Health& from);
  Health(Health&& from) noexcept
    : Health() {
    *this = ::std::move(from);
  }

  inline Health& operator=(const Health& from) {
    CopyFrom(from);
    return *this;
  }
  inline Health& operator=(Health&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Health& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Health* internal_default_instance() {
    return reinterpret_cast<const Health*>(
               &_Health_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Health& a, Health& b) {
    a.Swap(&b);
  }
  inline void Swap(Health* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Health* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Health* New() const final {
    return CreateMaybeMessage<Health>(nullptr);
  }

  Health* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Health>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Health& from);
  void MergeFrom(const Health& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Health* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Colossus.Protobuf.Health";
  }
  protected:
  explicit Health(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_health_2eproto);
    return ::descriptor_table_health_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIpclientsFieldNumber = 19,
    kMacaddressFieldNumber = 11,
    kDietemperatureFieldNumber = 1,
    kSoctemperatureFieldNumber = 2,
    kVcotemperatureFieldNumber = 3,
    kAmbienttemperatureFieldNumber = 4,
    kRotationFieldNumber = 5,
    kPacketrateFieldNumber = 6,
    kRfhealthcheckFieldNumber = 7,
    kMotorcurrentFieldNumber = 14,
    kNetworkstateFieldNumber = 17,
    kTransmittingFieldNumber = 8,
    kExpectedrotationFieldNumber = 9,
    kExpectedpacketrateFieldNumber = 10,
    kEncodererrorcountFieldNumber = 12,
    kSoftwareuptimeFieldNumber = 15,
    kSystemuptimeFieldNumber = 13,
    kMaxclientsallowedFieldNumber = 18,
    kTotaluptimeFieldNumber = 16,
    kExpectedrxpacketrateFieldNumber = 20,
    kUplinkerrorsFieldNumber = 21,
    kDownlinkerrorsFieldNumber = 22,
    kUplinkmissedFieldNumber = 23,
    kDownlinkmissedFieldNumber = 24,
  };
  // repeated string ipclients = 19;
  int ipclients_size() const;
  private:
  int _internal_ipclients_size() const;
  public:
  void clear_ipclients();
  const std::string& ipclients(int index) const;
  std::string* mutable_ipclients(int index);
  void set_ipclients(int index, const std::string& value);
  void set_ipclients(int index, std::string&& value);
  void set_ipclients(int index, const char* value);
  void set_ipclients(int index, const char* value, size_t size);
  std::string* add_ipclients();
  void add_ipclients(const std::string& value);
  void add_ipclients(std::string&& value);
  void add_ipclients(const char* value);
  void add_ipclients(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& ipclients() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_ipclients();
  private:
  const std::string& _internal_ipclients(int index) const;
  std::string* _internal_add_ipclients();
  public:

  // optional string macaddress = 11;
  bool has_macaddress() const;
  private:
  bool _internal_has_macaddress() const;
  public:
  void clear_macaddress();
  const std::string& macaddress() const;
  void set_macaddress(const std::string& value);
  void set_macaddress(std::string&& value);
  void set_macaddress(const char* value);
  void set_macaddress(const char* value, size_t size);
  std::string* mutable_macaddress();
  std::string* release_macaddress();
  void set_allocated_macaddress(std::string* macaddress);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_macaddress();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_macaddress(
      std::string* macaddress);
  private:
  const std::string& _internal_macaddress() const;
  void _internal_set_macaddress(const std::string& value);
  std::string* _internal_mutable_macaddress();
  public:

  // optional .Colossus.Protobuf.HealthInfo dietemperature = 1;
  bool has_dietemperature() const;
  private:
  bool _internal_has_dietemperature() const;
  public:
  void clear_dietemperature();
  const ::Colossus::Protobuf::HealthInfo& dietemperature() const;
  ::Colossus::Protobuf::HealthInfo* release_dietemperature();
  ::Colossus::Protobuf::HealthInfo* mutable_dietemperature();
  void set_allocated_dietemperature(::Colossus::Protobuf::HealthInfo* dietemperature);
  private:
  const ::Colossus::Protobuf::HealthInfo& _internal_dietemperature() const;
  ::Colossus::Protobuf::HealthInfo* _internal_mutable_dietemperature();
  public:
  void unsafe_arena_set_allocated_dietemperature(
      ::Colossus::Protobuf::HealthInfo* dietemperature);
  ::Colossus::Protobuf::HealthInfo* unsafe_arena_release_dietemperature();

  // optional .Colossus.Protobuf.HealthInfo soctemperature = 2;
  bool has_soctemperature() const;
  private:
  bool _internal_has_soctemperature() const;
  public:
  void clear_soctemperature();
  const ::Colossus::Protobuf::HealthInfo& soctemperature() const;
  ::Colossus::Protobuf::HealthInfo* release_soctemperature();
  ::Colossus::Protobuf::HealthInfo* mutable_soctemperature();
  void set_allocated_soctemperature(::Colossus::Protobuf::HealthInfo* soctemperature);
  private:
  const ::Colossus::Protobuf::HealthInfo& _internal_soctemperature() const;
  ::Colossus::Protobuf::HealthInfo* _internal_mutable_soctemperature();
  public:
  void unsafe_arena_set_allocated_soctemperature(
      ::Colossus::Protobuf::HealthInfo* soctemperature);
  ::Colossus::Protobuf::HealthInfo* unsafe_arena_release_soctemperature();

  // optional .Colossus.Protobuf.HealthInfo vcotemperature = 3;
  bool has_vcotemperature() const;
  private:
  bool _internal_has_vcotemperature() const;
  public:
  void clear_vcotemperature();
  const ::Colossus::Protobuf::HealthInfo& vcotemperature() const;
  ::Colossus::Protobuf::HealthInfo* release_vcotemperature();
  ::Colossus::Protobuf::HealthInfo* mutable_vcotemperature();
  void set_allocated_vcotemperature(::Colossus::Protobuf::HealthInfo* vcotemperature);
  private:
  const ::Colossus::Protobuf::HealthInfo& _internal_vcotemperature() const;
  ::Colossus::Protobuf::HealthInfo* _internal_mutable_vcotemperature();
  public:
  void unsafe_arena_set_allocated_vcotemperature(
      ::Colossus::Protobuf::HealthInfo* vcotemperature);
  ::Colossus::Protobuf::HealthInfo* unsafe_arena_release_vcotemperature();

  // optional .Colossus.Protobuf.HealthInfo ambienttemperature = 4;
  bool has_ambienttemperature() const;
  private:
  bool _internal_has_ambienttemperature() const;
  public:
  void clear_ambienttemperature();
  const ::Colossus::Protobuf::HealthInfo& ambienttemperature() const;
  ::Colossus::Protobuf::HealthInfo* release_ambienttemperature();
  ::Colossus::Protobuf::HealthInfo* mutable_ambienttemperature();
  void set_allocated_ambienttemperature(::Colossus::Protobuf::HealthInfo* ambienttemperature);
  private:
  const ::Colossus::Protobuf::HealthInfo& _internal_ambienttemperature() const;
  ::Colossus::Protobuf::HealthInfo* _internal_mutable_ambienttemperature();
  public:
  void unsafe_arena_set_allocated_ambienttemperature(
      ::Colossus::Protobuf::HealthInfo* ambienttemperature);
  ::Colossus::Protobuf::HealthInfo* unsafe_arena_release_ambienttemperature();

  // optional .Colossus.Protobuf.HealthInfo rotation = 5;
  bool has_rotation() const;
  private:
  bool _internal_has_rotation() const;
  public:
  void clear_rotation();
  const ::Colossus::Protobuf::HealthInfo& rotation() const;
  ::Colossus::Protobuf::HealthInfo* release_rotation();
  ::Colossus::Protobuf::HealthInfo* mutable_rotation();
  void set_allocated_rotation(::Colossus::Protobuf::HealthInfo* rotation);
  private:
  const ::Colossus::Protobuf::HealthInfo& _internal_rotation() const;
  ::Colossus::Protobuf::HealthInfo* _internal_mutable_rotation();
  public:
  void unsafe_arena_set_allocated_rotation(
      ::Colossus::Protobuf::HealthInfo* rotation);
  ::Colossus::Protobuf::HealthInfo* unsafe_arena_release_rotation();

  // optional .Colossus.Protobuf.HealthInfo packetrate = 6;
  bool has_packetrate() const;
  private:
  bool _internal_has_packetrate() const;
  public:
  void clear_packetrate();
  const ::Colossus::Protobuf::HealthInfo& packetrate() const;
  ::Colossus::Protobuf::HealthInfo* release_packetrate();
  ::Colossus::Protobuf::HealthInfo* mutable_packetrate();
  void set_allocated_packetrate(::Colossus::Protobuf::HealthInfo* packetrate);
  private:
  const ::Colossus::Protobuf::HealthInfo& _internal_packetrate() const;
  ::Colossus::Protobuf::HealthInfo* _internal_mutable_packetrate();
  public:
  void unsafe_arena_set_allocated_packetrate(
      ::Colossus::Protobuf::HealthInfo* packetrate);
  ::Colossus::Protobuf::HealthInfo* unsafe_arena_release_packetrate();

  // optional .Colossus.Protobuf.HealthInfo rfhealthcheck = 7;
  bool has_rfhealthcheck() const;
  private:
  bool _internal_has_rfhealthcheck() const;
  public:
  void clear_rfhealthcheck();
  const ::Colossus::Protobuf::HealthInfo& rfhealthcheck() const;
  ::Colossus::Protobuf::HealthInfo* release_rfhealthcheck();
  ::Colossus::Protobuf::HealthInfo* mutable_rfhealthcheck();
  void set_allocated_rfhealthcheck(::Colossus::Protobuf::HealthInfo* rfhealthcheck);
  private:
  const ::Colossus::Protobuf::HealthInfo& _internal_rfhealthcheck() const;
  ::Colossus::Protobuf::HealthInfo* _internal_mutable_rfhealthcheck();
  public:
  void unsafe_arena_set_allocated_rfhealthcheck(
      ::Colossus::Protobuf::HealthInfo* rfhealthcheck);
  ::Colossus::Protobuf::HealthInfo* unsafe_arena_release_rfhealthcheck();

  // optional .Colossus.Protobuf.HealthInfo motorcurrent = 14;
  bool has_motorcurrent() const;
  private:
  bool _internal_has_motorcurrent() const;
  public:
  void clear_motorcurrent();
  const ::Colossus::Protobuf::HealthInfo& motorcurrent() const;
  ::Colossus::Protobuf::HealthInfo* release_motorcurrent();
  ::Colossus::Protobuf::HealthInfo* mutable_motorcurrent();
  void set_allocated_motorcurrent(::Colossus::Protobuf::HealthInfo* motorcurrent);
  private:
  const ::Colossus::Protobuf::HealthInfo& _internal_motorcurrent() const;
  ::Colossus::Protobuf::HealthInfo* _internal_mutable_motorcurrent();
  public:
  void unsafe_arena_set_allocated_motorcurrent(
      ::Colossus::Protobuf::HealthInfo* motorcurrent);
  ::Colossus::Protobuf::HealthInfo* unsafe_arena_release_motorcurrent();

  // optional .Colossus.Protobuf.NetworkInfo networkstate = 17;
  bool has_networkstate() const;
  private:
  bool _internal_has_networkstate() const;
  public:
  void clear_networkstate();
  const ::Colossus::Protobuf::NetworkInfo& networkstate() const;
  ::Colossus::Protobuf::NetworkInfo* release_networkstate();
  ::Colossus::Protobuf::NetworkInfo* mutable_networkstate();
  void set_allocated_networkstate(::Colossus::Protobuf::NetworkInfo* networkstate);
  private:
  const ::Colossus::Protobuf::NetworkInfo& _internal_networkstate() const;
  ::Colossus::Protobuf::NetworkInfo* _internal_mutable_networkstate();
  public:
  void unsafe_arena_set_allocated_networkstate(
      ::Colossus::Protobuf::NetworkInfo* networkstate);
  ::Colossus::Protobuf::NetworkInfo* unsafe_arena_release_networkstate();

  // optional bool transmitting = 8;
  bool has_transmitting() const;
  private:
  bool _internal_has_transmitting() const;
  public:
  void clear_transmitting();
  bool transmitting() const;
  void set_transmitting(bool value);
  private:
  bool _internal_transmitting() const;
  void _internal_set_transmitting(bool value);
  public:

  // optional uint32 expectedrotation = 9;
  bool has_expectedrotation() const;
  private:
  bool _internal_has_expectedrotation() const;
  public:
  void clear_expectedrotation();
  ::PROTOBUF_NAMESPACE_ID::uint32 expectedrotation() const;
  void set_expectedrotation(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_expectedrotation() const;
  void _internal_set_expectedrotation(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 expectedpacketrate = 10;
  bool has_expectedpacketrate() const;
  private:
  bool _internal_has_expectedpacketrate() const;
  public:
  void clear_expectedpacketrate();
  ::PROTOBUF_NAMESPACE_ID::uint32 expectedpacketrate() const;
  void set_expectedpacketrate(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_expectedpacketrate() const;
  void _internal_set_expectedpacketrate(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional int32 encodererrorcount = 12;
  bool has_encodererrorcount() const;
  private:
  bool _internal_has_encodererrorcount() const;
  public:
  void clear_encodererrorcount();
  ::PROTOBUF_NAMESPACE_ID::int32 encodererrorcount() const;
  void set_encodererrorcount(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_encodererrorcount() const;
  void _internal_set_encodererrorcount(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional uint64 softwareuptime = 15;
  bool has_softwareuptime() const;
  private:
  bool _internal_has_softwareuptime() const;
  public:
  void clear_softwareuptime();
  ::PROTOBUF_NAMESPACE_ID::uint64 softwareuptime() const;
  void set_softwareuptime(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_softwareuptime() const;
  void _internal_set_softwareuptime(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional float systemuptime = 13;
  bool has_systemuptime() const;
  private:
  bool _internal_has_systemuptime() const;
  public:
  void clear_systemuptime();
  float systemuptime() const;
  void set_systemuptime(float value);
  private:
  float _internal_systemuptime() const;
  void _internal_set_systemuptime(float value);
  public:

  // optional int32 maxclientsallowed = 18;
  bool has_maxclientsallowed() const;
  private:
  bool _internal_has_maxclientsallowed() const;
  public:
  void clear_maxclientsallowed();
  ::PROTOBUF_NAMESPACE_ID::int32 maxclientsallowed() const;
  void set_maxclientsallowed(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_maxclientsallowed() const;
  void _internal_set_maxclientsallowed(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional uint64 totaluptime = 16;
  bool has_totaluptime() const;
  private:
  bool _internal_has_totaluptime() const;
  public:
  void clear_totaluptime();
  ::PROTOBUF_NAMESPACE_ID::uint64 totaluptime() const;
  void set_totaluptime(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_totaluptime() const;
  void _internal_set_totaluptime(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional uint32 expectedrxpacketrate = 20;
  bool has_expectedrxpacketrate() const;
  private:
  bool _internal_has_expectedrxpacketrate() const;
  public:
  void clear_expectedrxpacketrate();
  ::PROTOBUF_NAMESPACE_ID::uint32 expectedrxpacketrate() const;
  void set_expectedrxpacketrate(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_expectedrxpacketrate() const;
  void _internal_set_expectedrxpacketrate(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 uplinkerrors = 21;
  bool has_uplinkerrors() const;
  private:
  bool _internal_has_uplinkerrors() const;
  public:
  void clear_uplinkerrors();
  ::PROTOBUF_NAMESPACE_ID::uint32 uplinkerrors() const;
  void set_uplinkerrors(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_uplinkerrors() const;
  void _internal_set_uplinkerrors(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 downlinkerrors = 22;
  bool has_downlinkerrors() const;
  private:
  bool _internal_has_downlinkerrors() const;
  public:
  void clear_downlinkerrors();
  ::PROTOBUF_NAMESPACE_ID::uint32 downlinkerrors() const;
  void set_downlinkerrors(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_downlinkerrors() const;
  void _internal_set_downlinkerrors(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 uplinkmissed = 23;
  bool has_uplinkmissed() const;
  private:
  bool _internal_has_uplinkmissed() const;
  public:
  void clear_uplinkmissed();
  ::PROTOBUF_NAMESPACE_ID::uint32 uplinkmissed() const;
  void set_uplinkmissed(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_uplinkmissed() const;
  void _internal_set_uplinkmissed(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 downlinkmissed = 24;
  bool has_downlinkmissed() const;
  private:
  bool _internal_has_downlinkmissed() const;
  public:
  void clear_downlinkmissed();
  ::PROTOBUF_NAMESPACE_ID::uint32 downlinkmissed() const;
  void set_downlinkmissed(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_downlinkmissed() const;
  void _internal_set_downlinkmissed(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:Colossus.Protobuf.Health)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> ipclients_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr macaddress_;
  ::Colossus::Protobuf::HealthInfo* dietemperature_;
  ::Colossus::Protobuf::HealthInfo* soctemperature_;
  ::Colossus::Protobuf::HealthInfo* vcotemperature_;
  ::Colossus::Protobuf::HealthInfo* ambienttemperature_;
  ::Colossus::Protobuf::HealthInfo* rotation_;
  ::Colossus::Protobuf::HealthInfo* packetrate_;
  ::Colossus::Protobuf::HealthInfo* rfhealthcheck_;
  ::Colossus::Protobuf::HealthInfo* motorcurrent_;
  ::Colossus::Protobuf::NetworkInfo* networkstate_;
  bool transmitting_;
  ::PROTOBUF_NAMESPACE_ID::uint32 expectedrotation_;
  ::PROTOBUF_NAMESPACE_ID::uint32 expectedpacketrate_;
  ::PROTOBUF_NAMESPACE_ID::int32 encodererrorcount_;
  ::PROTOBUF_NAMESPACE_ID::uint64 softwareuptime_;
  float systemuptime_;
  ::PROTOBUF_NAMESPACE_ID::int32 maxclientsallowed_;
  ::PROTOBUF_NAMESPACE_ID::uint64 totaluptime_;
  ::PROTOBUF_NAMESPACE_ID::uint32 expectedrxpacketrate_;
  ::PROTOBUF_NAMESPACE_ID::uint32 uplinkerrors_;
  ::PROTOBUF_NAMESPACE_ID::uint32 downlinkerrors_;
  ::PROTOBUF_NAMESPACE_ID::uint32 uplinkmissed_;
  ::PROTOBUF_NAMESPACE_ID::uint32 downlinkmissed_;
  friend struct ::TableStruct_health_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Health

// optional .Colossus.Protobuf.HealthInfo dietemperature = 1;
inline bool Health::_internal_has_dietemperature() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || dietemperature_ != nullptr);
  return value;
}
inline bool Health::has_dietemperature() const {
  return _internal_has_dietemperature();
}
inline const ::Colossus::Protobuf::HealthInfo& Health::_internal_dietemperature() const {
  const ::Colossus::Protobuf::HealthInfo* p = dietemperature_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Colossus::Protobuf::HealthInfo*>(
      &::Colossus::Protobuf::_HealthInfo_default_instance_);
}
inline const ::Colossus::Protobuf::HealthInfo& Health::dietemperature() const {
  // @@protoc_insertion_point(field_get:Colossus.Protobuf.Health.dietemperature)
  return _internal_dietemperature();
}
inline void Health::unsafe_arena_set_allocated_dietemperature(
    ::Colossus::Protobuf::HealthInfo* dietemperature) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(dietemperature_);
  }
  dietemperature_ = dietemperature;
  if (dietemperature) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Colossus.Protobuf.Health.dietemperature)
}
inline ::Colossus::Protobuf::HealthInfo* Health::release_dietemperature() {
  auto temp = unsafe_arena_release_dietemperature();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Colossus::Protobuf::HealthInfo* Health::unsafe_arena_release_dietemperature() {
  // @@protoc_insertion_point(field_release:Colossus.Protobuf.Health.dietemperature)
  _has_bits_[0] &= ~0x00000002u;
  ::Colossus::Protobuf::HealthInfo* temp = dietemperature_;
  dietemperature_ = nullptr;
  return temp;
}
inline ::Colossus::Protobuf::HealthInfo* Health::_internal_mutable_dietemperature() {
  _has_bits_[0] |= 0x00000002u;
  if (dietemperature_ == nullptr) {
    auto* p = CreateMaybeMessage<::Colossus::Protobuf::HealthInfo>(GetArena());
    dietemperature_ = p;
  }
  return dietemperature_;
}
inline ::Colossus::Protobuf::HealthInfo* Health::mutable_dietemperature() {
  // @@protoc_insertion_point(field_mutable:Colossus.Protobuf.Health.dietemperature)
  return _internal_mutable_dietemperature();
}
inline void Health::set_allocated_dietemperature(::Colossus::Protobuf::HealthInfo* dietemperature) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(dietemperature_);
  }
  if (dietemperature) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(dietemperature)->GetArena();
    if (message_arena != submessage_arena) {
      dietemperature = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dietemperature, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  dietemperature_ = dietemperature;
  // @@protoc_insertion_point(field_set_allocated:Colossus.Protobuf.Health.dietemperature)
}

// optional .Colossus.Protobuf.HealthInfo soctemperature = 2;
inline bool Health::_internal_has_soctemperature() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || soctemperature_ != nullptr);
  return value;
}
inline bool Health::has_soctemperature() const {
  return _internal_has_soctemperature();
}
inline const ::Colossus::Protobuf::HealthInfo& Health::_internal_soctemperature() const {
  const ::Colossus::Protobuf::HealthInfo* p = soctemperature_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Colossus::Protobuf::HealthInfo*>(
      &::Colossus::Protobuf::_HealthInfo_default_instance_);
}
inline const ::Colossus::Protobuf::HealthInfo& Health::soctemperature() const {
  // @@protoc_insertion_point(field_get:Colossus.Protobuf.Health.soctemperature)
  return _internal_soctemperature();
}
inline void Health::unsafe_arena_set_allocated_soctemperature(
    ::Colossus::Protobuf::HealthInfo* soctemperature) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(soctemperature_);
  }
  soctemperature_ = soctemperature;
  if (soctemperature) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Colossus.Protobuf.Health.soctemperature)
}
inline ::Colossus::Protobuf::HealthInfo* Health::release_soctemperature() {
  auto temp = unsafe_arena_release_soctemperature();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Colossus::Protobuf::HealthInfo* Health::unsafe_arena_release_soctemperature() {
  // @@protoc_insertion_point(field_release:Colossus.Protobuf.Health.soctemperature)
  _has_bits_[0] &= ~0x00000004u;
  ::Colossus::Protobuf::HealthInfo* temp = soctemperature_;
  soctemperature_ = nullptr;
  return temp;
}
inline ::Colossus::Protobuf::HealthInfo* Health::_internal_mutable_soctemperature() {
  _has_bits_[0] |= 0x00000004u;
  if (soctemperature_ == nullptr) {
    auto* p = CreateMaybeMessage<::Colossus::Protobuf::HealthInfo>(GetArena());
    soctemperature_ = p;
  }
  return soctemperature_;
}
inline ::Colossus::Protobuf::HealthInfo* Health::mutable_soctemperature() {
  // @@protoc_insertion_point(field_mutable:Colossus.Protobuf.Health.soctemperature)
  return _internal_mutable_soctemperature();
}
inline void Health::set_allocated_soctemperature(::Colossus::Protobuf::HealthInfo* soctemperature) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(soctemperature_);
  }
  if (soctemperature) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(soctemperature)->GetArena();
    if (message_arena != submessage_arena) {
      soctemperature = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, soctemperature, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  soctemperature_ = soctemperature;
  // @@protoc_insertion_point(field_set_allocated:Colossus.Protobuf.Health.soctemperature)
}

// optional .Colossus.Protobuf.HealthInfo vcotemperature = 3;
inline bool Health::_internal_has_vcotemperature() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || vcotemperature_ != nullptr);
  return value;
}
inline bool Health::has_vcotemperature() const {
  return _internal_has_vcotemperature();
}
inline const ::Colossus::Protobuf::HealthInfo& Health::_internal_vcotemperature() const {
  const ::Colossus::Protobuf::HealthInfo* p = vcotemperature_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Colossus::Protobuf::HealthInfo*>(
      &::Colossus::Protobuf::_HealthInfo_default_instance_);
}
inline const ::Colossus::Protobuf::HealthInfo& Health::vcotemperature() const {
  // @@protoc_insertion_point(field_get:Colossus.Protobuf.Health.vcotemperature)
  return _internal_vcotemperature();
}
inline void Health::unsafe_arena_set_allocated_vcotemperature(
    ::Colossus::Protobuf::HealthInfo* vcotemperature) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(vcotemperature_);
  }
  vcotemperature_ = vcotemperature;
  if (vcotemperature) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Colossus.Protobuf.Health.vcotemperature)
}
inline ::Colossus::Protobuf::HealthInfo* Health::release_vcotemperature() {
  auto temp = unsafe_arena_release_vcotemperature();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Colossus::Protobuf::HealthInfo* Health::unsafe_arena_release_vcotemperature() {
  // @@protoc_insertion_point(field_release:Colossus.Protobuf.Health.vcotemperature)
  _has_bits_[0] &= ~0x00000008u;
  ::Colossus::Protobuf::HealthInfo* temp = vcotemperature_;
  vcotemperature_ = nullptr;
  return temp;
}
inline ::Colossus::Protobuf::HealthInfo* Health::_internal_mutable_vcotemperature() {
  _has_bits_[0] |= 0x00000008u;
  if (vcotemperature_ == nullptr) {
    auto* p = CreateMaybeMessage<::Colossus::Protobuf::HealthInfo>(GetArena());
    vcotemperature_ = p;
  }
  return vcotemperature_;
}
inline ::Colossus::Protobuf::HealthInfo* Health::mutable_vcotemperature() {
  // @@protoc_insertion_point(field_mutable:Colossus.Protobuf.Health.vcotemperature)
  return _internal_mutable_vcotemperature();
}
inline void Health::set_allocated_vcotemperature(::Colossus::Protobuf::HealthInfo* vcotemperature) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(vcotemperature_);
  }
  if (vcotemperature) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(vcotemperature)->GetArena();
    if (message_arena != submessage_arena) {
      vcotemperature = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vcotemperature, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  vcotemperature_ = vcotemperature;
  // @@protoc_insertion_point(field_set_allocated:Colossus.Protobuf.Health.vcotemperature)
}

// optional .Colossus.Protobuf.HealthInfo ambienttemperature = 4;
inline bool Health::_internal_has_ambienttemperature() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || ambienttemperature_ != nullptr);
  return value;
}
inline bool Health::has_ambienttemperature() const {
  return _internal_has_ambienttemperature();
}
inline const ::Colossus::Protobuf::HealthInfo& Health::_internal_ambienttemperature() const {
  const ::Colossus::Protobuf::HealthInfo* p = ambienttemperature_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Colossus::Protobuf::HealthInfo*>(
      &::Colossus::Protobuf::_HealthInfo_default_instance_);
}
inline const ::Colossus::Protobuf::HealthInfo& Health::ambienttemperature() const {
  // @@protoc_insertion_point(field_get:Colossus.Protobuf.Health.ambienttemperature)
  return _internal_ambienttemperature();
}
inline void Health::unsafe_arena_set_allocated_ambienttemperature(
    ::Colossus::Protobuf::HealthInfo* ambienttemperature) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ambienttemperature_);
  }
  ambienttemperature_ = ambienttemperature;
  if (ambienttemperature) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Colossus.Protobuf.Health.ambienttemperature)
}
inline ::Colossus::Protobuf::HealthInfo* Health::release_ambienttemperature() {
  auto temp = unsafe_arena_release_ambienttemperature();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Colossus::Protobuf::HealthInfo* Health::unsafe_arena_release_ambienttemperature() {
  // @@protoc_insertion_point(field_release:Colossus.Protobuf.Health.ambienttemperature)
  _has_bits_[0] &= ~0x00000010u;
  ::Colossus::Protobuf::HealthInfo* temp = ambienttemperature_;
  ambienttemperature_ = nullptr;
  return temp;
}
inline ::Colossus::Protobuf::HealthInfo* Health::_internal_mutable_ambienttemperature() {
  _has_bits_[0] |= 0x00000010u;
  if (ambienttemperature_ == nullptr) {
    auto* p = CreateMaybeMessage<::Colossus::Protobuf::HealthInfo>(GetArena());
    ambienttemperature_ = p;
  }
  return ambienttemperature_;
}
inline ::Colossus::Protobuf::HealthInfo* Health::mutable_ambienttemperature() {
  // @@protoc_insertion_point(field_mutable:Colossus.Protobuf.Health.ambienttemperature)
  return _internal_mutable_ambienttemperature();
}
inline void Health::set_allocated_ambienttemperature(::Colossus::Protobuf::HealthInfo* ambienttemperature) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(ambienttemperature_);
  }
  if (ambienttemperature) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ambienttemperature)->GetArena();
    if (message_arena != submessage_arena) {
      ambienttemperature = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ambienttemperature, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  ambienttemperature_ = ambienttemperature;
  // @@protoc_insertion_point(field_set_allocated:Colossus.Protobuf.Health.ambienttemperature)
}

// optional .Colossus.Protobuf.HealthInfo rotation = 5;
inline bool Health::_internal_has_rotation() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || rotation_ != nullptr);
  return value;
}
inline bool Health::has_rotation() const {
  return _internal_has_rotation();
}
inline const ::Colossus::Protobuf::HealthInfo& Health::_internal_rotation() const {
  const ::Colossus::Protobuf::HealthInfo* p = rotation_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Colossus::Protobuf::HealthInfo*>(
      &::Colossus::Protobuf::_HealthInfo_default_instance_);
}
inline const ::Colossus::Protobuf::HealthInfo& Health::rotation() const {
  // @@protoc_insertion_point(field_get:Colossus.Protobuf.Health.rotation)
  return _internal_rotation();
}
inline void Health::unsafe_arena_set_allocated_rotation(
    ::Colossus::Protobuf::HealthInfo* rotation) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rotation_);
  }
  rotation_ = rotation;
  if (rotation) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Colossus.Protobuf.Health.rotation)
}
inline ::Colossus::Protobuf::HealthInfo* Health::release_rotation() {
  auto temp = unsafe_arena_release_rotation();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Colossus::Protobuf::HealthInfo* Health::unsafe_arena_release_rotation() {
  // @@protoc_insertion_point(field_release:Colossus.Protobuf.Health.rotation)
  _has_bits_[0] &= ~0x00000020u;
  ::Colossus::Protobuf::HealthInfo* temp = rotation_;
  rotation_ = nullptr;
  return temp;
}
inline ::Colossus::Protobuf::HealthInfo* Health::_internal_mutable_rotation() {
  _has_bits_[0] |= 0x00000020u;
  if (rotation_ == nullptr) {
    auto* p = CreateMaybeMessage<::Colossus::Protobuf::HealthInfo>(GetArena());
    rotation_ = p;
  }
  return rotation_;
}
inline ::Colossus::Protobuf::HealthInfo* Health::mutable_rotation() {
  // @@protoc_insertion_point(field_mutable:Colossus.Protobuf.Health.rotation)
  return _internal_mutable_rotation();
}
inline void Health::set_allocated_rotation(::Colossus::Protobuf::HealthInfo* rotation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(rotation_);
  }
  if (rotation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rotation)->GetArena();
    if (message_arena != submessage_arena) {
      rotation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rotation, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  rotation_ = rotation;
  // @@protoc_insertion_point(field_set_allocated:Colossus.Protobuf.Health.rotation)
}

// optional .Colossus.Protobuf.HealthInfo packetrate = 6;
inline bool Health::_internal_has_packetrate() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || packetrate_ != nullptr);
  return value;
}
inline bool Health::has_packetrate() const {
  return _internal_has_packetrate();
}
inline const ::Colossus::Protobuf::HealthInfo& Health::_internal_packetrate() const {
  const ::Colossus::Protobuf::HealthInfo* p = packetrate_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Colossus::Protobuf::HealthInfo*>(
      &::Colossus::Protobuf::_HealthInfo_default_instance_);
}
inline const ::Colossus::Protobuf::HealthInfo& Health::packetrate() const {
  // @@protoc_insertion_point(field_get:Colossus.Protobuf.Health.packetrate)
  return _internal_packetrate();
}
inline void Health::unsafe_arena_set_allocated_packetrate(
    ::Colossus::Protobuf::HealthInfo* packetrate) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(packetrate_);
  }
  packetrate_ = packetrate;
  if (packetrate) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Colossus.Protobuf.Health.packetrate)
}
inline ::Colossus::Protobuf::HealthInfo* Health::release_packetrate() {
  auto temp = unsafe_arena_release_packetrate();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Colossus::Protobuf::HealthInfo* Health::unsafe_arena_release_packetrate() {
  // @@protoc_insertion_point(field_release:Colossus.Protobuf.Health.packetrate)
  _has_bits_[0] &= ~0x00000040u;
  ::Colossus::Protobuf::HealthInfo* temp = packetrate_;
  packetrate_ = nullptr;
  return temp;
}
inline ::Colossus::Protobuf::HealthInfo* Health::_internal_mutable_packetrate() {
  _has_bits_[0] |= 0x00000040u;
  if (packetrate_ == nullptr) {
    auto* p = CreateMaybeMessage<::Colossus::Protobuf::HealthInfo>(GetArena());
    packetrate_ = p;
  }
  return packetrate_;
}
inline ::Colossus::Protobuf::HealthInfo* Health::mutable_packetrate() {
  // @@protoc_insertion_point(field_mutable:Colossus.Protobuf.Health.packetrate)
  return _internal_mutable_packetrate();
}
inline void Health::set_allocated_packetrate(::Colossus::Protobuf::HealthInfo* packetrate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(packetrate_);
  }
  if (packetrate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(packetrate)->GetArena();
    if (message_arena != submessage_arena) {
      packetrate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, packetrate, submessage_arena);
    }
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  packetrate_ = packetrate;
  // @@protoc_insertion_point(field_set_allocated:Colossus.Protobuf.Health.packetrate)
}

// optional .Colossus.Protobuf.HealthInfo rfhealthcheck = 7;
inline bool Health::_internal_has_rfhealthcheck() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || rfhealthcheck_ != nullptr);
  return value;
}
inline bool Health::has_rfhealthcheck() const {
  return _internal_has_rfhealthcheck();
}
inline const ::Colossus::Protobuf::HealthInfo& Health::_internal_rfhealthcheck() const {
  const ::Colossus::Protobuf::HealthInfo* p = rfhealthcheck_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Colossus::Protobuf::HealthInfo*>(
      &::Colossus::Protobuf::_HealthInfo_default_instance_);
}
inline const ::Colossus::Protobuf::HealthInfo& Health::rfhealthcheck() const {
  // @@protoc_insertion_point(field_get:Colossus.Protobuf.Health.rfhealthcheck)
  return _internal_rfhealthcheck();
}
inline void Health::unsafe_arena_set_allocated_rfhealthcheck(
    ::Colossus::Protobuf::HealthInfo* rfhealthcheck) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rfhealthcheck_);
  }
  rfhealthcheck_ = rfhealthcheck;
  if (rfhealthcheck) {
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Colossus.Protobuf.Health.rfhealthcheck)
}
inline ::Colossus::Protobuf::HealthInfo* Health::release_rfhealthcheck() {
  auto temp = unsafe_arena_release_rfhealthcheck();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Colossus::Protobuf::HealthInfo* Health::unsafe_arena_release_rfhealthcheck() {
  // @@protoc_insertion_point(field_release:Colossus.Protobuf.Health.rfhealthcheck)
  _has_bits_[0] &= ~0x00000080u;
  ::Colossus::Protobuf::HealthInfo* temp = rfhealthcheck_;
  rfhealthcheck_ = nullptr;
  return temp;
}
inline ::Colossus::Protobuf::HealthInfo* Health::_internal_mutable_rfhealthcheck() {
  _has_bits_[0] |= 0x00000080u;
  if (rfhealthcheck_ == nullptr) {
    auto* p = CreateMaybeMessage<::Colossus::Protobuf::HealthInfo>(GetArena());
    rfhealthcheck_ = p;
  }
  return rfhealthcheck_;
}
inline ::Colossus::Protobuf::HealthInfo* Health::mutable_rfhealthcheck() {
  // @@protoc_insertion_point(field_mutable:Colossus.Protobuf.Health.rfhealthcheck)
  return _internal_mutable_rfhealthcheck();
}
inline void Health::set_allocated_rfhealthcheck(::Colossus::Protobuf::HealthInfo* rfhealthcheck) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(rfhealthcheck_);
  }
  if (rfhealthcheck) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rfhealthcheck)->GetArena();
    if (message_arena != submessage_arena) {
      rfhealthcheck = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rfhealthcheck, submessage_arena);
    }
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  rfhealthcheck_ = rfhealthcheck;
  // @@protoc_insertion_point(field_set_allocated:Colossus.Protobuf.Health.rfhealthcheck)
}

// optional bool transmitting = 8;
inline bool Health::_internal_has_transmitting() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool Health::has_transmitting() const {
  return _internal_has_transmitting();
}
inline void Health::clear_transmitting() {
  transmitting_ = false;
  _has_bits_[0] &= ~0x00000400u;
}
inline bool Health::_internal_transmitting() const {
  return transmitting_;
}
inline bool Health::transmitting() const {
  // @@protoc_insertion_point(field_get:Colossus.Protobuf.Health.transmitting)
  return _internal_transmitting();
}
inline void Health::_internal_set_transmitting(bool value) {
  _has_bits_[0] |= 0x00000400u;
  transmitting_ = value;
}
inline void Health::set_transmitting(bool value) {
  _internal_set_transmitting(value);
  // @@protoc_insertion_point(field_set:Colossus.Protobuf.Health.transmitting)
}

// optional uint32 expectedrotation = 9;
inline bool Health::_internal_has_expectedrotation() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool Health::has_expectedrotation() const {
  return _internal_has_expectedrotation();
}
inline void Health::clear_expectedrotation() {
  expectedrotation_ = 0u;
  _has_bits_[0] &= ~0x00000800u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Health::_internal_expectedrotation() const {
  return expectedrotation_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Health::expectedrotation() const {
  // @@protoc_insertion_point(field_get:Colossus.Protobuf.Health.expectedrotation)
  return _internal_expectedrotation();
}
inline void Health::_internal_set_expectedrotation(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000800u;
  expectedrotation_ = value;
}
inline void Health::set_expectedrotation(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_expectedrotation(value);
  // @@protoc_insertion_point(field_set:Colossus.Protobuf.Health.expectedrotation)
}

// optional uint32 expectedpacketrate = 10;
inline bool Health::_internal_has_expectedpacketrate() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool Health::has_expectedpacketrate() const {
  return _internal_has_expectedpacketrate();
}
inline void Health::clear_expectedpacketrate() {
  expectedpacketrate_ = 0u;
  _has_bits_[0] &= ~0x00001000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Health::_internal_expectedpacketrate() const {
  return expectedpacketrate_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Health::expectedpacketrate() const {
  // @@protoc_insertion_point(field_get:Colossus.Protobuf.Health.expectedpacketrate)
  return _internal_expectedpacketrate();
}
inline void Health::_internal_set_expectedpacketrate(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00001000u;
  expectedpacketrate_ = value;
}
inline void Health::set_expectedpacketrate(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_expectedpacketrate(value);
  // @@protoc_insertion_point(field_set:Colossus.Protobuf.Health.expectedpacketrate)
}

// optional string macaddress = 11;
inline bool Health::_internal_has_macaddress() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Health::has_macaddress() const {
  return _internal_has_macaddress();
}
inline void Health::clear_macaddress() {
  macaddress_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Health::macaddress() const {
  // @@protoc_insertion_point(field_get:Colossus.Protobuf.Health.macaddress)
  return _internal_macaddress();
}
inline void Health::set_macaddress(const std::string& value) {
  _internal_set_macaddress(value);
  // @@protoc_insertion_point(field_set:Colossus.Protobuf.Health.macaddress)
}
inline std::string* Health::mutable_macaddress() {
  // @@protoc_insertion_point(field_mutable:Colossus.Protobuf.Health.macaddress)
  return _internal_mutable_macaddress();
}
inline const std::string& Health::_internal_macaddress() const {
  return macaddress_.Get();
}
inline void Health::_internal_set_macaddress(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  macaddress_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Health::set_macaddress(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  macaddress_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Colossus.Protobuf.Health.macaddress)
}
inline void Health::set_macaddress(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  macaddress_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Colossus.Protobuf.Health.macaddress)
}
inline void Health::set_macaddress(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  macaddress_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Colossus.Protobuf.Health.macaddress)
}
inline std::string* Health::_internal_mutable_macaddress() {
  _has_bits_[0] |= 0x00000001u;
  return macaddress_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Health::release_macaddress() {
  // @@protoc_insertion_point(field_release:Colossus.Protobuf.Health.macaddress)
  if (!_internal_has_macaddress()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return macaddress_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Health::set_allocated_macaddress(std::string* macaddress) {
  if (macaddress != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  macaddress_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), macaddress,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Colossus.Protobuf.Health.macaddress)
}
inline std::string* Health::unsafe_arena_release_macaddress() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Colossus.Protobuf.Health.macaddress)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return macaddress_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Health::unsafe_arena_set_allocated_macaddress(
    std::string* macaddress) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (macaddress != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  macaddress_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      macaddress, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Colossus.Protobuf.Health.macaddress)
}

// optional int32 encodererrorcount = 12;
inline bool Health::_internal_has_encodererrorcount() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool Health::has_encodererrorcount() const {
  return _internal_has_encodererrorcount();
}
inline void Health::clear_encodererrorcount() {
  encodererrorcount_ = 0;
  _has_bits_[0] &= ~0x00002000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Health::_internal_encodererrorcount() const {
  return encodererrorcount_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Health::encodererrorcount() const {
  // @@protoc_insertion_point(field_get:Colossus.Protobuf.Health.encodererrorcount)
  return _internal_encodererrorcount();
}
inline void Health::_internal_set_encodererrorcount(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00002000u;
  encodererrorcount_ = value;
}
inline void Health::set_encodererrorcount(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_encodererrorcount(value);
  // @@protoc_insertion_point(field_set:Colossus.Protobuf.Health.encodererrorcount)
}

// optional float systemuptime = 13;
inline bool Health::_internal_has_systemuptime() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool Health::has_systemuptime() const {
  return _internal_has_systemuptime();
}
inline void Health::clear_systemuptime() {
  systemuptime_ = 0;
  _has_bits_[0] &= ~0x00008000u;
}
inline float Health::_internal_systemuptime() const {
  return systemuptime_;
}
inline float Health::systemuptime() const {
  // @@protoc_insertion_point(field_get:Colossus.Protobuf.Health.systemuptime)
  return _internal_systemuptime();
}
inline void Health::_internal_set_systemuptime(float value) {
  _has_bits_[0] |= 0x00008000u;
  systemuptime_ = value;
}
inline void Health::set_systemuptime(float value) {
  _internal_set_systemuptime(value);
  // @@protoc_insertion_point(field_set:Colossus.Protobuf.Health.systemuptime)
}

// optional .Colossus.Protobuf.HealthInfo motorcurrent = 14;
inline bool Health::_internal_has_motorcurrent() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  PROTOBUF_ASSUME(!value || motorcurrent_ != nullptr);
  return value;
}
inline bool Health::has_motorcurrent() const {
  return _internal_has_motorcurrent();
}
inline const ::Colossus::Protobuf::HealthInfo& Health::_internal_motorcurrent() const {
  const ::Colossus::Protobuf::HealthInfo* p = motorcurrent_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Colossus::Protobuf::HealthInfo*>(
      &::Colossus::Protobuf::_HealthInfo_default_instance_);
}
inline const ::Colossus::Protobuf::HealthInfo& Health::motorcurrent() const {
  // @@protoc_insertion_point(field_get:Colossus.Protobuf.Health.motorcurrent)
  return _internal_motorcurrent();
}
inline void Health::unsafe_arena_set_allocated_motorcurrent(
    ::Colossus::Protobuf::HealthInfo* motorcurrent) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(motorcurrent_);
  }
  motorcurrent_ = motorcurrent;
  if (motorcurrent) {
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Colossus.Protobuf.Health.motorcurrent)
}
inline ::Colossus::Protobuf::HealthInfo* Health::release_motorcurrent() {
  auto temp = unsafe_arena_release_motorcurrent();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Colossus::Protobuf::HealthInfo* Health::unsafe_arena_release_motorcurrent() {
  // @@protoc_insertion_point(field_release:Colossus.Protobuf.Health.motorcurrent)
  _has_bits_[0] &= ~0x00000100u;
  ::Colossus::Protobuf::HealthInfo* temp = motorcurrent_;
  motorcurrent_ = nullptr;
  return temp;
}
inline ::Colossus::Protobuf::HealthInfo* Health::_internal_mutable_motorcurrent() {
  _has_bits_[0] |= 0x00000100u;
  if (motorcurrent_ == nullptr) {
    auto* p = CreateMaybeMessage<::Colossus::Protobuf::HealthInfo>(GetArena());
    motorcurrent_ = p;
  }
  return motorcurrent_;
}
inline ::Colossus::Protobuf::HealthInfo* Health::mutable_motorcurrent() {
  // @@protoc_insertion_point(field_mutable:Colossus.Protobuf.Health.motorcurrent)
  return _internal_mutable_motorcurrent();
}
inline void Health::set_allocated_motorcurrent(::Colossus::Protobuf::HealthInfo* motorcurrent) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(motorcurrent_);
  }
  if (motorcurrent) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(motorcurrent)->GetArena();
    if (message_arena != submessage_arena) {
      motorcurrent = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, motorcurrent, submessage_arena);
    }
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  motorcurrent_ = motorcurrent;
  // @@protoc_insertion_point(field_set_allocated:Colossus.Protobuf.Health.motorcurrent)
}

// optional uint64 softwareuptime = 15;
inline bool Health::_internal_has_softwareuptime() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool Health::has_softwareuptime() const {
  return _internal_has_softwareuptime();
}
inline void Health::clear_softwareuptime() {
  softwareuptime_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00004000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Health::_internal_softwareuptime() const {
  return softwareuptime_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Health::softwareuptime() const {
  // @@protoc_insertion_point(field_get:Colossus.Protobuf.Health.softwareuptime)
  return _internal_softwareuptime();
}
inline void Health::_internal_set_softwareuptime(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00004000u;
  softwareuptime_ = value;
}
inline void Health::set_softwareuptime(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_softwareuptime(value);
  // @@protoc_insertion_point(field_set:Colossus.Protobuf.Health.softwareuptime)
}

// optional uint64 totaluptime = 16;
inline bool Health::_internal_has_totaluptime() const {
  bool value = (_has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool Health::has_totaluptime() const {
  return _internal_has_totaluptime();
}
inline void Health::clear_totaluptime() {
  totaluptime_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00020000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Health::_internal_totaluptime() const {
  return totaluptime_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Health::totaluptime() const {
  // @@protoc_insertion_point(field_get:Colossus.Protobuf.Health.totaluptime)
  return _internal_totaluptime();
}
inline void Health::_internal_set_totaluptime(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00020000u;
  totaluptime_ = value;
}
inline void Health::set_totaluptime(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_totaluptime(value);
  // @@protoc_insertion_point(field_set:Colossus.Protobuf.Health.totaluptime)
}

// optional .Colossus.Protobuf.NetworkInfo networkstate = 17;
inline bool Health::_internal_has_networkstate() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  PROTOBUF_ASSUME(!value || networkstate_ != nullptr);
  return value;
}
inline bool Health::has_networkstate() const {
  return _internal_has_networkstate();
}
inline const ::Colossus::Protobuf::NetworkInfo& Health::_internal_networkstate() const {
  const ::Colossus::Protobuf::NetworkInfo* p = networkstate_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Colossus::Protobuf::NetworkInfo*>(
      &::Colossus::Protobuf::_NetworkInfo_default_instance_);
}
inline const ::Colossus::Protobuf::NetworkInfo& Health::networkstate() const {
  // @@protoc_insertion_point(field_get:Colossus.Protobuf.Health.networkstate)
  return _internal_networkstate();
}
inline void Health::unsafe_arena_set_allocated_networkstate(
    ::Colossus::Protobuf::NetworkInfo* networkstate) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(networkstate_);
  }
  networkstate_ = networkstate;
  if (networkstate) {
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Colossus.Protobuf.Health.networkstate)
}
inline ::Colossus::Protobuf::NetworkInfo* Health::release_networkstate() {
  auto temp = unsafe_arena_release_networkstate();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Colossus::Protobuf::NetworkInfo* Health::unsafe_arena_release_networkstate() {
  // @@protoc_insertion_point(field_release:Colossus.Protobuf.Health.networkstate)
  _has_bits_[0] &= ~0x00000200u;
  ::Colossus::Protobuf::NetworkInfo* temp = networkstate_;
  networkstate_ = nullptr;
  return temp;
}
inline ::Colossus::Protobuf::NetworkInfo* Health::_internal_mutable_networkstate() {
  _has_bits_[0] |= 0x00000200u;
  if (networkstate_ == nullptr) {
    auto* p = CreateMaybeMessage<::Colossus::Protobuf::NetworkInfo>(GetArena());
    networkstate_ = p;
  }
  return networkstate_;
}
inline ::Colossus::Protobuf::NetworkInfo* Health::mutable_networkstate() {
  // @@protoc_insertion_point(field_mutable:Colossus.Protobuf.Health.networkstate)
  return _internal_mutable_networkstate();
}
inline void Health::set_allocated_networkstate(::Colossus::Protobuf::NetworkInfo* networkstate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(networkstate_);
  }
  if (networkstate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(networkstate)->GetArena();
    if (message_arena != submessage_arena) {
      networkstate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, networkstate, submessage_arena);
    }
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  networkstate_ = networkstate;
  // @@protoc_insertion_point(field_set_allocated:Colossus.Protobuf.Health.networkstate)
}

// optional int32 maxclientsallowed = 18;
inline bool Health::_internal_has_maxclientsallowed() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool Health::has_maxclientsallowed() const {
  return _internal_has_maxclientsallowed();
}
inline void Health::clear_maxclientsallowed() {
  maxclientsallowed_ = 0;
  _has_bits_[0] &= ~0x00010000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Health::_internal_maxclientsallowed() const {
  return maxclientsallowed_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Health::maxclientsallowed() const {
  // @@protoc_insertion_point(field_get:Colossus.Protobuf.Health.maxclientsallowed)
  return _internal_maxclientsallowed();
}
inline void Health::_internal_set_maxclientsallowed(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00010000u;
  maxclientsallowed_ = value;
}
inline void Health::set_maxclientsallowed(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_maxclientsallowed(value);
  // @@protoc_insertion_point(field_set:Colossus.Protobuf.Health.maxclientsallowed)
}

// repeated string ipclients = 19;
inline int Health::_internal_ipclients_size() const {
  return ipclients_.size();
}
inline int Health::ipclients_size() const {
  return _internal_ipclients_size();
}
inline void Health::clear_ipclients() {
  ipclients_.Clear();
}
inline std::string* Health::add_ipclients() {
  // @@protoc_insertion_point(field_add_mutable:Colossus.Protobuf.Health.ipclients)
  return _internal_add_ipclients();
}
inline const std::string& Health::_internal_ipclients(int index) const {
  return ipclients_.Get(index);
}
inline const std::string& Health::ipclients(int index) const {
  // @@protoc_insertion_point(field_get:Colossus.Protobuf.Health.ipclients)
  return _internal_ipclients(index);
}
inline std::string* Health::mutable_ipclients(int index) {
  // @@protoc_insertion_point(field_mutable:Colossus.Protobuf.Health.ipclients)
  return ipclients_.Mutable(index);
}
inline void Health::set_ipclients(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:Colossus.Protobuf.Health.ipclients)
  ipclients_.Mutable(index)->assign(value);
}
inline void Health::set_ipclients(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:Colossus.Protobuf.Health.ipclients)
  ipclients_.Mutable(index)->assign(std::move(value));
}
inline void Health::set_ipclients(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  ipclients_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:Colossus.Protobuf.Health.ipclients)
}
inline void Health::set_ipclients(int index, const char* value, size_t size) {
  ipclients_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:Colossus.Protobuf.Health.ipclients)
}
inline std::string* Health::_internal_add_ipclients() {
  return ipclients_.Add();
}
inline void Health::add_ipclients(const std::string& value) {
  ipclients_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:Colossus.Protobuf.Health.ipclients)
}
inline void Health::add_ipclients(std::string&& value) {
  ipclients_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:Colossus.Protobuf.Health.ipclients)
}
inline void Health::add_ipclients(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  ipclients_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:Colossus.Protobuf.Health.ipclients)
}
inline void Health::add_ipclients(const char* value, size_t size) {
  ipclients_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:Colossus.Protobuf.Health.ipclients)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Health::ipclients() const {
  // @@protoc_insertion_point(field_list:Colossus.Protobuf.Health.ipclients)
  return ipclients_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Health::mutable_ipclients() {
  // @@protoc_insertion_point(field_mutable_list:Colossus.Protobuf.Health.ipclients)
  return &ipclients_;
}

// optional uint32 expectedrxpacketrate = 20;
inline bool Health::_internal_has_expectedrxpacketrate() const {
  bool value = (_has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool Health::has_expectedrxpacketrate() const {
  return _internal_has_expectedrxpacketrate();
}
inline void Health::clear_expectedrxpacketrate() {
  expectedrxpacketrate_ = 0u;
  _has_bits_[0] &= ~0x00040000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Health::_internal_expectedrxpacketrate() const {
  return expectedrxpacketrate_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Health::expectedrxpacketrate() const {
  // @@protoc_insertion_point(field_get:Colossus.Protobuf.Health.expectedrxpacketrate)
  return _internal_expectedrxpacketrate();
}
inline void Health::_internal_set_expectedrxpacketrate(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00040000u;
  expectedrxpacketrate_ = value;
}
inline void Health::set_expectedrxpacketrate(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_expectedrxpacketrate(value);
  // @@protoc_insertion_point(field_set:Colossus.Protobuf.Health.expectedrxpacketrate)
}

// optional uint32 uplinkerrors = 21;
inline bool Health::_internal_has_uplinkerrors() const {
  bool value = (_has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline bool Health::has_uplinkerrors() const {
  return _internal_has_uplinkerrors();
}
inline void Health::clear_uplinkerrors() {
  uplinkerrors_ = 0u;
  _has_bits_[0] &= ~0x00080000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Health::_internal_uplinkerrors() const {
  return uplinkerrors_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Health::uplinkerrors() const {
  // @@protoc_insertion_point(field_get:Colossus.Protobuf.Health.uplinkerrors)
  return _internal_uplinkerrors();
}
inline void Health::_internal_set_uplinkerrors(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00080000u;
  uplinkerrors_ = value;
}
inline void Health::set_uplinkerrors(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_uplinkerrors(value);
  // @@protoc_insertion_point(field_set:Colossus.Protobuf.Health.uplinkerrors)
}

// optional uint32 downlinkerrors = 22;
inline bool Health::_internal_has_downlinkerrors() const {
  bool value = (_has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline bool Health::has_downlinkerrors() const {
  return _internal_has_downlinkerrors();
}
inline void Health::clear_downlinkerrors() {
  downlinkerrors_ = 0u;
  _has_bits_[0] &= ~0x00100000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Health::_internal_downlinkerrors() const {
  return downlinkerrors_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Health::downlinkerrors() const {
  // @@protoc_insertion_point(field_get:Colossus.Protobuf.Health.downlinkerrors)
  return _internal_downlinkerrors();
}
inline void Health::_internal_set_downlinkerrors(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00100000u;
  downlinkerrors_ = value;
}
inline void Health::set_downlinkerrors(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_downlinkerrors(value);
  // @@protoc_insertion_point(field_set:Colossus.Protobuf.Health.downlinkerrors)
}

// optional uint32 uplinkmissed = 23;
inline bool Health::_internal_has_uplinkmissed() const {
  bool value = (_has_bits_[0] & 0x00200000u) != 0;
  return value;
}
inline bool Health::has_uplinkmissed() const {
  return _internal_has_uplinkmissed();
}
inline void Health::clear_uplinkmissed() {
  uplinkmissed_ = 0u;
  _has_bits_[0] &= ~0x00200000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Health::_internal_uplinkmissed() const {
  return uplinkmissed_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Health::uplinkmissed() const {
  // @@protoc_insertion_point(field_get:Colossus.Protobuf.Health.uplinkmissed)
  return _internal_uplinkmissed();
}
inline void Health::_internal_set_uplinkmissed(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00200000u;
  uplinkmissed_ = value;
}
inline void Health::set_uplinkmissed(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_uplinkmissed(value);
  // @@protoc_insertion_point(field_set:Colossus.Protobuf.Health.uplinkmissed)
}

// optional uint32 downlinkmissed = 24;
inline bool Health::_internal_has_downlinkmissed() const {
  bool value = (_has_bits_[0] & 0x00400000u) != 0;
  return value;
}
inline bool Health::has_downlinkmissed() const {
  return _internal_has_downlinkmissed();
}
inline void Health::clear_downlinkmissed() {
  downlinkmissed_ = 0u;
  _has_bits_[0] &= ~0x00400000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Health::_internal_downlinkmissed() const {
  return downlinkmissed_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Health::downlinkmissed() const {
  // @@protoc_insertion_point(field_get:Colossus.Protobuf.Health.downlinkmissed)
  return _internal_downlinkmissed();
}
inline void Health::_internal_set_downlinkmissed(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00400000u;
  downlinkmissed_ = value;
}
inline void Health::set_downlinkmissed(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_downlinkmissed(value);
  // @@protoc_insertion_point(field_set:Colossus.Protobuf.Health.downlinkmissed)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace Protobuf
}  // namespace Colossus

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_health_2eproto
