// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: healthinfo.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_healthinfo_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_healthinfo_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_healthinfo_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_healthinfo_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_healthinfo_2eproto;
namespace Colossus {
namespace Protobuf {
class HealthInfo;
class HealthInfoDefaultTypeInternal;
extern HealthInfoDefaultTypeInternal _HealthInfo_default_instance_;
}  // namespace Protobuf
}  // namespace Colossus
PROTOBUF_NAMESPACE_OPEN
template<> ::Colossus::Protobuf::HealthInfo* Arena::CreateMaybeMessage<::Colossus::Protobuf::HealthInfo>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Colossus {
namespace Protobuf {

enum HealthStatus : int {
  UNHEALTHY = 0,
  WARNING = 1,
  HEALTHY = 2,
  UNKNOWN = 3
};
bool HealthStatus_IsValid(int value);
constexpr HealthStatus HealthStatus_MIN = UNHEALTHY;
constexpr HealthStatus HealthStatus_MAX = UNKNOWN;
constexpr int HealthStatus_ARRAYSIZE = HealthStatus_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* HealthStatus_descriptor();
template<typename T>
inline const std::string& HealthStatus_Name(T enum_t_value) {
  static_assert(::std::is_same<T, HealthStatus>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function HealthStatus_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    HealthStatus_descriptor(), enum_t_value);
}
inline bool HealthStatus_Parse(
    const std::string& name, HealthStatus* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<HealthStatus>(
    HealthStatus_descriptor(), name, value);
}
// ===================================================================

class HealthInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Colossus.Protobuf.HealthInfo) */ {
 public:
  inline HealthInfo() : HealthInfo(nullptr) {};
  virtual ~HealthInfo();

  HealthInfo(const HealthInfo& from);
  HealthInfo(HealthInfo&& from) noexcept
    : HealthInfo() {
    *this = ::std::move(from);
  }

  inline HealthInfo& operator=(const HealthInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline HealthInfo& operator=(HealthInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const HealthInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HealthInfo* internal_default_instance() {
    return reinterpret_cast<const HealthInfo*>(
               &_HealthInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(HealthInfo& a, HealthInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(HealthInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HealthInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HealthInfo* New() const final {
    return CreateMaybeMessage<HealthInfo>(nullptr);
  }

  HealthInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HealthInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HealthInfo& from);
  void MergeFrom(const HealthInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HealthInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Colossus.Protobuf.HealthInfo";
  }
  protected:
  explicit HealthInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_healthinfo_2eproto);
    return ::descriptor_table_healthinfo_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 3,
    kDeltaFieldNumber = 4,
    kMinvalueFieldNumber = 1,
    kMaxvalueFieldNumber = 2,
    kStatusFieldNumber = 5,
    kWarnallowanceFieldNumber = 6,
    kAlarmallowanceFieldNumber = 7,
    kClearallowanceFieldNumber = 8,
  };
  // optional float value = 3 [default = 0];
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  float value() const;
  void set_value(float value);
  private:
  float _internal_value() const;
  void _internal_set_value(float value);
  public:

  // optional float delta = 4 [default = 0];
  bool has_delta() const;
  private:
  bool _internal_has_delta() const;
  public:
  void clear_delta();
  float delta() const;
  void set_delta(float value);
  private:
  float _internal_delta() const;
  void _internal_set_delta(float value);
  public:

  // optional float minvalue = 1 [default = -10];
  bool has_minvalue() const;
  private:
  bool _internal_has_minvalue() const;
  public:
  void clear_minvalue();
  float minvalue() const;
  void set_minvalue(float value);
  private:
  float _internal_minvalue() const;
  void _internal_set_minvalue(float value);
  public:

  // optional float maxvalue = 2 [default = 10];
  bool has_maxvalue() const;
  private:
  bool _internal_has_maxvalue() const;
  public:
  void clear_maxvalue();
  float maxvalue() const;
  void set_maxvalue(float value);
  private:
  float _internal_maxvalue() const;
  void _internal_set_maxvalue(float value);
  public:

  // optional .Colossus.Protobuf.HealthStatus status = 5 [default = UNKNOWN];
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  ::Colossus::Protobuf::HealthStatus status() const;
  void set_status(::Colossus::Protobuf::HealthStatus value);
  private:
  ::Colossus::Protobuf::HealthStatus _internal_status() const;
  void _internal_set_status(::Colossus::Protobuf::HealthStatus value);
  public:

  // optional int32 warnallowance = 6 [default = 12];
  bool has_warnallowance() const;
  private:
  bool _internal_has_warnallowance() const;
  public:
  void clear_warnallowance();
  ::PROTOBUF_NAMESPACE_ID::int32 warnallowance() const;
  void set_warnallowance(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_warnallowance() const;
  void _internal_set_warnallowance(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 alarmallowance = 7 [default = 20];
  bool has_alarmallowance() const;
  private:
  bool _internal_has_alarmallowance() const;
  public:
  void clear_alarmallowance();
  ::PROTOBUF_NAMESPACE_ID::int32 alarmallowance() const;
  void set_alarmallowance(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_alarmallowance() const;
  void _internal_set_alarmallowance(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 clearallowance = 8 [default = 1];
  bool has_clearallowance() const;
  private:
  bool _internal_has_clearallowance() const;
  public:
  void clear_clearallowance();
  ::PROTOBUF_NAMESPACE_ID::int32 clearallowance() const;
  void set_clearallowance(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_clearallowance() const;
  void _internal_set_clearallowance(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Colossus.Protobuf.HealthInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  float value_;
  float delta_;
  float minvalue_;
  float maxvalue_;
  int status_;
  ::PROTOBUF_NAMESPACE_ID::int32 warnallowance_;
  ::PROTOBUF_NAMESPACE_ID::int32 alarmallowance_;
  ::PROTOBUF_NAMESPACE_ID::int32 clearallowance_;
  friend struct ::TableStruct_healthinfo_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// HealthInfo

// optional float minvalue = 1 [default = -10];
inline bool HealthInfo::_internal_has_minvalue() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool HealthInfo::has_minvalue() const {
  return _internal_has_minvalue();
}
inline void HealthInfo::clear_minvalue() {
  minvalue_ = -10;
  _has_bits_[0] &= ~0x00000004u;
}
inline float HealthInfo::_internal_minvalue() const {
  return minvalue_;
}
inline float HealthInfo::minvalue() const {
  // @@protoc_insertion_point(field_get:Colossus.Protobuf.HealthInfo.minvalue)
  return _internal_minvalue();
}
inline void HealthInfo::_internal_set_minvalue(float value) {
  _has_bits_[0] |= 0x00000004u;
  minvalue_ = value;
}
inline void HealthInfo::set_minvalue(float value) {
  _internal_set_minvalue(value);
  // @@protoc_insertion_point(field_set:Colossus.Protobuf.HealthInfo.minvalue)
}

// optional float maxvalue = 2 [default = 10];
inline bool HealthInfo::_internal_has_maxvalue() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool HealthInfo::has_maxvalue() const {
  return _internal_has_maxvalue();
}
inline void HealthInfo::clear_maxvalue() {
  maxvalue_ = 10;
  _has_bits_[0] &= ~0x00000008u;
}
inline float HealthInfo::_internal_maxvalue() const {
  return maxvalue_;
}
inline float HealthInfo::maxvalue() const {
  // @@protoc_insertion_point(field_get:Colossus.Protobuf.HealthInfo.maxvalue)
  return _internal_maxvalue();
}
inline void HealthInfo::_internal_set_maxvalue(float value) {
  _has_bits_[0] |= 0x00000008u;
  maxvalue_ = value;
}
inline void HealthInfo::set_maxvalue(float value) {
  _internal_set_maxvalue(value);
  // @@protoc_insertion_point(field_set:Colossus.Protobuf.HealthInfo.maxvalue)
}

// optional float value = 3 [default = 0];
inline bool HealthInfo::_internal_has_value() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool HealthInfo::has_value() const {
  return _internal_has_value();
}
inline void HealthInfo::clear_value() {
  value_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline float HealthInfo::_internal_value() const {
  return value_;
}
inline float HealthInfo::value() const {
  // @@protoc_insertion_point(field_get:Colossus.Protobuf.HealthInfo.value)
  return _internal_value();
}
inline void HealthInfo::_internal_set_value(float value) {
  _has_bits_[0] |= 0x00000001u;
  value_ = value;
}
inline void HealthInfo::set_value(float value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:Colossus.Protobuf.HealthInfo.value)
}

// optional float delta = 4 [default = 0];
inline bool HealthInfo::_internal_has_delta() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool HealthInfo::has_delta() const {
  return _internal_has_delta();
}
inline void HealthInfo::clear_delta() {
  delta_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float HealthInfo::_internal_delta() const {
  return delta_;
}
inline float HealthInfo::delta() const {
  // @@protoc_insertion_point(field_get:Colossus.Protobuf.HealthInfo.delta)
  return _internal_delta();
}
inline void HealthInfo::_internal_set_delta(float value) {
  _has_bits_[0] |= 0x00000002u;
  delta_ = value;
}
inline void HealthInfo::set_delta(float value) {
  _internal_set_delta(value);
  // @@protoc_insertion_point(field_set:Colossus.Protobuf.HealthInfo.delta)
}

// optional .Colossus.Protobuf.HealthStatus status = 5 [default = UNKNOWN];
inline bool HealthInfo::_internal_has_status() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool HealthInfo::has_status() const {
  return _internal_has_status();
}
inline void HealthInfo::clear_status() {
  status_ = 3;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::Colossus::Protobuf::HealthStatus HealthInfo::_internal_status() const {
  return static_cast< ::Colossus::Protobuf::HealthStatus >(status_);
}
inline ::Colossus::Protobuf::HealthStatus HealthInfo::status() const {
  // @@protoc_insertion_point(field_get:Colossus.Protobuf.HealthInfo.status)
  return _internal_status();
}
inline void HealthInfo::_internal_set_status(::Colossus::Protobuf::HealthStatus value) {
  assert(::Colossus::Protobuf::HealthStatus_IsValid(value));
  _has_bits_[0] |= 0x00000010u;
  status_ = value;
}
inline void HealthInfo::set_status(::Colossus::Protobuf::HealthStatus value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:Colossus.Protobuf.HealthInfo.status)
}

// optional int32 warnallowance = 6 [default = 12];
inline bool HealthInfo::_internal_has_warnallowance() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool HealthInfo::has_warnallowance() const {
  return _internal_has_warnallowance();
}
inline void HealthInfo::clear_warnallowance() {
  warnallowance_ = 12;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 HealthInfo::_internal_warnallowance() const {
  return warnallowance_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 HealthInfo::warnallowance() const {
  // @@protoc_insertion_point(field_get:Colossus.Protobuf.HealthInfo.warnallowance)
  return _internal_warnallowance();
}
inline void HealthInfo::_internal_set_warnallowance(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  warnallowance_ = value;
}
inline void HealthInfo::set_warnallowance(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_warnallowance(value);
  // @@protoc_insertion_point(field_set:Colossus.Protobuf.HealthInfo.warnallowance)
}

// optional int32 alarmallowance = 7 [default = 20];
inline bool HealthInfo::_internal_has_alarmallowance() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool HealthInfo::has_alarmallowance() const {
  return _internal_has_alarmallowance();
}
inline void HealthInfo::clear_alarmallowance() {
  alarmallowance_ = 20;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 HealthInfo::_internal_alarmallowance() const {
  return alarmallowance_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 HealthInfo::alarmallowance() const {
  // @@protoc_insertion_point(field_get:Colossus.Protobuf.HealthInfo.alarmallowance)
  return _internal_alarmallowance();
}
inline void HealthInfo::_internal_set_alarmallowance(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000040u;
  alarmallowance_ = value;
}
inline void HealthInfo::set_alarmallowance(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_alarmallowance(value);
  // @@protoc_insertion_point(field_set:Colossus.Protobuf.HealthInfo.alarmallowance)
}

// optional int32 clearallowance = 8 [default = 1];
inline bool HealthInfo::_internal_has_clearallowance() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool HealthInfo::has_clearallowance() const {
  return _internal_has_clearallowance();
}
inline void HealthInfo::clear_clearallowance() {
  clearallowance_ = 1;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 HealthInfo::_internal_clearallowance() const {
  return clearallowance_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 HealthInfo::clearallowance() const {
  // @@protoc_insertion_point(field_get:Colossus.Protobuf.HealthInfo.clearallowance)
  return _internal_clearallowance();
}
inline void HealthInfo::_internal_set_clearallowance(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000080u;
  clearallowance_ = value;
}
inline void HealthInfo::set_clearallowance(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_clearallowance(value);
  // @@protoc_insertion_point(field_set:Colossus.Protobuf.HealthInfo.clearallowance)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace Protobuf
}  // namespace Colossus

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::Colossus::Protobuf::HealthStatus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Colossus::Protobuf::HealthStatus>() {
  return ::Colossus::Protobuf::HealthStatus_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_healthinfo_2eproto
