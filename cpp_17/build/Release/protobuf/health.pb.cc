// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: health.proto

#include "health.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_healthinfo_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HealthInfo_healthinfo_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_networkinfo_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NetworkInfo_networkinfo_2eproto;
namespace Colossus {
namespace Protobuf {
class HealthDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Health> _instance;
} _Health_default_instance_;
}  // namespace Protobuf
}  // namespace Colossus
static void InitDefaultsscc_info_Health_health_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Colossus::Protobuf::_Health_default_instance_;
    new (ptr) ::Colossus::Protobuf::Health();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Colossus::Protobuf::Health::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Health_health_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_Health_health_2eproto}, {
      &scc_info_HealthInfo_healthinfo_2eproto.base,
      &scc_info_NetworkInfo_networkinfo_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_health_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_health_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_health_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_health_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::Colossus::Protobuf::Health, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Colossus::Protobuf::Health, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Colossus::Protobuf::Health, dietemperature_),
  PROTOBUF_FIELD_OFFSET(::Colossus::Protobuf::Health, soctemperature_),
  PROTOBUF_FIELD_OFFSET(::Colossus::Protobuf::Health, vcotemperature_),
  PROTOBUF_FIELD_OFFSET(::Colossus::Protobuf::Health, ambienttemperature_),
  PROTOBUF_FIELD_OFFSET(::Colossus::Protobuf::Health, rotation_),
  PROTOBUF_FIELD_OFFSET(::Colossus::Protobuf::Health, packetrate_),
  PROTOBUF_FIELD_OFFSET(::Colossus::Protobuf::Health, rfhealthcheck_),
  PROTOBUF_FIELD_OFFSET(::Colossus::Protobuf::Health, transmitting_),
  PROTOBUF_FIELD_OFFSET(::Colossus::Protobuf::Health, expectedrotation_),
  PROTOBUF_FIELD_OFFSET(::Colossus::Protobuf::Health, expectedpacketrate_),
  PROTOBUF_FIELD_OFFSET(::Colossus::Protobuf::Health, macaddress_),
  PROTOBUF_FIELD_OFFSET(::Colossus::Protobuf::Health, encodererrorcount_),
  PROTOBUF_FIELD_OFFSET(::Colossus::Protobuf::Health, systemuptime_),
  PROTOBUF_FIELD_OFFSET(::Colossus::Protobuf::Health, motorcurrent_),
  PROTOBUF_FIELD_OFFSET(::Colossus::Protobuf::Health, softwareuptime_),
  PROTOBUF_FIELD_OFFSET(::Colossus::Protobuf::Health, totaluptime_),
  PROTOBUF_FIELD_OFFSET(::Colossus::Protobuf::Health, networkstate_),
  PROTOBUF_FIELD_OFFSET(::Colossus::Protobuf::Health, maxclientsallowed_),
  PROTOBUF_FIELD_OFFSET(::Colossus::Protobuf::Health, ipclients_),
  PROTOBUF_FIELD_OFFSET(::Colossus::Protobuf::Health, expectedrxpacketrate_),
  PROTOBUF_FIELD_OFFSET(::Colossus::Protobuf::Health, uplinkerrors_),
  PROTOBUF_FIELD_OFFSET(::Colossus::Protobuf::Health, downlinkerrors_),
  PROTOBUF_FIELD_OFFSET(::Colossus::Protobuf::Health, uplinkmissed_),
  PROTOBUF_FIELD_OFFSET(::Colossus::Protobuf::Health, downlinkmissed_),
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  10,
  11,
  12,
  0,
  13,
  15,
  8,
  14,
  17,
  9,
  16,
  ~0u,
  18,
  19,
  20,
  21,
  22,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 29, sizeof(::Colossus::Protobuf::Health)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Colossus::Protobuf::_Health_default_instance_),
};

const char descriptor_table_protodef_health_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\014health.proto\022\021Colossus.Protobuf\032\020healt"
  "hinfo.proto\032\021networkinfo.proto\"\323\006\n\006Healt"
  "h\0225\n\016dietemperature\030\001 \001(\0132\035.Colossus.Pro"
  "tobuf.HealthInfo\0225\n\016soctemperature\030\002 \001(\013"
  "2\035.Colossus.Protobuf.HealthInfo\0225\n\016vcote"
  "mperature\030\003 \001(\0132\035.Colossus.Protobuf.Heal"
  "thInfo\0229\n\022ambienttemperature\030\004 \001(\0132\035.Col"
  "ossus.Protobuf.HealthInfo\022/\n\010rotation\030\005 "
  "\001(\0132\035.Colossus.Protobuf.HealthInfo\0221\n\npa"
  "cketrate\030\006 \001(\0132\035.Colossus.Protobuf.Healt"
  "hInfo\0224\n\rrfhealthcheck\030\007 \001(\0132\035.Colossus."
  "Protobuf.HealthInfo\022\024\n\014transmitting\030\010 \001("
  "\010\022\030\n\020expectedrotation\030\t \001(\r\022\032\n\022expectedp"
  "acketrate\030\n \001(\r\022\022\n\nmacaddress\030\013 \001(\t\022\031\n\021e"
  "ncodererrorcount\030\014 \001(\005\022\024\n\014systemuptime\030\r"
  " \001(\002\0223\n\014motorcurrent\030\016 \001(\0132\035.Colossus.Pr"
  "otobuf.HealthInfo\022\026\n\016softwareuptime\030\017 \001("
  "\004\022\023\n\013totaluptime\030\020 \001(\004\0224\n\014networkstate\030\021"
  " \001(\0132\036.Colossus.Protobuf.NetworkInfo\022\031\n\021"
  "maxclientsallowed\030\022 \001(\005\022\021\n\tipclients\030\023 \003"
  "(\t\022\034\n\024expectedrxpacketrate\030\024 \001(\r\022\024\n\014upli"
  "nkerrors\030\025 \001(\r\022\026\n\016downlinkerrors\030\026 \001(\r\022\024"
  "\n\014uplinkmissed\030\027 \001(\r\022\026\n\016downlinkmissed\030\030"
  " \001(\r"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_health_2eproto_deps[2] = {
  &::descriptor_table_healthinfo_2eproto,
  &::descriptor_table_networkinfo_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_health_2eproto_sccs[1] = {
  &scc_info_Health_health_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_health_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_health_2eproto = {
  false, false, descriptor_table_protodef_health_2eproto, "health.proto", 924,
  &descriptor_table_health_2eproto_once, descriptor_table_health_2eproto_sccs, descriptor_table_health_2eproto_deps, 1, 2,
  schemas, file_default_instances, TableStruct_health_2eproto::offsets,
  file_level_metadata_health_2eproto, 1, file_level_enum_descriptors_health_2eproto, file_level_service_descriptors_health_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_health_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_health_2eproto)), true);
namespace Colossus {
namespace Protobuf {

// ===================================================================

void Health::InitAsDefaultInstance() {
  ::Colossus::Protobuf::_Health_default_instance_._instance.get_mutable()->dietemperature_ = const_cast< ::Colossus::Protobuf::HealthInfo*>(
      ::Colossus::Protobuf::HealthInfo::internal_default_instance());
  ::Colossus::Protobuf::_Health_default_instance_._instance.get_mutable()->soctemperature_ = const_cast< ::Colossus::Protobuf::HealthInfo*>(
      ::Colossus::Protobuf::HealthInfo::internal_default_instance());
  ::Colossus::Protobuf::_Health_default_instance_._instance.get_mutable()->vcotemperature_ = const_cast< ::Colossus::Protobuf::HealthInfo*>(
      ::Colossus::Protobuf::HealthInfo::internal_default_instance());
  ::Colossus::Protobuf::_Health_default_instance_._instance.get_mutable()->ambienttemperature_ = const_cast< ::Colossus::Protobuf::HealthInfo*>(
      ::Colossus::Protobuf::HealthInfo::internal_default_instance());
  ::Colossus::Protobuf::_Health_default_instance_._instance.get_mutable()->rotation_ = const_cast< ::Colossus::Protobuf::HealthInfo*>(
      ::Colossus::Protobuf::HealthInfo::internal_default_instance());
  ::Colossus::Protobuf::_Health_default_instance_._instance.get_mutable()->packetrate_ = const_cast< ::Colossus::Protobuf::HealthInfo*>(
      ::Colossus::Protobuf::HealthInfo::internal_default_instance());
  ::Colossus::Protobuf::_Health_default_instance_._instance.get_mutable()->rfhealthcheck_ = const_cast< ::Colossus::Protobuf::HealthInfo*>(
      ::Colossus::Protobuf::HealthInfo::internal_default_instance());
  ::Colossus::Protobuf::_Health_default_instance_._instance.get_mutable()->motorcurrent_ = const_cast< ::Colossus::Protobuf::HealthInfo*>(
      ::Colossus::Protobuf::HealthInfo::internal_default_instance());
  ::Colossus::Protobuf::_Health_default_instance_._instance.get_mutable()->networkstate_ = const_cast< ::Colossus::Protobuf::NetworkInfo*>(
      ::Colossus::Protobuf::NetworkInfo::internal_default_instance());
}
class Health::_Internal {
 public:
  using HasBits = decltype(std::declval<Health>()._has_bits_);
  static const ::Colossus::Protobuf::HealthInfo& dietemperature(const Health* msg);
  static void set_has_dietemperature(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::Colossus::Protobuf::HealthInfo& soctemperature(const Health* msg);
  static void set_has_soctemperature(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::Colossus::Protobuf::HealthInfo& vcotemperature(const Health* msg);
  static void set_has_vcotemperature(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::Colossus::Protobuf::HealthInfo& ambienttemperature(const Health* msg);
  static void set_has_ambienttemperature(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::Colossus::Protobuf::HealthInfo& rotation(const Health* msg);
  static void set_has_rotation(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::Colossus::Protobuf::HealthInfo& packetrate(const Health* msg);
  static void set_has_packetrate(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::Colossus::Protobuf::HealthInfo& rfhealthcheck(const Health* msg);
  static void set_has_rfhealthcheck(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_transmitting(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_expectedrotation(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_expectedpacketrate(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_macaddress(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_encodererrorcount(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_systemuptime(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static const ::Colossus::Protobuf::HealthInfo& motorcurrent(const Health* msg);
  static void set_has_motorcurrent(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_softwareuptime(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_totaluptime(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static const ::Colossus::Protobuf::NetworkInfo& networkstate(const Health* msg);
  static void set_has_networkstate(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_maxclientsallowed(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_expectedrxpacketrate(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_uplinkerrors(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_downlinkerrors(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_uplinkmissed(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_downlinkmissed(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
};

const ::Colossus::Protobuf::HealthInfo&
Health::_Internal::dietemperature(const Health* msg) {
  return *msg->dietemperature_;
}
const ::Colossus::Protobuf::HealthInfo&
Health::_Internal::soctemperature(const Health* msg) {
  return *msg->soctemperature_;
}
const ::Colossus::Protobuf::HealthInfo&
Health::_Internal::vcotemperature(const Health* msg) {
  return *msg->vcotemperature_;
}
const ::Colossus::Protobuf::HealthInfo&
Health::_Internal::ambienttemperature(const Health* msg) {
  return *msg->ambienttemperature_;
}
const ::Colossus::Protobuf::HealthInfo&
Health::_Internal::rotation(const Health* msg) {
  return *msg->rotation_;
}
const ::Colossus::Protobuf::HealthInfo&
Health::_Internal::packetrate(const Health* msg) {
  return *msg->packetrate_;
}
const ::Colossus::Protobuf::HealthInfo&
Health::_Internal::rfhealthcheck(const Health* msg) {
  return *msg->rfhealthcheck_;
}
const ::Colossus::Protobuf::HealthInfo&
Health::_Internal::motorcurrent(const Health* msg) {
  return *msg->motorcurrent_;
}
const ::Colossus::Protobuf::NetworkInfo&
Health::_Internal::networkstate(const Health* msg) {
  return *msg->networkstate_;
}
void Health::clear_dietemperature() {
  if (dietemperature_ != nullptr) dietemperature_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void Health::clear_soctemperature() {
  if (soctemperature_ != nullptr) soctemperature_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void Health::clear_vcotemperature() {
  if (vcotemperature_ != nullptr) vcotemperature_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
void Health::clear_ambienttemperature() {
  if (ambienttemperature_ != nullptr) ambienttemperature_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
void Health::clear_rotation() {
  if (rotation_ != nullptr) rotation_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
void Health::clear_packetrate() {
  if (packetrate_ != nullptr) packetrate_->Clear();
  _has_bits_[0] &= ~0x00000040u;
}
void Health::clear_rfhealthcheck() {
  if (rfhealthcheck_ != nullptr) rfhealthcheck_->Clear();
  _has_bits_[0] &= ~0x00000080u;
}
void Health::clear_motorcurrent() {
  if (motorcurrent_ != nullptr) motorcurrent_->Clear();
  _has_bits_[0] &= ~0x00000100u;
}
void Health::clear_networkstate() {
  if (networkstate_ != nullptr) networkstate_->Clear();
  _has_bits_[0] &= ~0x00000200u;
}
Health::Health(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  ipclients_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Colossus.Protobuf.Health)
}
Health::Health(const Health& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      ipclients_(from.ipclients_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  macaddress_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_macaddress()) {
    macaddress_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_macaddress(),
      GetArena());
  }
  if (from._internal_has_dietemperature()) {
    dietemperature_ = new ::Colossus::Protobuf::HealthInfo(*from.dietemperature_);
  } else {
    dietemperature_ = nullptr;
  }
  if (from._internal_has_soctemperature()) {
    soctemperature_ = new ::Colossus::Protobuf::HealthInfo(*from.soctemperature_);
  } else {
    soctemperature_ = nullptr;
  }
  if (from._internal_has_vcotemperature()) {
    vcotemperature_ = new ::Colossus::Protobuf::HealthInfo(*from.vcotemperature_);
  } else {
    vcotemperature_ = nullptr;
  }
  if (from._internal_has_ambienttemperature()) {
    ambienttemperature_ = new ::Colossus::Protobuf::HealthInfo(*from.ambienttemperature_);
  } else {
    ambienttemperature_ = nullptr;
  }
  if (from._internal_has_rotation()) {
    rotation_ = new ::Colossus::Protobuf::HealthInfo(*from.rotation_);
  } else {
    rotation_ = nullptr;
  }
  if (from._internal_has_packetrate()) {
    packetrate_ = new ::Colossus::Protobuf::HealthInfo(*from.packetrate_);
  } else {
    packetrate_ = nullptr;
  }
  if (from._internal_has_rfhealthcheck()) {
    rfhealthcheck_ = new ::Colossus::Protobuf::HealthInfo(*from.rfhealthcheck_);
  } else {
    rfhealthcheck_ = nullptr;
  }
  if (from._internal_has_motorcurrent()) {
    motorcurrent_ = new ::Colossus::Protobuf::HealthInfo(*from.motorcurrent_);
  } else {
    motorcurrent_ = nullptr;
  }
  if (from._internal_has_networkstate()) {
    networkstate_ = new ::Colossus::Protobuf::NetworkInfo(*from.networkstate_);
  } else {
    networkstate_ = nullptr;
  }
  ::memcpy(&transmitting_, &from.transmitting_,
    static_cast<size_t>(reinterpret_cast<char*>(&downlinkmissed_) -
    reinterpret_cast<char*>(&transmitting_)) + sizeof(downlinkmissed_));
  // @@protoc_insertion_point(copy_constructor:Colossus.Protobuf.Health)
}

void Health::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Health_health_2eproto.base);
  macaddress_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&dietemperature_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&downlinkmissed_) -
      reinterpret_cast<char*>(&dietemperature_)) + sizeof(downlinkmissed_));
}

Health::~Health() {
  // @@protoc_insertion_point(destructor:Colossus.Protobuf.Health)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Health::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  macaddress_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete dietemperature_;
  if (this != internal_default_instance()) delete soctemperature_;
  if (this != internal_default_instance()) delete vcotemperature_;
  if (this != internal_default_instance()) delete ambienttemperature_;
  if (this != internal_default_instance()) delete rotation_;
  if (this != internal_default_instance()) delete packetrate_;
  if (this != internal_default_instance()) delete rfhealthcheck_;
  if (this != internal_default_instance()) delete motorcurrent_;
  if (this != internal_default_instance()) delete networkstate_;
}

void Health::ArenaDtor(void* object) {
  Health* _this = reinterpret_cast< Health* >(object);
  (void)_this;
}
void Health::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Health::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Health& Health::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Health_health_2eproto.base);
  return *internal_default_instance();
}


void Health::Clear() {
// @@protoc_insertion_point(message_clear_start:Colossus.Protobuf.Health)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ipclients_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      macaddress_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(dietemperature_ != nullptr);
      dietemperature_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(soctemperature_ != nullptr);
      soctemperature_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(vcotemperature_ != nullptr);
      vcotemperature_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(ambienttemperature_ != nullptr);
      ambienttemperature_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(rotation_ != nullptr);
      rotation_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(packetrate_ != nullptr);
      packetrate_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(rfhealthcheck_ != nullptr);
      rfhealthcheck_->Clear();
    }
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(motorcurrent_ != nullptr);
      motorcurrent_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(networkstate_ != nullptr);
      networkstate_->Clear();
    }
  }
  if (cached_has_bits & 0x0000fc00u) {
    ::memset(&transmitting_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&systemuptime_) -
        reinterpret_cast<char*>(&transmitting_)) + sizeof(systemuptime_));
  }
  if (cached_has_bits & 0x007f0000u) {
    ::memset(&maxclientsallowed_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&downlinkmissed_) -
        reinterpret_cast<char*>(&maxclientsallowed_)) + sizeof(downlinkmissed_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Health::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .Colossus.Protobuf.HealthInfo dietemperature = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_dietemperature(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .Colossus.Protobuf.HealthInfo soctemperature = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_soctemperature(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .Colossus.Protobuf.HealthInfo vcotemperature = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_vcotemperature(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .Colossus.Protobuf.HealthInfo ambienttemperature = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_ambienttemperature(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .Colossus.Protobuf.HealthInfo rotation = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_rotation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .Colossus.Protobuf.HealthInfo packetrate = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_packetrate(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .Colossus.Protobuf.HealthInfo rfhealthcheck = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_rfhealthcheck(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool transmitting = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_transmitting(&has_bits);
          transmitting_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 expectedrotation = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_expectedrotation(&has_bits);
          expectedrotation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 expectedpacketrate = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_expectedpacketrate(&has_bits);
          expectedpacketrate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string macaddress = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_macaddress();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Colossus.Protobuf.Health.macaddress");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 encodererrorcount = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_encodererrorcount(&has_bits);
          encodererrorcount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float systemuptime = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 109)) {
          _Internal::set_has_systemuptime(&has_bits);
          systemuptime_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional .Colossus.Protobuf.HealthInfo motorcurrent = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_motorcurrent(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 softwareuptime = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_softwareuptime(&has_bits);
          softwareuptime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 totaluptime = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_totaluptime(&has_bits);
          totaluptime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .Colossus.Protobuf.NetworkInfo networkstate = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_networkstate(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 maxclientsallowed = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          _Internal::set_has_maxclientsallowed(&has_bits);
          maxclientsallowed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string ipclients = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_ipclients();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Colossus.Protobuf.Health.ipclients");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<154>(ptr));
        } else goto handle_unusual;
        continue;
      // optional uint32 expectedrxpacketrate = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          _Internal::set_has_expectedrxpacketrate(&has_bits);
          expectedrxpacketrate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 uplinkerrors = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          _Internal::set_has_uplinkerrors(&has_bits);
          uplinkerrors_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 downlinkerrors = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          _Internal::set_has_downlinkerrors(&has_bits);
          downlinkerrors_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 uplinkmissed = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          _Internal::set_has_uplinkmissed(&has_bits);
          uplinkmissed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 downlinkmissed = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          _Internal::set_has_downlinkmissed(&has_bits);
          downlinkmissed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Health::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Colossus.Protobuf.Health)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .Colossus.Protobuf.HealthInfo dietemperature = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::dietemperature(this), target, stream);
  }

  // optional .Colossus.Protobuf.HealthInfo soctemperature = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::soctemperature(this), target, stream);
  }

  // optional .Colossus.Protobuf.HealthInfo vcotemperature = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::vcotemperature(this), target, stream);
  }

  // optional .Colossus.Protobuf.HealthInfo ambienttemperature = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::ambienttemperature(this), target, stream);
  }

  // optional .Colossus.Protobuf.HealthInfo rotation = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::rotation(this), target, stream);
  }

  // optional .Colossus.Protobuf.HealthInfo packetrate = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::packetrate(this), target, stream);
  }

  // optional .Colossus.Protobuf.HealthInfo rfhealthcheck = 7;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::rfhealthcheck(this), target, stream);
  }

  // optional bool transmitting = 8;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_transmitting(), target);
  }

  // optional uint32 expectedrotation = 9;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_expectedrotation(), target);
  }

  // optional uint32 expectedpacketrate = 10;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_expectedpacketrate(), target);
  }

  // optional string macaddress = 11;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_macaddress().data(), static_cast<int>(this->_internal_macaddress().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Colossus.Protobuf.Health.macaddress");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_macaddress(), target);
  }

  // optional int32 encodererrorcount = 12;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(12, this->_internal_encodererrorcount(), target);
  }

  // optional float systemuptime = 13;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(13, this->_internal_systemuptime(), target);
  }

  // optional .Colossus.Protobuf.HealthInfo motorcurrent = 14;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        14, _Internal::motorcurrent(this), target, stream);
  }

  // optional uint64 softwareuptime = 15;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(15, this->_internal_softwareuptime(), target);
  }

  // optional uint64 totaluptime = 16;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(16, this->_internal_totaluptime(), target);
  }

  // optional .Colossus.Protobuf.NetworkInfo networkstate = 17;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        17, _Internal::networkstate(this), target, stream);
  }

  // optional int32 maxclientsallowed = 18;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(18, this->_internal_maxclientsallowed(), target);
  }

  // repeated string ipclients = 19;
  for (int i = 0, n = this->_internal_ipclients_size(); i < n; i++) {
    const auto& s = this->_internal_ipclients(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Colossus.Protobuf.Health.ipclients");
    target = stream->WriteString(19, s, target);
  }

  // optional uint32 expectedrxpacketrate = 20;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(20, this->_internal_expectedrxpacketrate(), target);
  }

  // optional uint32 uplinkerrors = 21;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(21, this->_internal_uplinkerrors(), target);
  }

  // optional uint32 downlinkerrors = 22;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(22, this->_internal_downlinkerrors(), target);
  }

  // optional uint32 uplinkmissed = 23;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(23, this->_internal_uplinkmissed(), target);
  }

  // optional uint32 downlinkmissed = 24;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(24, this->_internal_downlinkmissed(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Colossus.Protobuf.Health)
  return target;
}

size_t Health::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Colossus.Protobuf.Health)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string ipclients = 19;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(ipclients_.size());
  for (int i = 0, n = ipclients_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      ipclients_.Get(i));
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string macaddress = 11;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_macaddress());
    }

    // optional .Colossus.Protobuf.HealthInfo dietemperature = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *dietemperature_);
    }

    // optional .Colossus.Protobuf.HealthInfo soctemperature = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *soctemperature_);
    }

    // optional .Colossus.Protobuf.HealthInfo vcotemperature = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *vcotemperature_);
    }

    // optional .Colossus.Protobuf.HealthInfo ambienttemperature = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ambienttemperature_);
    }

    // optional .Colossus.Protobuf.HealthInfo rotation = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *rotation_);
    }

    // optional .Colossus.Protobuf.HealthInfo packetrate = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *packetrate_);
    }

    // optional .Colossus.Protobuf.HealthInfo rfhealthcheck = 7;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *rfhealthcheck_);
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional .Colossus.Protobuf.HealthInfo motorcurrent = 14;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *motorcurrent_);
    }

    // optional .Colossus.Protobuf.NetworkInfo networkstate = 17;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *networkstate_);
    }

    // optional bool transmitting = 8;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 1;
    }

    // optional uint32 expectedrotation = 9;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_expectedrotation());
    }

    // optional uint32 expectedpacketrate = 10;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_expectedpacketrate());
    }

    // optional int32 encodererrorcount = 12;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_encodererrorcount());
    }

    // optional uint64 softwareuptime = 15;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_softwareuptime());
    }

    // optional float systemuptime = 13;
    if (cached_has_bits & 0x00008000u) {
      total_size += 1 + 4;
    }

  }
  if (cached_has_bits & 0x007f0000u) {
    // optional int32 maxclientsallowed = 18;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_maxclientsallowed());
    }

    // optional uint64 totaluptime = 16;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_totaluptime());
    }

    // optional uint32 expectedrxpacketrate = 20;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_expectedrxpacketrate());
    }

    // optional uint32 uplinkerrors = 21;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_uplinkerrors());
    }

    // optional uint32 downlinkerrors = 22;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_downlinkerrors());
    }

    // optional uint32 uplinkmissed = 23;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_uplinkmissed());
    }

    // optional uint32 downlinkmissed = 24;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_downlinkmissed());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Health::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Colossus.Protobuf.Health)
  GOOGLE_DCHECK_NE(&from, this);
  const Health* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Health>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Colossus.Protobuf.Health)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Colossus.Protobuf.Health)
    MergeFrom(*source);
  }
}

void Health::MergeFrom(const Health& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Colossus.Protobuf.Health)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ipclients_.MergeFrom(from.ipclients_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_macaddress(from._internal_macaddress());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_dietemperature()->::Colossus::Protobuf::HealthInfo::MergeFrom(from._internal_dietemperature());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_soctemperature()->::Colossus::Protobuf::HealthInfo::MergeFrom(from._internal_soctemperature());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_vcotemperature()->::Colossus::Protobuf::HealthInfo::MergeFrom(from._internal_vcotemperature());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_ambienttemperature()->::Colossus::Protobuf::HealthInfo::MergeFrom(from._internal_ambienttemperature());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_rotation()->::Colossus::Protobuf::HealthInfo::MergeFrom(from._internal_rotation());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_packetrate()->::Colossus::Protobuf::HealthInfo::MergeFrom(from._internal_packetrate());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_mutable_rfhealthcheck()->::Colossus::Protobuf::HealthInfo::MergeFrom(from._internal_rfhealthcheck());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _internal_mutable_motorcurrent()->::Colossus::Protobuf::HealthInfo::MergeFrom(from._internal_motorcurrent());
    }
    if (cached_has_bits & 0x00000200u) {
      _internal_mutable_networkstate()->::Colossus::Protobuf::NetworkInfo::MergeFrom(from._internal_networkstate());
    }
    if (cached_has_bits & 0x00000400u) {
      transmitting_ = from.transmitting_;
    }
    if (cached_has_bits & 0x00000800u) {
      expectedrotation_ = from.expectedrotation_;
    }
    if (cached_has_bits & 0x00001000u) {
      expectedpacketrate_ = from.expectedpacketrate_;
    }
    if (cached_has_bits & 0x00002000u) {
      encodererrorcount_ = from.encodererrorcount_;
    }
    if (cached_has_bits & 0x00004000u) {
      softwareuptime_ = from.softwareuptime_;
    }
    if (cached_has_bits & 0x00008000u) {
      systemuptime_ = from.systemuptime_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x007f0000u) {
    if (cached_has_bits & 0x00010000u) {
      maxclientsallowed_ = from.maxclientsallowed_;
    }
    if (cached_has_bits & 0x00020000u) {
      totaluptime_ = from.totaluptime_;
    }
    if (cached_has_bits & 0x00040000u) {
      expectedrxpacketrate_ = from.expectedrxpacketrate_;
    }
    if (cached_has_bits & 0x00080000u) {
      uplinkerrors_ = from.uplinkerrors_;
    }
    if (cached_has_bits & 0x00100000u) {
      downlinkerrors_ = from.downlinkerrors_;
    }
    if (cached_has_bits & 0x00200000u) {
      uplinkmissed_ = from.uplinkmissed_;
    }
    if (cached_has_bits & 0x00400000u) {
      downlinkmissed_ = from.downlinkmissed_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Health::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Colossus.Protobuf.Health)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Health::CopyFrom(const Health& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Colossus.Protobuf.Health)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Health::IsInitialized() const {
  return true;
}

void Health::InternalSwap(Health* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ipclients_.InternalSwap(&other->ipclients_);
  macaddress_.Swap(&other->macaddress_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Health, downlinkmissed_)
      + sizeof(Health::downlinkmissed_)
      - PROTOBUF_FIELD_OFFSET(Health, dietemperature_)>(
          reinterpret_cast<char*>(&dietemperature_),
          reinterpret_cast<char*>(&other->dietemperature_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Health::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace Protobuf
}  // namespace Colossus
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::Colossus::Protobuf::Health* Arena::CreateMaybeMessage< ::Colossus::Protobuf::Health >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Colossus::Protobuf::Health >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
