// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: nvramcontents.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_nvramcontents_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_nvramcontents_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_nvramcontents_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_nvramcontents_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_nvramcontents_2eproto;
namespace Colossus {
namespace Protobuf {
class NVRamContents;
class NVRamContentsDefaultTypeInternal;
extern NVRamContentsDefaultTypeInternal _NVRamContents_default_instance_;
}  // namespace Protobuf
}  // namespace Colossus
PROTOBUF_NAMESPACE_OPEN
template<> ::Colossus::Protobuf::NVRamContents* Arena::CreateMaybeMessage<::Colossus::Protobuf::NVRamContents>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Colossus {
namespace Protobuf {

enum LensTypes : int {
  FLAT = 0,
  COSECANT = 1,
  DISHFLAT = 2,
  DISHCOSECANT = 3
};
bool LensTypes_IsValid(int value);
constexpr LensTypes LensTypes_MIN = FLAT;
constexpr LensTypes LensTypes_MAX = DISHCOSECANT;
constexpr int LensTypes_ARRAYSIZE = LensTypes_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LensTypes_descriptor();
template<typename T>
inline const std::string& LensTypes_Name(T enum_t_value) {
  static_assert(::std::is_same<T, LensTypes>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function LensTypes_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    LensTypes_descriptor(), enum_t_value);
}
inline bool LensTypes_Parse(
    const std::string& name, LensTypes* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<LensTypes>(
    LensTypes_descriptor(), name, value);
}
enum OrientationTypes : int {
  NORMAL = 0,
  HANGING = 1
};
bool OrientationTypes_IsValid(int value);
constexpr OrientationTypes OrientationTypes_MIN = NORMAL;
constexpr OrientationTypes OrientationTypes_MAX = HANGING;
constexpr int OrientationTypes_ARRAYSIZE = OrientationTypes_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* OrientationTypes_descriptor();
template<typename T>
inline const std::string& OrientationTypes_Name(T enum_t_value) {
  static_assert(::std::is_same<T, OrientationTypes>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function OrientationTypes_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    OrientationTypes_descriptor(), enum_t_value);
}
inline bool OrientationTypes_Parse(
    const std::string& name, OrientationTypes* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<OrientationTypes>(
    OrientationTypes_descriptor(), name, value);
}
// ===================================================================

class NVRamContents PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Colossus.Protobuf.NVRamContents) */ {
 public:
  inline NVRamContents() : NVRamContents(nullptr) {};
  virtual ~NVRamContents();

  NVRamContents(const NVRamContents& from);
  NVRamContents(NVRamContents&& from) noexcept
    : NVRamContents() {
    *this = ::std::move(from);
  }

  inline NVRamContents& operator=(const NVRamContents& from) {
    CopyFrom(from);
    return *this;
  }
  inline NVRamContents& operator=(NVRamContents&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NVRamContents& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NVRamContents* internal_default_instance() {
    return reinterpret_cast<const NVRamContents*>(
               &_NVRamContents_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(NVRamContents& a, NVRamContents& b) {
    a.Swap(&b);
  }
  inline void Swap(NVRamContents* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NVRamContents* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NVRamContents* New() const final {
    return CreateMaybeMessage<NVRamContents>(nullptr);
  }

  NVRamContents* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NVRamContents>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NVRamContents& from);
  void MergeFrom(const NVRamContents& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NVRamContents* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Colossus.Protobuf.NVRamContents";
  }
  protected:
  explicit NVRamContents(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_nvramcontents_2eproto);
    return ::descriptor_table_nvramcontents_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kModelidFieldNumber = 13,
    kRadarFieldNumber = 1,
    kDigitalboardFieldNumber = 2,
    kFrontendFieldNumber = 3,
    kDaughterboardFieldNumber = 4,
    kLenstypeFieldNumber = 5,
    kOrientationFieldNumber = 6,
    kPoefittedFieldNumber = 7,
    kHeaterfittedFieldNumber = 8,
    kBossangleFieldNumber = 9,
    kProfileidFieldNumber = 10,
    kBuilddateFieldNumber = 11,
    kServicedateFieldNumber = 12,
    kAccelxFieldNumber = 14,
    kAccelyFieldNumber = 15,
    kAccelzFieldNumber = 16,
  };
  // optional string modelid = 13;
  bool has_modelid() const;
  private:
  bool _internal_has_modelid() const;
  public:
  void clear_modelid();
  const std::string& modelid() const;
  void set_modelid(const std::string& value);
  void set_modelid(std::string&& value);
  void set_modelid(const char* value);
  void set_modelid(const char* value, size_t size);
  std::string* mutable_modelid();
  std::string* release_modelid();
  void set_allocated_modelid(std::string* modelid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_modelid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_modelid(
      std::string* modelid);
  private:
  const std::string& _internal_modelid() const;
  void _internal_set_modelid(const std::string& value);
  std::string* _internal_mutable_modelid();
  public:

  // optional int32 radar = 1;
  bool has_radar() const;
  private:
  bool _internal_has_radar() const;
  public:
  void clear_radar();
  ::PROTOBUF_NAMESPACE_ID::int32 radar() const;
  void set_radar(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_radar() const;
  void _internal_set_radar(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 digitalboard = 2;
  bool has_digitalboard() const;
  private:
  bool _internal_has_digitalboard() const;
  public:
  void clear_digitalboard();
  ::PROTOBUF_NAMESPACE_ID::int32 digitalboard() const;
  void set_digitalboard(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_digitalboard() const;
  void _internal_set_digitalboard(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 frontend = 3;
  bool has_frontend() const;
  private:
  bool _internal_has_frontend() const;
  public:
  void clear_frontend();
  ::PROTOBUF_NAMESPACE_ID::int32 frontend() const;
  void set_frontend(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_frontend() const;
  void _internal_set_frontend(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 daughterboard = 4;
  bool has_daughterboard() const;
  private:
  bool _internal_has_daughterboard() const;
  public:
  void clear_daughterboard();
  ::PROTOBUF_NAMESPACE_ID::int32 daughterboard() const;
  void set_daughterboard(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_daughterboard() const;
  void _internal_set_daughterboard(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional .Colossus.Protobuf.LensTypes lenstype = 5;
  bool has_lenstype() const;
  private:
  bool _internal_has_lenstype() const;
  public:
  void clear_lenstype();
  ::Colossus::Protobuf::LensTypes lenstype() const;
  void set_lenstype(::Colossus::Protobuf::LensTypes value);
  private:
  ::Colossus::Protobuf::LensTypes _internal_lenstype() const;
  void _internal_set_lenstype(::Colossus::Protobuf::LensTypes value);
  public:

  // optional .Colossus.Protobuf.OrientationTypes orientation = 6;
  bool has_orientation() const;
  private:
  bool _internal_has_orientation() const;
  public:
  void clear_orientation();
  ::Colossus::Protobuf::OrientationTypes orientation() const;
  void set_orientation(::Colossus::Protobuf::OrientationTypes value);
  private:
  ::Colossus::Protobuf::OrientationTypes _internal_orientation() const;
  void _internal_set_orientation(::Colossus::Protobuf::OrientationTypes value);
  public:

  // optional int32 poefitted = 7;
  bool has_poefitted() const;
  private:
  bool _internal_has_poefitted() const;
  public:
  void clear_poefitted();
  ::PROTOBUF_NAMESPACE_ID::int32 poefitted() const;
  void set_poefitted(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_poefitted() const;
  void _internal_set_poefitted(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 heaterfitted = 8;
  bool has_heaterfitted() const;
  private:
  bool _internal_has_heaterfitted() const;
  public:
  void clear_heaterfitted();
  ::PROTOBUF_NAMESPACE_ID::int32 heaterfitted() const;
  void set_heaterfitted(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_heaterfitted() const;
  void _internal_set_heaterfitted(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional float bossangle = 9;
  bool has_bossangle() const;
  private:
  bool _internal_has_bossangle() const;
  public:
  void clear_bossangle();
  float bossangle() const;
  void set_bossangle(float value);
  private:
  float _internal_bossangle() const;
  void _internal_set_bossangle(float value);
  public:

  // optional int32 profileid = 10;
  bool has_profileid() const;
  private:
  bool _internal_has_profileid() const;
  public:
  void clear_profileid();
  ::PROTOBUF_NAMESPACE_ID::int32 profileid() const;
  void set_profileid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_profileid() const;
  void _internal_set_profileid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 builddate = 11;
  bool has_builddate() const;
  private:
  bool _internal_has_builddate() const;
  public:
  void clear_builddate();
  ::PROTOBUF_NAMESPACE_ID::int32 builddate() const;
  void set_builddate(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_builddate() const;
  void _internal_set_builddate(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 servicedate = 12;
  bool has_servicedate() const;
  private:
  bool _internal_has_servicedate() const;
  public:
  void clear_servicedate();
  ::PROTOBUF_NAMESPACE_ID::int32 servicedate() const;
  void set_servicedate(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_servicedate() const;
  void _internal_set_servicedate(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 accelx = 14;
  bool has_accelx() const;
  private:
  bool _internal_has_accelx() const;
  public:
  void clear_accelx();
  ::PROTOBUF_NAMESPACE_ID::int32 accelx() const;
  void set_accelx(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_accelx() const;
  void _internal_set_accelx(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 accely = 15;
  bool has_accely() const;
  private:
  bool _internal_has_accely() const;
  public:
  void clear_accely();
  ::PROTOBUF_NAMESPACE_ID::int32 accely() const;
  void set_accely(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_accely() const;
  void _internal_set_accely(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 accelz = 16;
  bool has_accelz() const;
  private:
  bool _internal_has_accelz() const;
  public:
  void clear_accelz();
  ::PROTOBUF_NAMESPACE_ID::int32 accelz() const;
  void set_accelz(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_accelz() const;
  void _internal_set_accelz(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Colossus.Protobuf.NVRamContents)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr modelid_;
  ::PROTOBUF_NAMESPACE_ID::int32 radar_;
  ::PROTOBUF_NAMESPACE_ID::int32 digitalboard_;
  ::PROTOBUF_NAMESPACE_ID::int32 frontend_;
  ::PROTOBUF_NAMESPACE_ID::int32 daughterboard_;
  int lenstype_;
  int orientation_;
  ::PROTOBUF_NAMESPACE_ID::int32 poefitted_;
  ::PROTOBUF_NAMESPACE_ID::int32 heaterfitted_;
  float bossangle_;
  ::PROTOBUF_NAMESPACE_ID::int32 profileid_;
  ::PROTOBUF_NAMESPACE_ID::int32 builddate_;
  ::PROTOBUF_NAMESPACE_ID::int32 servicedate_;
  ::PROTOBUF_NAMESPACE_ID::int32 accelx_;
  ::PROTOBUF_NAMESPACE_ID::int32 accely_;
  ::PROTOBUF_NAMESPACE_ID::int32 accelz_;
  friend struct ::TableStruct_nvramcontents_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// NVRamContents

// optional int32 radar = 1;
inline bool NVRamContents::_internal_has_radar() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool NVRamContents::has_radar() const {
  return _internal_has_radar();
}
inline void NVRamContents::clear_radar() {
  radar_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NVRamContents::_internal_radar() const {
  return radar_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NVRamContents::radar() const {
  // @@protoc_insertion_point(field_get:Colossus.Protobuf.NVRamContents.radar)
  return _internal_radar();
}
inline void NVRamContents::_internal_set_radar(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  radar_ = value;
}
inline void NVRamContents::set_radar(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_radar(value);
  // @@protoc_insertion_point(field_set:Colossus.Protobuf.NVRamContents.radar)
}

// optional int32 digitalboard = 2;
inline bool NVRamContents::_internal_has_digitalboard() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool NVRamContents::has_digitalboard() const {
  return _internal_has_digitalboard();
}
inline void NVRamContents::clear_digitalboard() {
  digitalboard_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NVRamContents::_internal_digitalboard() const {
  return digitalboard_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NVRamContents::digitalboard() const {
  // @@protoc_insertion_point(field_get:Colossus.Protobuf.NVRamContents.digitalboard)
  return _internal_digitalboard();
}
inline void NVRamContents::_internal_set_digitalboard(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  digitalboard_ = value;
}
inline void NVRamContents::set_digitalboard(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_digitalboard(value);
  // @@protoc_insertion_point(field_set:Colossus.Protobuf.NVRamContents.digitalboard)
}

// optional int32 frontend = 3;
inline bool NVRamContents::_internal_has_frontend() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool NVRamContents::has_frontend() const {
  return _internal_has_frontend();
}
inline void NVRamContents::clear_frontend() {
  frontend_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NVRamContents::_internal_frontend() const {
  return frontend_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NVRamContents::frontend() const {
  // @@protoc_insertion_point(field_get:Colossus.Protobuf.NVRamContents.frontend)
  return _internal_frontend();
}
inline void NVRamContents::_internal_set_frontend(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  frontend_ = value;
}
inline void NVRamContents::set_frontend(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_frontend(value);
  // @@protoc_insertion_point(field_set:Colossus.Protobuf.NVRamContents.frontend)
}

// optional int32 daughterboard = 4;
inline bool NVRamContents::_internal_has_daughterboard() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool NVRamContents::has_daughterboard() const {
  return _internal_has_daughterboard();
}
inline void NVRamContents::clear_daughterboard() {
  daughterboard_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NVRamContents::_internal_daughterboard() const {
  return daughterboard_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NVRamContents::daughterboard() const {
  // @@protoc_insertion_point(field_get:Colossus.Protobuf.NVRamContents.daughterboard)
  return _internal_daughterboard();
}
inline void NVRamContents::_internal_set_daughterboard(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  daughterboard_ = value;
}
inline void NVRamContents::set_daughterboard(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_daughterboard(value);
  // @@protoc_insertion_point(field_set:Colossus.Protobuf.NVRamContents.daughterboard)
}

// optional .Colossus.Protobuf.LensTypes lenstype = 5;
inline bool NVRamContents::_internal_has_lenstype() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool NVRamContents::has_lenstype() const {
  return _internal_has_lenstype();
}
inline void NVRamContents::clear_lenstype() {
  lenstype_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::Colossus::Protobuf::LensTypes NVRamContents::_internal_lenstype() const {
  return static_cast< ::Colossus::Protobuf::LensTypes >(lenstype_);
}
inline ::Colossus::Protobuf::LensTypes NVRamContents::lenstype() const {
  // @@protoc_insertion_point(field_get:Colossus.Protobuf.NVRamContents.lenstype)
  return _internal_lenstype();
}
inline void NVRamContents::_internal_set_lenstype(::Colossus::Protobuf::LensTypes value) {
  assert(::Colossus::Protobuf::LensTypes_IsValid(value));
  _has_bits_[0] |= 0x00000020u;
  lenstype_ = value;
}
inline void NVRamContents::set_lenstype(::Colossus::Protobuf::LensTypes value) {
  _internal_set_lenstype(value);
  // @@protoc_insertion_point(field_set:Colossus.Protobuf.NVRamContents.lenstype)
}

// optional .Colossus.Protobuf.OrientationTypes orientation = 6;
inline bool NVRamContents::_internal_has_orientation() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool NVRamContents::has_orientation() const {
  return _internal_has_orientation();
}
inline void NVRamContents::clear_orientation() {
  orientation_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::Colossus::Protobuf::OrientationTypes NVRamContents::_internal_orientation() const {
  return static_cast< ::Colossus::Protobuf::OrientationTypes >(orientation_);
}
inline ::Colossus::Protobuf::OrientationTypes NVRamContents::orientation() const {
  // @@protoc_insertion_point(field_get:Colossus.Protobuf.NVRamContents.orientation)
  return _internal_orientation();
}
inline void NVRamContents::_internal_set_orientation(::Colossus::Protobuf::OrientationTypes value) {
  assert(::Colossus::Protobuf::OrientationTypes_IsValid(value));
  _has_bits_[0] |= 0x00000040u;
  orientation_ = value;
}
inline void NVRamContents::set_orientation(::Colossus::Protobuf::OrientationTypes value) {
  _internal_set_orientation(value);
  // @@protoc_insertion_point(field_set:Colossus.Protobuf.NVRamContents.orientation)
}

// optional int32 poefitted = 7;
inline bool NVRamContents::_internal_has_poefitted() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool NVRamContents::has_poefitted() const {
  return _internal_has_poefitted();
}
inline void NVRamContents::clear_poefitted() {
  poefitted_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NVRamContents::_internal_poefitted() const {
  return poefitted_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NVRamContents::poefitted() const {
  // @@protoc_insertion_point(field_get:Colossus.Protobuf.NVRamContents.poefitted)
  return _internal_poefitted();
}
inline void NVRamContents::_internal_set_poefitted(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000080u;
  poefitted_ = value;
}
inline void NVRamContents::set_poefitted(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_poefitted(value);
  // @@protoc_insertion_point(field_set:Colossus.Protobuf.NVRamContents.poefitted)
}

// optional int32 heaterfitted = 8;
inline bool NVRamContents::_internal_has_heaterfitted() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool NVRamContents::has_heaterfitted() const {
  return _internal_has_heaterfitted();
}
inline void NVRamContents::clear_heaterfitted() {
  heaterfitted_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NVRamContents::_internal_heaterfitted() const {
  return heaterfitted_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NVRamContents::heaterfitted() const {
  // @@protoc_insertion_point(field_get:Colossus.Protobuf.NVRamContents.heaterfitted)
  return _internal_heaterfitted();
}
inline void NVRamContents::_internal_set_heaterfitted(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000100u;
  heaterfitted_ = value;
}
inline void NVRamContents::set_heaterfitted(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_heaterfitted(value);
  // @@protoc_insertion_point(field_set:Colossus.Protobuf.NVRamContents.heaterfitted)
}

// optional float bossangle = 9;
inline bool NVRamContents::_internal_has_bossangle() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool NVRamContents::has_bossangle() const {
  return _internal_has_bossangle();
}
inline void NVRamContents::clear_bossangle() {
  bossangle_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline float NVRamContents::_internal_bossangle() const {
  return bossangle_;
}
inline float NVRamContents::bossangle() const {
  // @@protoc_insertion_point(field_get:Colossus.Protobuf.NVRamContents.bossangle)
  return _internal_bossangle();
}
inline void NVRamContents::_internal_set_bossangle(float value) {
  _has_bits_[0] |= 0x00000200u;
  bossangle_ = value;
}
inline void NVRamContents::set_bossangle(float value) {
  _internal_set_bossangle(value);
  // @@protoc_insertion_point(field_set:Colossus.Protobuf.NVRamContents.bossangle)
}

// optional int32 profileid = 10;
inline bool NVRamContents::_internal_has_profileid() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool NVRamContents::has_profileid() const {
  return _internal_has_profileid();
}
inline void NVRamContents::clear_profileid() {
  profileid_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NVRamContents::_internal_profileid() const {
  return profileid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NVRamContents::profileid() const {
  // @@protoc_insertion_point(field_get:Colossus.Protobuf.NVRamContents.profileid)
  return _internal_profileid();
}
inline void NVRamContents::_internal_set_profileid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000400u;
  profileid_ = value;
}
inline void NVRamContents::set_profileid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_profileid(value);
  // @@protoc_insertion_point(field_set:Colossus.Protobuf.NVRamContents.profileid)
}

// optional int32 builddate = 11;
inline bool NVRamContents::_internal_has_builddate() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool NVRamContents::has_builddate() const {
  return _internal_has_builddate();
}
inline void NVRamContents::clear_builddate() {
  builddate_ = 0;
  _has_bits_[0] &= ~0x00000800u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NVRamContents::_internal_builddate() const {
  return builddate_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NVRamContents::builddate() const {
  // @@protoc_insertion_point(field_get:Colossus.Protobuf.NVRamContents.builddate)
  return _internal_builddate();
}
inline void NVRamContents::_internal_set_builddate(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000800u;
  builddate_ = value;
}
inline void NVRamContents::set_builddate(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_builddate(value);
  // @@protoc_insertion_point(field_set:Colossus.Protobuf.NVRamContents.builddate)
}

// optional int32 servicedate = 12;
inline bool NVRamContents::_internal_has_servicedate() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool NVRamContents::has_servicedate() const {
  return _internal_has_servicedate();
}
inline void NVRamContents::clear_servicedate() {
  servicedate_ = 0;
  _has_bits_[0] &= ~0x00001000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NVRamContents::_internal_servicedate() const {
  return servicedate_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NVRamContents::servicedate() const {
  // @@protoc_insertion_point(field_get:Colossus.Protobuf.NVRamContents.servicedate)
  return _internal_servicedate();
}
inline void NVRamContents::_internal_set_servicedate(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00001000u;
  servicedate_ = value;
}
inline void NVRamContents::set_servicedate(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_servicedate(value);
  // @@protoc_insertion_point(field_set:Colossus.Protobuf.NVRamContents.servicedate)
}

// optional string modelid = 13;
inline bool NVRamContents::_internal_has_modelid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool NVRamContents::has_modelid() const {
  return _internal_has_modelid();
}
inline void NVRamContents::clear_modelid() {
  modelid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& NVRamContents::modelid() const {
  // @@protoc_insertion_point(field_get:Colossus.Protobuf.NVRamContents.modelid)
  return _internal_modelid();
}
inline void NVRamContents::set_modelid(const std::string& value) {
  _internal_set_modelid(value);
  // @@protoc_insertion_point(field_set:Colossus.Protobuf.NVRamContents.modelid)
}
inline std::string* NVRamContents::mutable_modelid() {
  // @@protoc_insertion_point(field_mutable:Colossus.Protobuf.NVRamContents.modelid)
  return _internal_mutable_modelid();
}
inline const std::string& NVRamContents::_internal_modelid() const {
  return modelid_.Get();
}
inline void NVRamContents::_internal_set_modelid(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  modelid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void NVRamContents::set_modelid(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  modelid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Colossus.Protobuf.NVRamContents.modelid)
}
inline void NVRamContents::set_modelid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  modelid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Colossus.Protobuf.NVRamContents.modelid)
}
inline void NVRamContents::set_modelid(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  modelid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Colossus.Protobuf.NVRamContents.modelid)
}
inline std::string* NVRamContents::_internal_mutable_modelid() {
  _has_bits_[0] |= 0x00000001u;
  return modelid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* NVRamContents::release_modelid() {
  // @@protoc_insertion_point(field_release:Colossus.Protobuf.NVRamContents.modelid)
  if (!_internal_has_modelid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return modelid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void NVRamContents::set_allocated_modelid(std::string* modelid) {
  if (modelid != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  modelid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), modelid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Colossus.Protobuf.NVRamContents.modelid)
}
inline std::string* NVRamContents::unsafe_arena_release_modelid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Colossus.Protobuf.NVRamContents.modelid)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return modelid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void NVRamContents::unsafe_arena_set_allocated_modelid(
    std::string* modelid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (modelid != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  modelid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      modelid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Colossus.Protobuf.NVRamContents.modelid)
}

// optional int32 accelx = 14;
inline bool NVRamContents::_internal_has_accelx() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool NVRamContents::has_accelx() const {
  return _internal_has_accelx();
}
inline void NVRamContents::clear_accelx() {
  accelx_ = 0;
  _has_bits_[0] &= ~0x00002000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NVRamContents::_internal_accelx() const {
  return accelx_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NVRamContents::accelx() const {
  // @@protoc_insertion_point(field_get:Colossus.Protobuf.NVRamContents.accelx)
  return _internal_accelx();
}
inline void NVRamContents::_internal_set_accelx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00002000u;
  accelx_ = value;
}
inline void NVRamContents::set_accelx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_accelx(value);
  // @@protoc_insertion_point(field_set:Colossus.Protobuf.NVRamContents.accelx)
}

// optional int32 accely = 15;
inline bool NVRamContents::_internal_has_accely() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool NVRamContents::has_accely() const {
  return _internal_has_accely();
}
inline void NVRamContents::clear_accely() {
  accely_ = 0;
  _has_bits_[0] &= ~0x00004000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NVRamContents::_internal_accely() const {
  return accely_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NVRamContents::accely() const {
  // @@protoc_insertion_point(field_get:Colossus.Protobuf.NVRamContents.accely)
  return _internal_accely();
}
inline void NVRamContents::_internal_set_accely(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00004000u;
  accely_ = value;
}
inline void NVRamContents::set_accely(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_accely(value);
  // @@protoc_insertion_point(field_set:Colossus.Protobuf.NVRamContents.accely)
}

// optional int32 accelz = 16;
inline bool NVRamContents::_internal_has_accelz() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool NVRamContents::has_accelz() const {
  return _internal_has_accelz();
}
inline void NVRamContents::clear_accelz() {
  accelz_ = 0;
  _has_bits_[0] &= ~0x00008000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NVRamContents::_internal_accelz() const {
  return accelz_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NVRamContents::accelz() const {
  // @@protoc_insertion_point(field_get:Colossus.Protobuf.NVRamContents.accelz)
  return _internal_accelz();
}
inline void NVRamContents::_internal_set_accelz(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00008000u;
  accelz_ = value;
}
inline void NVRamContents::set_accelz(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_accelz(value);
  // @@protoc_insertion_point(field_set:Colossus.Protobuf.NVRamContents.accelz)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace Protobuf
}  // namespace Colossus

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::Colossus::Protobuf::LensTypes> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Colossus::Protobuf::LensTypes>() {
  return ::Colossus::Protobuf::LensTypes_descriptor();
}
template <> struct is_proto_enum< ::Colossus::Protobuf::OrientationTypes> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Colossus::Protobuf::OrientationTypes>() {
  return ::Colossus::Protobuf::OrientationTypes_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_nvramcontents_2eproto
