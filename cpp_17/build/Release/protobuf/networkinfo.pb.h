// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: networkinfo.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_networkinfo_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_networkinfo_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_networkinfo_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_networkinfo_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_networkinfo_2eproto;
namespace Colossus {
namespace Protobuf {
class NetworkInfo;
class NetworkInfoDefaultTypeInternal;
extern NetworkInfoDefaultTypeInternal _NetworkInfo_default_instance_;
}  // namespace Protobuf
}  // namespace Colossus
PROTOBUF_NAMESPACE_OPEN
template<> ::Colossus::Protobuf::NetworkInfo* Arena::CreateMaybeMessage<::Colossus::Protobuf::NetworkInfo>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Colossus {
namespace Protobuf {

enum NetworkState : int {
  NET_DOWN = 0,
  NET_UP = 1,
  NET_UNKNOWN = -1
};
bool NetworkState_IsValid(int value);
constexpr NetworkState NetworkState_MIN = NET_UNKNOWN;
constexpr NetworkState NetworkState_MAX = NET_UP;
constexpr int NetworkState_ARRAYSIZE = NetworkState_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* NetworkState_descriptor();
template<typename T>
inline const std::string& NetworkState_Name(T enum_t_value) {
  static_assert(::std::is_same<T, NetworkState>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function NetworkState_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    NetworkState_descriptor(), enum_t_value);
}
inline bool NetworkState_Parse(
    const std::string& name, NetworkState* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<NetworkState>(
    NetworkState_descriptor(), name, value);
}
enum NetworkDuplex : int {
  NET_HALF = 0,
  NET_FULL = 1
};
bool NetworkDuplex_IsValid(int value);
constexpr NetworkDuplex NetworkDuplex_MIN = NET_HALF;
constexpr NetworkDuplex NetworkDuplex_MAX = NET_FULL;
constexpr int NetworkDuplex_ARRAYSIZE = NetworkDuplex_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* NetworkDuplex_descriptor();
template<typename T>
inline const std::string& NetworkDuplex_Name(T enum_t_value) {
  static_assert(::std::is_same<T, NetworkDuplex>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function NetworkDuplex_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    NetworkDuplex_descriptor(), enum_t_value);
}
inline bool NetworkDuplex_Parse(
    const std::string& name, NetworkDuplex* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<NetworkDuplex>(
    NetworkDuplex_descriptor(), name, value);
}
// ===================================================================

class NetworkInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Colossus.Protobuf.NetworkInfo) */ {
 public:
  inline NetworkInfo() : NetworkInfo(nullptr) {};
  virtual ~NetworkInfo();

  NetworkInfo(const NetworkInfo& from);
  NetworkInfo(NetworkInfo&& from) noexcept
    : NetworkInfo() {
    *this = ::std::move(from);
  }

  inline NetworkInfo& operator=(const NetworkInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline NetworkInfo& operator=(NetworkInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NetworkInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NetworkInfo* internal_default_instance() {
    return reinterpret_cast<const NetworkInfo*>(
               &_NetworkInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(NetworkInfo& a, NetworkInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(NetworkInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NetworkInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NetworkInfo* New() const final {
    return CreateMaybeMessage<NetworkInfo>(nullptr);
  }

  NetworkInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NetworkInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NetworkInfo& from);
  void MergeFrom(const NetworkInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NetworkInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Colossus.Protobuf.NetworkInfo";
  }
  protected:
  explicit NetworkInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_networkinfo_2eproto);
    return ::descriptor_table_networkinfo_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStateFieldNumber = 1,
    kDuplexFieldNumber = 2,
    kSpeedFieldNumber = 3,
  };
  // optional .Colossus.Protobuf.NetworkState state = 1;
  bool has_state() const;
  private:
  bool _internal_has_state() const;
  public:
  void clear_state();
  ::Colossus::Protobuf::NetworkState state() const;
  void set_state(::Colossus::Protobuf::NetworkState value);
  private:
  ::Colossus::Protobuf::NetworkState _internal_state() const;
  void _internal_set_state(::Colossus::Protobuf::NetworkState value);
  public:

  // optional .Colossus.Protobuf.NetworkDuplex duplex = 2;
  bool has_duplex() const;
  private:
  bool _internal_has_duplex() const;
  public:
  void clear_duplex();
  ::Colossus::Protobuf::NetworkDuplex duplex() const;
  void set_duplex(::Colossus::Protobuf::NetworkDuplex value);
  private:
  ::Colossus::Protobuf::NetworkDuplex _internal_duplex() const;
  void _internal_set_duplex(::Colossus::Protobuf::NetworkDuplex value);
  public:

  // optional uint32 speed = 3;
  bool has_speed() const;
  private:
  bool _internal_has_speed() const;
  public:
  void clear_speed();
  ::PROTOBUF_NAMESPACE_ID::uint32 speed() const;
  void set_speed(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_speed() const;
  void _internal_set_speed(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:Colossus.Protobuf.NetworkInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int state_;
  int duplex_;
  ::PROTOBUF_NAMESPACE_ID::uint32 speed_;
  friend struct ::TableStruct_networkinfo_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// NetworkInfo

// optional .Colossus.Protobuf.NetworkState state = 1;
inline bool NetworkInfo::_internal_has_state() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool NetworkInfo::has_state() const {
  return _internal_has_state();
}
inline void NetworkInfo::clear_state() {
  state_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::Colossus::Protobuf::NetworkState NetworkInfo::_internal_state() const {
  return static_cast< ::Colossus::Protobuf::NetworkState >(state_);
}
inline ::Colossus::Protobuf::NetworkState NetworkInfo::state() const {
  // @@protoc_insertion_point(field_get:Colossus.Protobuf.NetworkInfo.state)
  return _internal_state();
}
inline void NetworkInfo::_internal_set_state(::Colossus::Protobuf::NetworkState value) {
  assert(::Colossus::Protobuf::NetworkState_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  state_ = value;
}
inline void NetworkInfo::set_state(::Colossus::Protobuf::NetworkState value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:Colossus.Protobuf.NetworkInfo.state)
}

// optional .Colossus.Protobuf.NetworkDuplex duplex = 2;
inline bool NetworkInfo::_internal_has_duplex() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool NetworkInfo::has_duplex() const {
  return _internal_has_duplex();
}
inline void NetworkInfo::clear_duplex() {
  duplex_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::Colossus::Protobuf::NetworkDuplex NetworkInfo::_internal_duplex() const {
  return static_cast< ::Colossus::Protobuf::NetworkDuplex >(duplex_);
}
inline ::Colossus::Protobuf::NetworkDuplex NetworkInfo::duplex() const {
  // @@protoc_insertion_point(field_get:Colossus.Protobuf.NetworkInfo.duplex)
  return _internal_duplex();
}
inline void NetworkInfo::_internal_set_duplex(::Colossus::Protobuf::NetworkDuplex value) {
  assert(::Colossus::Protobuf::NetworkDuplex_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  duplex_ = value;
}
inline void NetworkInfo::set_duplex(::Colossus::Protobuf::NetworkDuplex value) {
  _internal_set_duplex(value);
  // @@protoc_insertion_point(field_set:Colossus.Protobuf.NetworkInfo.duplex)
}

// optional uint32 speed = 3;
inline bool NetworkInfo::_internal_has_speed() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool NetworkInfo::has_speed() const {
  return _internal_has_speed();
}
inline void NetworkInfo::clear_speed() {
  speed_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 NetworkInfo::_internal_speed() const {
  return speed_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 NetworkInfo::speed() const {
  // @@protoc_insertion_point(field_get:Colossus.Protobuf.NetworkInfo.speed)
  return _internal_speed();
}
inline void NetworkInfo::_internal_set_speed(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  speed_ = value;
}
inline void NetworkInfo::set_speed(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_speed(value);
  // @@protoc_insertion_point(field_set:Colossus.Protobuf.NetworkInfo.speed)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace Protobuf
}  // namespace Colossus

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::Colossus::Protobuf::NetworkState> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Colossus::Protobuf::NetworkState>() {
  return ::Colossus::Protobuf::NetworkState_descriptor();
}
template <> struct is_proto_enum< ::Colossus::Protobuf::NetworkDuplex> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Colossus::Protobuf::NetworkDuplex>() {
  return ::Colossus::Protobuf::NetworkDuplex_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_networkinfo_2eproto
