// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: nvramcontents.proto

#include "nvramcontents.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace Colossus {
namespace Protobuf {
class NVRamContentsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NVRamContents> _instance;
} _NVRamContents_default_instance_;
}  // namespace Protobuf
}  // namespace Colossus
static void InitDefaultsscc_info_NVRamContents_nvramcontents_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Colossus::Protobuf::_NVRamContents_default_instance_;
    new (ptr) ::Colossus::Protobuf::NVRamContents();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Colossus::Protobuf::NVRamContents::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NVRamContents_nvramcontents_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_NVRamContents_nvramcontents_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_nvramcontents_2eproto[1];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_nvramcontents_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_nvramcontents_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_nvramcontents_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::Colossus::Protobuf::NVRamContents, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Colossus::Protobuf::NVRamContents, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Colossus::Protobuf::NVRamContents, radar_),
  PROTOBUF_FIELD_OFFSET(::Colossus::Protobuf::NVRamContents, digitalboard_),
  PROTOBUF_FIELD_OFFSET(::Colossus::Protobuf::NVRamContents, frontend_),
  PROTOBUF_FIELD_OFFSET(::Colossus::Protobuf::NVRamContents, daughterboard_),
  PROTOBUF_FIELD_OFFSET(::Colossus::Protobuf::NVRamContents, lenstype_),
  PROTOBUF_FIELD_OFFSET(::Colossus::Protobuf::NVRamContents, orientation_),
  PROTOBUF_FIELD_OFFSET(::Colossus::Protobuf::NVRamContents, poefitted_),
  PROTOBUF_FIELD_OFFSET(::Colossus::Protobuf::NVRamContents, heaterfitted_),
  PROTOBUF_FIELD_OFFSET(::Colossus::Protobuf::NVRamContents, bossangle_),
  PROTOBUF_FIELD_OFFSET(::Colossus::Protobuf::NVRamContents, profileid_),
  PROTOBUF_FIELD_OFFSET(::Colossus::Protobuf::NVRamContents, builddate_),
  PROTOBUF_FIELD_OFFSET(::Colossus::Protobuf::NVRamContents, servicedate_),
  PROTOBUF_FIELD_OFFSET(::Colossus::Protobuf::NVRamContents, modelid_),
  PROTOBUF_FIELD_OFFSET(::Colossus::Protobuf::NVRamContents, accelx_),
  PROTOBUF_FIELD_OFFSET(::Colossus::Protobuf::NVRamContents, accely_),
  PROTOBUF_FIELD_OFFSET(::Colossus::Protobuf::NVRamContents, accelz_),
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  0,
  13,
  14,
  15,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 21, sizeof(::Colossus::Protobuf::NVRamContents)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Colossus::Protobuf::_NVRamContents_default_instance_),
};

const char descriptor_table_protodef_nvramcontents_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\023nvramcontents.proto\022\021Colossus.Protobuf"
  "\"\377\002\n\rNVRamContents\022\r\n\005radar\030\001 \001(\005\022\024\n\014dig"
  "italboard\030\002 \001(\005\022\020\n\010frontend\030\003 \001(\005\022\025\n\rdau"
  "ghterboard\030\004 \001(\005\022.\n\010lenstype\030\005 \001(\0162\034.Col"
  "ossus.Protobuf.LensTypes\0228\n\013orientation\030"
  "\006 \001(\0162#.Colossus.Protobuf.OrientationTyp"
  "es\022\021\n\tpoefitted\030\007 \001(\005\022\024\n\014heaterfitted\030\010 "
  "\001(\005\022\021\n\tbossangle\030\t \001(\002\022\021\n\tprofileid\030\n \001("
  "\005\022\021\n\tbuilddate\030\013 \001(\005\022\023\n\013servicedate\030\014 \001("
  "\005\022\017\n\007modelid\030\r \001(\t\022\016\n\006accelx\030\016 \001(\005\022\016\n\006ac"
  "cely\030\017 \001(\005\022\016\n\006accelz\030\020 \001(\005*C\n\tLensTypes\022"
  "\010\n\004FLAT\020\000\022\014\n\010COSECANT\020\001\022\014\n\010DISHFLAT\020\002\022\020\n"
  "\014DISHCOSECANT\020\003*+\n\020OrientationTypes\022\n\n\006N"
  "ORMAL\020\000\022\013\n\007HANGING\020\001"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_nvramcontents_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_nvramcontents_2eproto_sccs[1] = {
  &scc_info_NVRamContents_nvramcontents_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_nvramcontents_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_nvramcontents_2eproto = {
  false, false, descriptor_table_protodef_nvramcontents_2eproto, "nvramcontents.proto", 540,
  &descriptor_table_nvramcontents_2eproto_once, descriptor_table_nvramcontents_2eproto_sccs, descriptor_table_nvramcontents_2eproto_deps, 1, 0,
  schemas, file_default_instances, TableStruct_nvramcontents_2eproto::offsets,
  file_level_metadata_nvramcontents_2eproto, 1, file_level_enum_descriptors_nvramcontents_2eproto, file_level_service_descriptors_nvramcontents_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_nvramcontents_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_nvramcontents_2eproto)), true);
namespace Colossus {
namespace Protobuf {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LensTypes_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_nvramcontents_2eproto);
  return file_level_enum_descriptors_nvramcontents_2eproto[0];
}
bool LensTypes_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* OrientationTypes_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_nvramcontents_2eproto);
  return file_level_enum_descriptors_nvramcontents_2eproto[1];
}
bool OrientationTypes_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void NVRamContents::InitAsDefaultInstance() {
}
class NVRamContents::_Internal {
 public:
  using HasBits = decltype(std::declval<NVRamContents>()._has_bits_);
  static void set_has_radar(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_digitalboard(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_frontend(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_daughterboard(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_lenstype(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_orientation(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_poefitted(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_heaterfitted(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_bossangle(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_profileid(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_builddate(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_servicedate(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_modelid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_accelx(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_accely(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_accelz(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
};

NVRamContents::NVRamContents(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Colossus.Protobuf.NVRamContents)
}
NVRamContents::NVRamContents(const NVRamContents& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  modelid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_modelid()) {
    modelid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_modelid(),
      GetArena());
  }
  ::memcpy(&radar_, &from.radar_,
    static_cast<size_t>(reinterpret_cast<char*>(&accelz_) -
    reinterpret_cast<char*>(&radar_)) + sizeof(accelz_));
  // @@protoc_insertion_point(copy_constructor:Colossus.Protobuf.NVRamContents)
}

void NVRamContents::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NVRamContents_nvramcontents_2eproto.base);
  modelid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&radar_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&accelz_) -
      reinterpret_cast<char*>(&radar_)) + sizeof(accelz_));
}

NVRamContents::~NVRamContents() {
  // @@protoc_insertion_point(destructor:Colossus.Protobuf.NVRamContents)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void NVRamContents::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  modelid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void NVRamContents::ArenaDtor(void* object) {
  NVRamContents* _this = reinterpret_cast< NVRamContents* >(object);
  (void)_this;
}
void NVRamContents::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NVRamContents::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NVRamContents& NVRamContents::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NVRamContents_nvramcontents_2eproto.base);
  return *internal_default_instance();
}


void NVRamContents::Clear() {
// @@protoc_insertion_point(message_clear_start:Colossus.Protobuf.NVRamContents)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    modelid_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&radar_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&poefitted_) -
        reinterpret_cast<char*>(&radar_)) + sizeof(poefitted_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&heaterfitted_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&accelz_) -
        reinterpret_cast<char*>(&heaterfitted_)) + sizeof(accelz_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NVRamContents::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 radar = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_radar(&has_bits);
          radar_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 digitalboard = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_digitalboard(&has_bits);
          digitalboard_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 frontend = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_frontend(&has_bits);
          frontend_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 daughterboard = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_daughterboard(&has_bits);
          daughterboard_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .Colossus.Protobuf.LensTypes lenstype = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::Colossus::Protobuf::LensTypes_IsValid(val))) {
            _internal_set_lenstype(static_cast<::Colossus::Protobuf::LensTypes>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(5, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .Colossus.Protobuf.OrientationTypes orientation = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::Colossus::Protobuf::OrientationTypes_IsValid(val))) {
            _internal_set_orientation(static_cast<::Colossus::Protobuf::OrientationTypes>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(6, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional int32 poefitted = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_poefitted(&has_bits);
          poefitted_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 heaterfitted = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_heaterfitted(&has_bits);
          heaterfitted_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float bossangle = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          _Internal::set_has_bossangle(&has_bits);
          bossangle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional int32 profileid = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_profileid(&has_bits);
          profileid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 builddate = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_builddate(&has_bits);
          builddate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 servicedate = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_servicedate(&has_bits);
          servicedate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string modelid = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          auto str = _internal_mutable_modelid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Colossus.Protobuf.NVRamContents.modelid");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 accelx = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_accelx(&has_bits);
          accelx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 accely = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_accely(&has_bits);
          accely_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 accelz = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_accelz(&has_bits);
          accelz_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NVRamContents::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Colossus.Protobuf.NVRamContents)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 radar = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_radar(), target);
  }

  // optional int32 digitalboard = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_digitalboard(), target);
  }

  // optional int32 frontend = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_frontend(), target);
  }

  // optional int32 daughterboard = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_daughterboard(), target);
  }

  // optional .Colossus.Protobuf.LensTypes lenstype = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_lenstype(), target);
  }

  // optional .Colossus.Protobuf.OrientationTypes orientation = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->_internal_orientation(), target);
  }

  // optional int32 poefitted = 7;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_poefitted(), target);
  }

  // optional int32 heaterfitted = 8;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_heaterfitted(), target);
  }

  // optional float bossangle = 9;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(9, this->_internal_bossangle(), target);
  }

  // optional int32 profileid = 10;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_profileid(), target);
  }

  // optional int32 builddate = 11;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(11, this->_internal_builddate(), target);
  }

  // optional int32 servicedate = 12;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(12, this->_internal_servicedate(), target);
  }

  // optional string modelid = 13;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_modelid().data(), static_cast<int>(this->_internal_modelid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "Colossus.Protobuf.NVRamContents.modelid");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_modelid(), target);
  }

  // optional int32 accelx = 14;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(14, this->_internal_accelx(), target);
  }

  // optional int32 accely = 15;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(15, this->_internal_accely(), target);
  }

  // optional int32 accelz = 16;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(16, this->_internal_accelz(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Colossus.Protobuf.NVRamContents)
  return target;
}

size_t NVRamContents::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Colossus.Protobuf.NVRamContents)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string modelid = 13;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_modelid());
    }

    // optional int32 radar = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_radar());
    }

    // optional int32 digitalboard = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_digitalboard());
    }

    // optional int32 frontend = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_frontend());
    }

    // optional int32 daughterboard = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_daughterboard());
    }

    // optional .Colossus.Protobuf.LensTypes lenstype = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_lenstype());
    }

    // optional .Colossus.Protobuf.OrientationTypes orientation = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_orientation());
    }

    // optional int32 poefitted = 7;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_poefitted());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional int32 heaterfitted = 8;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_heaterfitted());
    }

    // optional float bossangle = 9;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 4;
    }

    // optional int32 profileid = 10;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_profileid());
    }

    // optional int32 builddate = 11;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_builddate());
    }

    // optional int32 servicedate = 12;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_servicedate());
    }

    // optional int32 accelx = 14;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_accelx());
    }

    // optional int32 accely = 15;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_accely());
    }

    // optional int32 accelz = 16;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_accelz());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NVRamContents::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Colossus.Protobuf.NVRamContents)
  GOOGLE_DCHECK_NE(&from, this);
  const NVRamContents* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NVRamContents>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Colossus.Protobuf.NVRamContents)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Colossus.Protobuf.NVRamContents)
    MergeFrom(*source);
  }
}

void NVRamContents::MergeFrom(const NVRamContents& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Colossus.Protobuf.NVRamContents)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_modelid(from._internal_modelid());
    }
    if (cached_has_bits & 0x00000002u) {
      radar_ = from.radar_;
    }
    if (cached_has_bits & 0x00000004u) {
      digitalboard_ = from.digitalboard_;
    }
    if (cached_has_bits & 0x00000008u) {
      frontend_ = from.frontend_;
    }
    if (cached_has_bits & 0x00000010u) {
      daughterboard_ = from.daughterboard_;
    }
    if (cached_has_bits & 0x00000020u) {
      lenstype_ = from.lenstype_;
    }
    if (cached_has_bits & 0x00000040u) {
      orientation_ = from.orientation_;
    }
    if (cached_has_bits & 0x00000080u) {
      poefitted_ = from.poefitted_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      heaterfitted_ = from.heaterfitted_;
    }
    if (cached_has_bits & 0x00000200u) {
      bossangle_ = from.bossangle_;
    }
    if (cached_has_bits & 0x00000400u) {
      profileid_ = from.profileid_;
    }
    if (cached_has_bits & 0x00000800u) {
      builddate_ = from.builddate_;
    }
    if (cached_has_bits & 0x00001000u) {
      servicedate_ = from.servicedate_;
    }
    if (cached_has_bits & 0x00002000u) {
      accelx_ = from.accelx_;
    }
    if (cached_has_bits & 0x00004000u) {
      accely_ = from.accely_;
    }
    if (cached_has_bits & 0x00008000u) {
      accelz_ = from.accelz_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void NVRamContents::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Colossus.Protobuf.NVRamContents)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NVRamContents::CopyFrom(const NVRamContents& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Colossus.Protobuf.NVRamContents)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NVRamContents::IsInitialized() const {
  return true;
}

void NVRamContents::InternalSwap(NVRamContents* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  modelid_.Swap(&other->modelid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NVRamContents, accelz_)
      + sizeof(NVRamContents::accelz_)
      - PROTOBUF_FIELD_OFFSET(NVRamContents, radar_)>(
          reinterpret_cast<char*>(&radar_),
          reinterpret_cast<char*>(&other->radar_));
}

::PROTOBUF_NAMESPACE_ID::Metadata NVRamContents::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace Protobuf
}  // namespace Colossus
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::Colossus::Protobuf::NVRamContents* Arena::CreateMaybeMessage< ::Colossus::Protobuf::NVRamContents >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Colossus::Protobuf::NVRamContents >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
